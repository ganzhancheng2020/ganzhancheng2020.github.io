<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【必学】ChatGPT 1分钟搞定专业流程图</title>
    <url>/2023/03/12/1%E5%88%86%E9%92%9F%E8%AE%A9ChatGPT%E7%94%9F%E6%88%90%E4%B8%93%E4%B8%9A%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="【必学】ChatGPT-1分钟搞定专业流程图"><a href="#【必学】ChatGPT-1分钟搞定专业流程图" class="headerlink" title="【必学】ChatGPT 1分钟搞定专业流程图"></a>【必学】ChatGPT 1分钟搞定专业流程图</h2><p>流程图是我们在工作中经常需要制作的图形之一。它可以清晰、简洁地表达事物之间的关系，帮助我们更好地理解和组织工作。但是，制作流程图有时候会耗费我们大量的时间和精力，这对于工作效率的提升是不利的。在本文中，我们将向大家介绍一种可以让你在1分钟内制作出专业流程图的方法。</p>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>我们需要的两个工具分别是ChatGPT和Draw.io。</p>
<ul>
<li><p>ChatGPT是一种自然语言处理的语言模型，它可以根据我们输入的文本生成自然流畅的语言。在制作流程图时，我们可以向ChatGPT输入制作流程图的步骤和过程，ChatGPT将自动生成对应的PlantUML代码。</p>
</li>
<li><p>Draw.io是一款免费的流程图制作工具，它提供了丰富的流程图素材，可以轻松地制作出各种复杂的流程图。我们只需要将ChatGPT生成的PlantUML代码复制到Draw.io的网页版或者本地软件中，Draw.io就会根据我们输入的代码自动生成一个清晰、美观的流程图。</p>
</li>
</ul>
<h3 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h3><p>接下来，让我们看看具体的制作步骤。</p>
<ol>
<li>打开ChatGPT的网页版或者在本地运行ChatGPT的代码。</li>
<li>在ChatGPT输入流程图的步骤和过程，具体可以参照以下prompt:<blockquote>
<p>请作为一个PlantUML活动图生成器，你需要根据我的提示内容生成一个XXX活动图，并输出相应的PlantUML代码。这个流程图需要包括XXX等角色扮演的活动步骤，流程开始于XXX，结束于XXX。请确保输出的活动步骤不少于30个。</p>
</blockquote>
</li>
</ol>
<p>其中，XXX是制作流程图的具体内容，需要根据你想制作的流程图进行补充。ChatGPT将自动生成对应的PlantUML代码。</p>
<img src="/2023/03/12/1%E5%88%86%E9%92%9F%E8%AE%A9ChatGPT%E7%94%9F%E6%88%90%E4%B8%93%E4%B8%9A%E6%B5%81%E7%A8%8B%E5%9B%BE/ChatGPT.jpg" class="">

<ol start="3">
<li><p>将ChatGPT生成的PlantUML代码复制到Draw.io的网页版或者本地软件中。在Draw.io中，选择+号-&gt;高级-&gt;plantuml，然后将代码粘贴到文本框中,点击插入。</p>
<img src="/2023/03/12/1%E5%88%86%E9%92%9F%E8%AE%A9ChatGPT%E7%94%9F%E6%88%90%E4%B8%93%E4%B8%9A%E6%B5%81%E7%A8%8B%E5%9B%BE/drawio.png" class="">
</li>
<li><p>Draw io会根据你输入的代码自动生成一个清晰、美观的流程图。</p>
</li>
</ol>
<h3 id="效果展示与优化建议"><a href="#效果展示与优化建议" class="headerlink" title="效果展示与优化建议"></a>效果展示与优化建议</h3><p>下面是以美团外卖流程图为例，展示如何使用ChatGPT和Draw.io来制作专业的流程图的输出效果。</p>
<p>在chatGPT输入的prompt如下：</p>
<blockquote>
<p>作为一个PlantUML活动图生成器，你需要根据我的提示内容生成一个美团外卖的活动图，并输出相应的PlantUML代码。这个流程图需要包括客户、骑手、商家、客服等角色扮演的活动步骤，流程开始于客户浏览外卖，结束于客户收到外卖并评价。请确保输出的活动步骤不少于30个。</p>
</blockquote>
<p>由ChatGPT输出的代码输入Draw.io后获得的流程图如下：</p>
<img src="/2023/03/12/1%E5%88%86%E9%92%9F%E8%AE%A9ChatGPT%E7%94%9F%E6%88%90%E4%B8%93%E4%B8%9A%E6%B5%81%E7%A8%8B%E5%9B%BE/takeaway.jpeg" class="">

<p>尽管该流程图已经相当清晰和易于理解，但是我们仍可以进一步编辑和优化，以使其更加美观和易读。</p>
<p>例如，我们可以与ChatGPT进行更加详细的交流，让其提供更多信息和指导，或者让ChatGPT删除或展开某些流程节点，以达到最佳的效果。经过反复校对和修改，最终我们能够获得一个满意的美团外卖流程图。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>本文介绍了如何使用OpenAI的ChatGPT语言模型和Draw.io流程图制作工具，制作清晰、美观的流程图。借助这两个工具，您只需要花费短短一分钟时间，就能制作出专业的流程图。我们希望这篇文章能够对您有所帮助，让您更加轻松地完成流程图的制作。</p>
<p>如果你觉得这篇文章对你有帮助，请点个赞、留个评论或者关注我的博客，这对我来说将是一种最好的鼓励。同时，如果你对这个话题有更多的想法和见解，请在评论区留言和我分享，让我们一起讨论。谢谢阅读！</p>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
        <tag>流程图</tag>
        <tag>Draw.io</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda与pip镜像源设置</title>
    <url>/2022/11/07/Anaconda%E4%B8%8Epip%E9%95%9C%E5%83%8F%E6%BA%90%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Anaconda镜像源"><a href="#Anaconda镜像源" class="headerlink" title="Anaconda镜像源"></a>Anaconda镜像源</h1><h2 id="Anaconda切换镜像源"><a href="#Anaconda切换镜像源" class="headerlink" title="Anaconda切换镜像源"></a>Anaconda切换镜像源</h2><p>将conda切换至<code>清华源</code>后，加快安装包的下载速度。</p>
<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge 
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/
conda config --set show_channel_urls yes
</code></pre>
<h2 id="查看Anaconda镜像源是否切换成功"><a href="#查看Anaconda镜像源是否切换成功" class="headerlink" title="查看Anaconda镜像源是否切换成功"></a>查看Anaconda镜像源是否切换成功</h2><pre><code>conda config --show channels

    channels:
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
  - defaults
</code></pre>
<h2 id="恢复默认源"><a href="#恢复默认源" class="headerlink" title="恢复默认源"></a>恢复默认源</h2><pre><code>conda config --remove-key channels
</code></pre>
<h1 id="pip镜像源"><a href="#pip镜像源" class="headerlink" title="pip镜像源"></a>pip镜像源</h1><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><pre><code>conda install pip
pip -V
pip 21.2.4
</code></pre>
<h2 id="常用镜像源"><a href="#常用镜像源" class="headerlink" title="常用镜像源"></a>常用镜像源</h2><table>
<thead>
<tr>
<th align="left">镜像源</th>
<th align="left">url</th>
</tr>
</thead>
<tbody><tr>
<td align="left">清华大学</td>
<td align="left"><a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></td>
</tr>
<tr>
<td align="left">阿里云</td>
<td align="left"><a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></td>
</tr>
<tr>
<td align="left">中国科学技术大学</td>
<td align="left"><a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></td>
</tr>
<tr>
<td align="left">华中科技大学</td>
<td align="left"><a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></td>
</tr>
<tr>
<td align="left">豆瓣源</td>
<td align="left"><a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></td>
</tr>
<tr>
<td align="left">腾讯源</td>
<td align="left"><a href="http://mirrors.cloud.tencent.com/pypi/simple">http://mirrors.cloud.tencent.com/pypi/simple</a></td>
</tr>
<tr>
<td align="left">华为镜像源</td>
<td align="left"><a href="https://repo.huaweicloud.com/repository/pypi/simple/">https://repo.huaweicloud.com/repository/pypi/simple/</a></td>
</tr>
</tbody></table>
<h2 id="pip切换至清华源"><a href="#pip切换至清华源" class="headerlink" title="pip切换至清华源"></a>pip切换至清华源</h2><p>临时更改</p>
<pre><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package
</code></pre>
<p>永久更改</p>
<pre><code>pip config set global.trusted-host pypi.tuna.tsinghua.edu.cn
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<h2 id="查看pip镜像源是否切换成功"><a href="#查看pip镜像源是否切换成功" class="headerlink" title="查看pip镜像源是否切换成功"></a>查看pip镜像源是否切换成功</h2><pre><code>pip config list

global.index-url=&#39;https://pypi.tuna.tsinghua.edu.cn/simple&#39;
global.trusted-host=&#39;pypi.tuna.tsinghua.edu.cn&#39; 
</code></pre>
<h2 id="恢复默认源-1"><a href="#恢复默认源-1" class="headerlink" title="恢复默认源"></a>恢复默认源</h2><pre><code>pip config set global.index-url https://pypi.org/simple
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>ChatGPT_Prompt大全</title>
    <url>/2023/02/26/ChatGPT-Prompt%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h3 id="ChatGPT-Prompt大全"><a href="#ChatGPT-Prompt大全" class="headerlink" title="ChatGPT Prompt大全"></a>ChatGPT Prompt大全</h3><h3 id="充当-Linux-终端"><a href="#充当-Linux-终端" class="headerlink" title="充当 Linux 终端"></a>充当 Linux 终端</h3><blockquote>
<p>我想让你充当 Linux 终端。我将输入命令，您将回复终端应显示的内容。我希望您只在一个唯一的代码块内回复终端输出，而不是其他任何内容。不要写解释。除非我指示您这样做，否则不要键入命令。当我需要用英语告诉你一些事情时，我会把文字放在中括号内[就像这样]。我的第一个命令是 pwd</p>
</blockquote>
]]></content>
      <tags>
        <tag>人工智能</tag>
        <tag>ChatGpt</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy基础</title>
    <url>/2022/11/18/Numpy%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="numpy-与-pandas的关系"><a href="#numpy-与-pandas的关系" class="headerlink" title="numpy 与 pandas的关系"></a>numpy 与 pandas的关系</h1><h2 id="numpy介绍"><a href="#numpy介绍" class="headerlink" title="numpy介绍"></a>numpy介绍</h2><p>numpy用于处理数据类型,而pandas是基于numpy进行构建的。而pandas有两个数据类型一个是serires另一个是Dataframe，serires里面有一个numpy的数组而Dateframe是由serires组成的字典。</p>
<p>NumPy是Python下的一种多维度数组于矩阵的运算工具, 这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表结构要高效。</p>
<h2 id="numpy安装"><a href="#numpy安装" class="headerlink" title="numpy安装"></a>numpy安装</h2><p>安装numpy Python的一种开源的数值计算扩展<br>比Python自身的嵌套列表结构要高效,支持大量的维度数组与矩阵运算。</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure>

<h2 id="numpy应用"><a href="#numpy应用" class="headerlink" title="numpy应用"></a>numpy应用</h2><p>生成numpy array</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">n = np.array(data)</span><br><span class="line">n</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 2, 3, 4, 5])
</code></pre>
<p>每一个np的数组都有一个shape和一个叫做dtype的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n.shape <span class="comment">#shape表示一个数组的长度和维度</span></span><br><span class="line"><span class="built_in">print</span>(n.shape)</span><br></pre></td></tr></table></figure>

<pre><code>(5,)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n.dtype <span class="comment"># dytpe表示获取数据的类型 </span></span><br></pre></td></tr></table></figure>




<pre><code>dtype(&#39;int64&#39;)
</code></pre>
<p>嵌套序列: 是一组由等长列表组成的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">arr2 = np.array(arr)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="built_in">print</span>(arr2.ndim) <span class="comment"># n Dimension 维度</span></span><br><span class="line"><span class="built_in">print</span>(arr2.shape) <span class="comment">#维度为2 长度为4</span></span><br></pre></td></tr></table></figure>

<pre><code>[[1 2 3 4]
 [1 2 3 4]]
2
(2, 4)
</code></pre>
<p>np对数组类型的一个判断 如果数组里有不同类型的数值会自动统一成字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]</span><br><span class="line">arr2 = np.array(arr)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="built_in">print</span>(arr2.dtype) <span class="comment">#unicode类型 numpy里面的一个字符串</span></span><br></pre></td></tr></table></figure>

<pre><code>[[&#39;1&#39; &#39;2&#39; &#39;3&#39; &#39;4&#39;]
 [&#39;5&#39; &#39;6&#39; &#39;7&#39; &#39;8&#39;]]
&lt;U21
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]</span><br><span class="line">arr2 = np.array(arr)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="built_in">print</span>(arr2.dtype)</span><br></pre></td></tr></table></figure>

<pre><code>[[1 2 3 4]
 [5 6 7 8]]
int64
</code></pre>
<p>当numpy里有一个数组是float时 那么numpy会自动统一成float</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1.0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]] </span><br><span class="line">arr2 = np.array(arr)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="built_in">print</span>(arr2.dtype)</span><br></pre></td></tr></table></figure>

<pre><code>[[1. 2. 3. 4.]
 [5. 6. 7. 8.]]
float64
</code></pre>
<p>numpy 指定长度数组的创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 1., 1.],
       [1., 1., 1.]])
</code></pre>
<p>创建嵌套列表的方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.empty((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)) </span><br></pre></td></tr></table></figure>




<pre><code>array([[[0.00e+000, 4.94e-324, 9.88e-324, 1.48e-323],
        [1.98e-323, 2.47e-323, 2.96e-323, 3.46e-323],
        [3.95e-323, 4.45e-323, 4.94e-323, 5.43e-323]],

       [[5.93e-323, 6.42e-323, 6.92e-323, 7.41e-323],
        [7.91e-323, 8.40e-323, 8.89e-323, 9.39e-323],
        [9.88e-323, 1.04e-322, 1.09e-322, 1.14e-322]]])
</code></pre>
<p>arange 是range函数的数组版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([<span class="number">1.2</span>,<span class="number">2.3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">8</span>,-<span class="number">2</span>,<span class="number">3</span>,-<span class="number">5</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(arr.dtype)</span><br><span class="line"><span class="built_in">print</span>(arr.astype(np.<span class="built_in">int</span>))</span><br></pre></td></tr></table></figure>

<pre><code>[ 1.2  2.3  1.   5.   1.   8.  -2.   3.  -5.   7. ]
float64
[ 1  2  1  5  1  8 -2  3 -5  7]


/var/folders/z4/ghsf3khj15d_3g4_v2t86_f00000gn/T/ipykernel_5466/591934980.py:5: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  print(arr.astype(np.int))
</code></pre>
<p>数组转置和轴兑换，转置就是重塑数组的一种形式 常用的方法T 和transpose</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>

<pre><code>[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]]
</code></pre>
<p>行列转置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(arr.transpose()) </span><br></pre></td></tr></table></figure>

<pre><code>[[ 0  5 10]
 [ 1  6 11]
 [ 2  7 12]
 [ 3  8 13]
 [ 4  9 14]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(arr.T) </span><br></pre></td></tr></table></figure>

<pre><code>[[ 0  5 10]
 [ 1  6 11]
 [ 2  7 12]
 [ 3  8 13]
 [ 4  9 14]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment"># X Y Z</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(arr.transpose(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)) <span class="comment"># Y Z X</span></span><br></pre></td></tr></table></figure>

<pre><code>[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]
[[[ 0 12]
  [ 1 13]
  [ 2 14]
  [ 3 15]]

 [[ 4 16]
  [ 5 17]
  [ 6 18]
  [ 7 19]]

 [[ 8 20]
  [ 9 21]
  [10 22]
  [11 23]]]
</code></pre>
<p>条件逻辑转数组</p>
<p>np.where 等同于 x if condition else y 矢量化版本 </p>
<p>x if condition else y 表示的意思是当条件condition</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#zip 接收的参数就是可迭代对象作为参数，将对象中对应的元素打包成一个个元组,然后返回由这些元组组成的列表</span></span><br><span class="line"><span class="comment">#zip() 就是将函数</span></span><br><span class="line">x_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y_list = [<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(x_list,y_list)))</span><br></pre></td></tr></table></figure>

<pre><code>[(1, &#39;one&#39;), (2, &#39;two&#39;), (3, &#39;three&#39;)]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_arr = np.array([<span class="number">1.1</span>,<span class="number">1.2</span>,<span class="number">1.3</span>])</span><br><span class="line">y_arr = np.array([<span class="number">2.1</span>,<span class="number">2.2</span>,<span class="number">2.3</span>])</span><br><span class="line">condition = np.array([<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>])</span><br><span class="line">result = [x <span class="keyword">if</span> c <span class="keyword">else</span> y <span class="keyword">for</span> x,y,c <span class="keyword">in</span> <span class="built_in">zip</span>(x_arr,y_arr,condition)]</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>[1.1, 2.2, 1.3]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = np.where(condition,x_arr,y_arr)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<pre><code>[1.1 2.2 1.3]
</code></pre>
<p>值替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">arr_l = np.where(arr&gt;<span class="number">0</span>,<span class="number">2</span>,-<span class="number">2</span>)<span class="comment">#当条件成立时 2 不成立时-2</span></span><br><span class="line"><span class="built_in">print</span>(arr_l)</span><br><span class="line">arr_2 = np.where(arr&gt;<span class="number">0</span>,<span class="number">2</span>,arr)</span><br><span class="line"><span class="built_in">print</span>(arr_2)</span><br></pre></td></tr></table></figure>

<pre><code>[[-0.23826374 -0.54472002 -0.54479254 -0.79378578]
 [-0.006208   -0.43183668 -0.75139827 -0.18970789]
 [-0.82629654 -0.45780763 -1.01161057 -1.07773585]
 [ 1.88818561  0.78035827  0.02781177 -0.60691164]]
[[-2 -2 -2 -2]
 [-2 -2 -2 -2]
 [-2 -2 -2 -2]
 [ 2  2  2 -2]]
[[-0.23826374 -0.54472002 -0.54479254 -0.79378578]
 [-0.006208   -0.43183668 -0.75139827 -0.18970789]
 [-0.82629654 -0.45780763 -1.01161057 -1.07773585]
 [ 2.          2.          2.         -0.60691164]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(arr.mean())</span><br><span class="line"><span class="built_in">print</span>(np.mean(arr))<span class="comment">#求平均值</span></span><br><span class="line"><span class="built_in">print</span>(arr.<span class="built_in">sum</span>())<span class="comment">#求和</span></span><br><span class="line"><span class="built_in">print</span>(arr.std())<span class="comment">#求std</span></span><br></pre></td></tr></table></figure>

<pre><code>[[ 0.6130518   0.43924189 -0.2537507   0.49598509]
 [-1.97729233  0.73655409 -0.30552823 -0.75755789]
 [ 0.60131864 -1.27657327 -0.89560114  1.13346356]
 [-1.18585113 -0.31885006  1.12015412  0.84369208]]
-0.06172146664826095
-0.06172146664826095
-0.9875434663721752
0.9182243942962772
</code></pre>
<p>排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.random(<span class="number">4</span>)</span><br><span class="line">arr.sort() <span class="comment">#从小到大</span></span><br><span class="line"><span class="built_in">print</span>(arr) </span><br></pre></td></tr></table></figure>

<pre><code>[0.48178833 0.51025837 0.58290965 0.90575382]
</code></pre>
<p>多维数组排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">arr.sort(<span class="number">0</span>) <span class="comment">#传递轴号 按轴来进行排序</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>

<pre><code>[[ 0.22161315  0.64823309 -2.04807964  0.6524264 ]
 [ 1.74278161 -0.64325321  0.26055656  0.51315066]
 [ 0.69951378 -1.07316847  1.14364493 -1.08608236]
 [-0.19492533  0.42278032 -0.73500392 -1.21319572]]
[[-0.19492533 -1.07316847 -2.04807964 -1.21319572]
 [ 0.22161315 -0.64325321 -0.73500392 -1.08608236]
 [ 0.69951378  0.42278032  0.26055656  0.51315066]
 [ 1.74278161  0.64823309  1.14364493  0.6524264 ]]
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数学习笔记</title>
    <url>/2022/11/06/Python%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>还记得 Python 里面“万物皆对象”么？Python 把函数也当成对象，可以从另一个函数中返回出来而去构建高阶函数，比如：<br>参数是函数、返回值是函数。</p>
<p>我们首先来介绍函数的定义。</p>
<ul>
<li>函数以<code>def</code>关键词开头，后接函数名和圆括号()。</li>
<li>函数执行的代码以冒号起始，并且缩进。</li>
<li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回<code>None</code>。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span> (parameters):</span><br><span class="line">	<span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">	function_suite</span><br><span class="line">	<span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>



<h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">printme(<span class="string">&quot;调用函数&quot;</span>)  <span class="comment"># 我要调用用户自定义函数!</span></span><br><span class="line">printme(<span class="string">&quot;再次调用同一函数&quot;</span>)  <span class="comment"># </span></span><br><span class="line"><span class="comment">## 函数文档再次调用同一函数</span></span><br><span class="line"></span><br><span class="line">temp = printme(<span class="string">&#x27;尝试进行赋值&#x27;</span>) <span class="comment"># 试一试赋值</span></span><br><span class="line"><span class="built_in">print</span>(temp)  <span class="comment"># 输出为None，该function并不会赋值</span></span><br></pre></td></tr></table></figure>

<h2 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MyFirstFunction</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="string">&quot;函数定义过程中name是形参&quot;</span></span><br><span class="line">    <span class="comment"># 因为Ta只是一个形式，表示占据一个参数位置</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;传递进来的&#123;0&#125;叫做实参，因为Ta是具体的参数值！&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyFirstFunction(<span class="string">&#x27;老马的程序人生&#x27;</span>)  </span><br><span class="line"><span class="comment"># 传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(MyFirstFunction.__doc__) <span class="comment">#输出MyFirstFunction function中的注释</span></span><br><span class="line"><span class="comment"># 函数定义过程中name是形参</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(MyFirstFunction) <span class="comment">#输出完整的函数文档</span></span><br><span class="line"><span class="comment"># Help on function MyFirstFunction in module __main__:</span></span><br><span class="line"><span class="comment"># MyFirstFunction(name)</span></span><br><span class="line"><span class="comment">#    函数定义过程中name是形参</span></span><br></pre></td></tr></table></figure>

<pre><code>传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！
函数定义过程中name是形参
Help on function MyFirstFunction in module __main__:

MyFirstFunction(name)
    函数定义过程中name是形参
</code></pre>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>Python 的函数具有非常灵活多样的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。从简到繁的参数形态如下：</p>
<ul>
<li>位置参数 (positional argument)</li>
<li>默认参数 (default argument)</li>
<li>可变参数 (variable argument)</li>
<li>关键字参数 (keyword argument)</li>
<li>命名关键字参数 (name keyword argument)</li>
<li>参数组合</li>
</ul>
<p><strong>1. 位置参数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">arg1</span>):</span><br><span class="line">	<span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">	function_suite</span><br><span class="line">	<span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>arg1</code> - 位置参数 ，这些参数在调用函数 (call function) 时位置要固定。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">name, age</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line">printinfo(<span class="string">&#x27;小猫&#x27;</span>, <span class="number">10</span>)  <span class="comment"># Name:小马,Age:10</span></span><br></pre></td></tr></table></figure>

<pre><code>Name:小猫,Age:10
</code></pre>
<p><strong>2. 默认参数</strong></p>
<blockquote>
<p>def functionname(arg1, arg2&#x3D;v):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;”函数_文档字符串”<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;function_suite<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return [expression]<br></p>
</blockquote>
<ul>
<li><code>arg2 = v</code> - 默认参数 &#x3D; 默认值，调用函数时，默认参数的值如果没有传入，则被认为是默认值。</li>
<li>默认参数一定要放在位置参数 <b>后面</b>，不然程序会报错。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">name, age=<span class="number">18</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(<span class="string">&#x27;小猫&#x27;</span>)  <span class="comment"># Name:小猫,Age:18</span></span><br><span class="line">printinfo(<span class="string">&#x27;小猫&#x27;</span>, <span class="number">10</span>)  <span class="comment"># Name:小猫,Age:10</span></span><br></pre></td></tr></table></figure>

<pre><code>Name:小猫,Age:18
Name:小猫,Age:10
</code></pre>
<ul>
<li>Python 允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">name, age</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(age=<span class="number">18</span>, name=<span class="string">&#x27;小猫&#x27;</span>)  <span class="comment"># Name:小猫,Age:18</span></span><br></pre></td></tr></table></figure>

<pre><code>Name:小猫,Age:18
</code></pre>
<p><strong>3. 可变参数</strong></p>
<p>顾名思义，可变参数就是传入的参数个数是可变的，可以是 0, 1, 2 到任意个，是不定长的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">arg1, arg2=v, *args</span>):</span><br><span class="line">	<span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">	function_suite</span><br><span class="line">	<span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>*args</code> - 可变参数，可以是从零个到任意个，自动组装成<code>元组</code>。</li>
<li>加了星号（*）的变量名会存放所有未命名的变量参数。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">arg1, *args</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg1)</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(var)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入一个参数：&quot;</span>)</span><br><span class="line">printinfo(<span class="number">10</span>)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入多个参数：&quot;</span>)</span><br><span class="line">printinfo(<span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># 60</span></span><br><span class="line"><span class="comment"># 50</span></span><br></pre></td></tr></table></figure>

<pre><code>输入一个参数：
10
输入多个参数：
70
60
50
</code></pre>
<p><strong>4. 关键字参数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">arg1, arg2=v, *args, **kw</span>):</span><br><span class="line">	<span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">	function_suite</span><br><span class="line">	<span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>**kw</code> - 关键字参数，可以是从零个到任意个，<code>自动组装成字典</code>。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">arg1, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg1)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(<span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># (60, 50)</span></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br><span class="line">printinfo(<span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>, a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># (60, 50)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>70
(60, 50)
&#123;&#125;
70
(60, 50)
&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;
</code></pre>
<p>「可变参数」和「关键字参数」的同异总结如下：</p>
<ul>
<li>可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。</li>
<li>关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)。</li>
</ul>
<p><strong>5. 命名关键字参数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">arg1, arg2=v, *args, *, nkw, **kw</span>):</span><br><span class="line"> 	<span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line"> 	function_suite</span><br><span class="line"> 	<span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>*, nkw</code> - 命名关键字参数，用户想要输入的关键字参数，定义方式是在nkw 前面加个分隔符 <code>*</code>。</li>
<li>如果要限制关键字参数的名字，就可以用「命名关键字参数」</li>
<li>使用命名关键字参数时，要特别注意不能缺少参数名。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">arg1, *, nkw, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg1)</span><br><span class="line">    <span class="built_in">print</span>(nkw)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(<span class="number">70</span>, nkw=<span class="number">10</span>, a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># printinfo(70, 10, a=1, b=2)</span></span><br><span class="line"><span class="comment"># TypeError: printinfo() takes 1 positional argument but 2 were given</span></span><br></pre></td></tr></table></figure>

<pre><code>70
10
&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;
</code></pre>
<ul>
<li>没有写参数名<code>nwk</code>，因此 10 被当成「位置参数」，而原函数只有 1 个位置函数，现在调用了 2 个，因此程序会报错。</li>
</ul>
<p><strong>6. 参数组合</strong></p>
<p>在 Python 中定义函数，可以用位置参数、默认参数、可变参数、命名关键字参数和关键字参数，这 5 种参数中的 4 个都可以一起使用，但是注意，参数定义的顺序必须是：</p>
<ul>
<li>位置参数、默认参数、可变参数和关键字参数。</li>
<li>位置参数、默认参数、命名关键字参数和关键字参数。</li>
</ul>
<p>要注意定义可变参数和关键字参数的语法：</p>
<ul>
<li><code>*args</code> 是可变参数，<code>args</code> 接收的是一个 <code>tuple</code></li>
<li><code>**kw</code> 是关键字参数，<code>kw</code> 接收的是一个 <code>dict</code></li>
</ul>
<p>命名关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。定义命名关键字参数不要忘了写分隔符 <code>*</code>，否则定义的是位置参数。</p>
<p>警告：虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数很难懂。</p>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>【例子1】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(add([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))  <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<pre><code>3
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>【例子2】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>():</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="string">&#x27;小马的程序人生&#x27;</span>, <span class="number">3.14</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(back())  <span class="comment"># [1, &#x27;小马的程序人生&#x27;, 3.14]</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, &#39;小马的程序人生&#39;, 3.14]
</code></pre>
<p>【例子3】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="string">&#x27;小马的程序人生&#x27;</span>, <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(back())  <span class="comment"># (1, &#x27;小马的程序人生&#x27;, 3.14)</span></span><br></pre></td></tr></table></figure>

<pre><code>(1, &#39;小马的程序人生&#39;, 3.14)
</code></pre>
<p>【例子4】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printme</span>(<span class="params"><span class="built_in">str</span></span>): <span class="comment">#当函数不具备返回值时</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">temp = printme(<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">print</span>(temp) <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp))  <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>hello
None
&lt;class &#39;NoneType&#39;&gt;
</code></pre>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul>
<li>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</li>
<li>定义在函数内部的变量拥有局部作用域，该变量称为局部变量。</li>
<li>定义在函数外部的变量拥有全局作用域，该变量称为全局变量。</li>
<li>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">discounts</span>(<span class="params">price, rate</span>):</span><br><span class="line">    final_price = price * rate</span><br><span class="line">    <span class="keyword">return</span> final_price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">old_price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入原价:&#x27;</span>))  <span class="comment"># 98</span></span><br><span class="line">rate = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入折扣率:&#x27;</span>))  <span class="comment"># 0.9</span></span><br><span class="line">new_price = discounts(old_price, rate)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;打折后价格是:%.2f&#x27;</span> % new_price)  <span class="comment"># 88.20</span></span><br></pre></td></tr></table></figure>

<pre><code>请输入原价:98
请输入折扣率:0.9
打折后价格是:88.20
</code></pre>
<ul>
<li>当内部作用域想修改外部作用域的变量时，就要用到<code>global</code>和<code>nonlocal</code>关键字了。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="keyword">global</span> num  <span class="comment"># 需要使用 global 关键字声明</span></span><br><span class="line">    <span class="built_in">print</span>(num)  <span class="comment"># 1</span></span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    <span class="built_in">print</span>(num)  <span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment"># 123</span></span><br></pre></td></tr></table></figure>

<pre><code>1
123
123
</code></pre>
<p><strong>内嵌函数</strong></p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outer函数在这被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inner函数在这被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    inner()  <span class="comment"># 该函数只能在outer函数内部被调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># outer函数在这被调用</span></span><br><span class="line"><span class="comment"># inner函数在这被调用</span></span><br></pre></td></tr></table></figure>

<pre><code>outer函数在这被调用
inner函数在这被调用
</code></pre>
<p>【例子】闭包的返回值通常是函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_counter</span>(<span class="params">init</span>):</span><br><span class="line">    counter = [init]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inc</span>(): counter[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dec</span>(): counter[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(): <span class="keyword">return</span> counter[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(): counter[<span class="number">0</span>] = init</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inc, dec, get, reset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inc, dec, get, reset = make_counter(<span class="number">0</span>)</span><br><span class="line">inc()</span><br><span class="line">inc()</span><br><span class="line">inc()</span><br><span class="line"><span class="built_in">print</span>(get())  <span class="comment"># 3</span></span><br><span class="line">dec()</span><br><span class="line"><span class="built_in">print</span>(get())  <span class="comment"># 2</span></span><br><span class="line">reset()</span><br><span class="line"><span class="built_in">print</span>(get())  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<pre><code>3
2
0
</code></pre>
<p>【例子】 如果要修改闭包作用域中的变量则需要 <code>nonlocal</code> 关键字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> num  <span class="comment"># nonlocal关键字声明</span></span><br><span class="line">        num = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<pre><code>100
100
</code></pre>
<p><strong>递归</strong></p>
<ul>
<li>如果一个函数在内部调用自身本身，这个函数就是递归函数。</li>
</ul>
<p>【例子】<code>n! = 1 x 2 x 3 x ... x n</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用循环</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    n = n * k</span><br><span class="line"><span class="built_in">print</span>(n)  <span class="comment"># 120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>)) <span class="comment"># 120</span></span><br></pre></td></tr></table></figure>

<pre><code>120
120
</code></pre>
<p>【例子】斐波那契数列 <code>f(n)=f(n-1)+f(n-2), f(0)=0 f(1)=1</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用循环</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">lst = <span class="built_in">list</span>([i, j])</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>):</span><br><span class="line">    k = i + j</span><br><span class="line">    lst.append(k)</span><br><span class="line">    i = j</span><br><span class="line">    j = k</span><br><span class="line"><span class="built_in">print</span>(lst)  </span><br><span class="line"><span class="comment"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recur_fibo</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> recur_fibo(n - <span class="number">1</span>) + recur_fibo(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    lst.append(recur_fibo(k))</span><br><span class="line"><span class="built_in">print</span>(lst)  </span><br><span class="line"><span class="comment"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></span><br></pre></td></tr></table></figure>

<pre><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
</code></pre>
<p>【例子】设置递归的层数，Python默认递归层数为 100</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>阿里云</tag>
        <tag>天池</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python高阶函数</title>
    <url>/2022/11/18/Python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="Python高阶函数应用"><a href="#Python高阶函数应用" class="headerlink" title="Python高阶函数应用"></a>Python高阶函数应用</h1><h2 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span> (a, b):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<pre><code>7
</code></pre>
<h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_lambda = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line">add_lambda(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>7
</code></pre>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">condition = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">if</span> condition <span class="keyword">else</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>1
</code></pre>
<h2 id="join-应用"><a href="#join-应用" class="headerlink" title="join 应用"></a>join 应用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;How Can Mirrors Be Real If Our Eyes Aren&#x27;T Real&quot;</span></span><br><span class="line">n=[]</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> string.split():</span><br><span class="line">    n.append(word.capitalize())</span><br><span class="line"><span class="string">&#x27; &#x27;</span>.join(n)</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<pre><code>&quot;How Can Mirrors Be Real If Our Eyes Aren&#39;t Real&quot;
</code></pre>
<h2 id="map-函数的应用"><a href="#map-函数的应用" class="headerlink" title="map 函数的应用"></a>map 函数的应用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#map(func, iterables ) --&gt; map object</span></span><br><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">r=<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x+x,list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br></pre></td></tr></table></figure>

<pre><code>[2, 4, 6, 8, 10]
</code></pre>
<h2 id="filter-过滤器"><a href="#filter-过滤器" class="headerlink" title="filter 过滤器"></a>filter 过滤器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#filter(&#x27;筛选条件&#x27;, inerables)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string_is_not_null</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> <span class="built_in">len</span>(s.strip())&gt;<span class="number">0</span></span><br><span class="line">list1=[<span class="string">&#x27;string&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27; str &#x27;</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">filter</span>(string_is_not_null, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;string&#39;, &#39; str &#39;]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string_is_not_null(<span class="string">&#x27;    &#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False
</code></pre>
<h2 id="list-表达式"><a href="#list-表达式" class="headerlink" title="list 表达式"></a>list 表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list1= [i*i <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<pre><code>[1, 4, 9, 16, 25]
</code></pre>
<h2 id="set表达式"><a href="#set表达式" class="headerlink" title="set表达式"></a>set表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">list1= &#123;i*i <span class="keyword">for</span> i <span class="keyword">in</span> data&#125;</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<pre><code>&#123;1, 4, 9, 16, 25&#125;
</code></pre>
<h2 id="dict表达式"><a href="#dict表达式" class="headerlink" title="dict表达式"></a>dict表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,</span><br><span class="line">      <span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>,</span><br><span class="line">      <span class="string">&#x27;e&#x27;</span>:<span class="number">5</span></span><br><span class="line">     &#125;</span><br><span class="line">dict1 = &#123;key:value*value <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 4, &#39;c&#39;: 9, &#39;d&#39;: 16, &#39;e&#39;: 25&#125;
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>TED演讲（一）：如何成为一个更好的交谈者</title>
    <url>/2022/07/12/TED%E6%BC%94%E8%AE%B2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BA%A4%E8%B0%88%E8%80%85/</url>
    <content><![CDATA[<h3 id="1-不要三心二意"><a href="#1-不要三心二意" class="headerlink" title="1. 不要三心二意"></a>1. 不要三心二意</h3><p>在交谈的时候要专心，不要三心二意去想别的事情。</p>
<h3 id="2-不要好人师表"><a href="#2-不要好人师表" class="headerlink" title="2. 不要好人师表"></a>2. 不要好人师表</h3><p>你需要在进入每一次交流时都假定自己可以学习到一些东西。<br>真正的倾听是需要把个人观点放在一边的。每个人都是某一方面的专家。</p>
<h3 id="3-使用开放式问题"><a href="#3-使用开放式问题" class="headerlink" title="3. 使用开放式问题"></a>3. 使用开放式问题</h3><p>用what when where why how who 开始提问，这样你会获得一个相对比较复杂的答案。<br>如果用一个复杂的问题提问仅仅会获得一个简答的回答。</p>
<h3 id="4-顺其自然"><a href="#4-顺其自然" class="headerlink" title="4. 顺其自然"></a>4. 顺其自然</h3><p>让对话顺其自然，故事和想法会不断得出现在你的脑海中，但也要学会控制他们。</p>
<h3 id="5-如果你不知道，说你不知道。"><a href="#5-如果你不知道，说你不知道。" class="headerlink" title="5. 如果你不知道，说你不知道。"></a>5. 如果你不知道，说你不知道。</h3><p>谨言慎行，说话是一个需要负责任的行为</p>
<h3 id="6-不要拿自己的经历跟别人的进行比较"><a href="#6-不要拿自己的经历跟别人的进行比较" class="headerlink" title="6. 不要拿自己的经历跟别人的进行比较"></a>6. 不要拿自己的经历跟别人的进行比较</h3><p>每个人的经历都是不一样的，人的悲欢是不可以共鸣的。</p>
<h3 id="7-尽量别重复自己的话"><a href="#7-尽量别重复自己的话" class="headerlink" title="7. 尽量别重复自己的话"></a>7. 尽量别重复自己的话</h3><p>这样会很无聊，当我们有一个观点想要表达时通常都会换着方式重复说许多遍。</p>
<h3 id="8-少说废话"><a href="#8-少说废话" class="headerlink" title="8. 少说废话"></a>8. 少说废话</h3><p>说重点，对话者关心的是你与他们的共同点，你是个怎么样的人。</p>
<h3 id="9-认真倾听"><a href="#9-认真倾听" class="headerlink" title="9. 认真倾听"></a>9. 认真倾听</h3><p>认真倾听彼此</p>
<h3 id="10-简明扼要"><a href="#10-简明扼要" class="headerlink" title="10.简明扼要"></a>10.简明扼要</h3><p>直奔主题</p>
]]></content>
      <categories>
        <category>人际关系</category>
      </categories>
      <tags>
        <tag>交谈</tag>
        <tag>社交</tag>
        <tag>TED演讲</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas函数大全</title>
    <url>/2022/09/29/pandas%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h3 id="函数汇总"><a href="#函数汇总" class="headerlink" title="函数汇总"></a>函数汇总</h3><p>整理了100个Pandas常用的函数，分别分为6类：<br>统计汇总函数、<br>数据清洗函数、<br>数据筛选、<br>绘图与元素级运算函数、<br>时间序列函数<br>其他函数。</p>
<h5 id="统计汇总函数"><a href="#统计汇总函数" class="headerlink" title="统计汇总函数"></a>统计汇总函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>min()</td>
<td>计算最小值</td>
</tr>
<tr>
<td>max()</td>
<td>计算最大值</td>
</tr>
<tr>
<td>sum()</td>
<td>求和</td>
</tr>
<tr>
<td>mean()</td>
<td>计算平均值</td>
</tr>
<tr>
<td>count()</td>
<td>计数（统计非缺失元素的个数）</td>
</tr>
<tr>
<td>size()</td>
<td>计数（统计所有元素的个数）</td>
</tr>
<tr>
<td>median()</td>
<td>计算中位数</td>
</tr>
<tr>
<td>var()</td>
<td>计算方差</td>
</tr>
<tr>
<td>std()</td>
<td>计算标准差</td>
</tr>
<tr>
<td>quantile()</td>
<td>计算任意分位数</td>
</tr>
<tr>
<td>cov()</td>
<td>计算协方差</td>
</tr>
<tr>
<td>corr()</td>
<td>计算相关系数</td>
</tr>
<tr>
<td>skew()</td>
<td>计算偏度</td>
</tr>
<tr>
<td>kurt()</td>
<td>计算峰度</td>
</tr>
<tr>
<td>mode()</td>
<td>计算众数</td>
</tr>
<tr>
<td>describe()</td>
<td>描述性统计（一次性返回多个统计结果）</td>
</tr>
<tr>
<td>groupby()</td>
<td>分组</td>
</tr>
<tr>
<td>aggregate()</td>
<td>聚合运算（可以自定义统计函数）</td>
</tr>
<tr>
<td>argmin()</td>
<td>寻找最小值所在位置</td>
</tr>
<tr>
<td>argmax()</td>
<td>寻找最大值所在位置</td>
</tr>
<tr>
<td>any()</td>
<td>等价于逻辑“或”</td>
</tr>
<tr>
<td>all()</td>
<td>等价于逻辑“与”</td>
</tr>
<tr>
<td>value_counts()</td>
<td>频次统计</td>
</tr>
<tr>
<td>cumsum()</td>
<td>运算累计和</td>
</tr>
<tr>
<td>cumprod()</td>
<td>运算累计积</td>
</tr>
<tr>
<td>pct­­_change()</td>
<td>运算比率（后一个元素与前一个元素的比率）</td>
</tr>
</tbody></table>
<h5 id="数据清洗函数"><a href="#数据清洗函数" class="headerlink" title="数据清洗函数"></a>数据清洗函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>duplicated()</td>
<td>判断序列元素是否重复</td>
</tr>
<tr>
<td>drop_duplicates()</td>
<td>删除重复值</td>
</tr>
<tr>
<td>hasnans()</td>
<td>判断序列是否存在缺失（返回TRUE或FALSE）</td>
</tr>
<tr>
<td>isnull()</td>
<td>判断序列元素是否为缺失（返回与序列长度一样的bool值）</td>
</tr>
<tr>
<td>notnull()</td>
<td>判断序列元素是否不为缺失（返回与序列长度一样的bool值）</td>
</tr>
<tr>
<td>dropna()</td>
<td>删除缺失值</td>
</tr>
<tr>
<td>fillna()</td>
<td>缺失值填充</td>
</tr>
<tr>
<td>ffill()</td>
<td>前向后填充缺失值（使用缺失值的前一个元素填充）</td>
</tr>
<tr>
<td>bfill()</td>
<td>后向填充缺失值（使用缺失值的后一个元素填充）</td>
</tr>
<tr>
<td>dtypes()</td>
<td>检查数据类型</td>
</tr>
<tr>
<td>astype()</td>
<td>类型强制转换</td>
</tr>
<tr>
<td>pd.to_datetime</td>
<td>转日期时间型</td>
</tr>
<tr>
<td>factorize()</td>
<td>因子化转换</td>
</tr>
<tr>
<td>sample()</td>
<td>抽样</td>
</tr>
<tr>
<td>where()</td>
<td>基于条件判断的值替换</td>
</tr>
<tr>
<td>replace()</td>
<td>按值替换（不可使用正则）</td>
</tr>
<tr>
<td>str.replace()</td>
<td>按值替换（可使用正则）</td>
</tr>
<tr>
<td>str.split.str()</td>
<td>字符分隔</td>
</tr>
</tbody></table>
<h5 id="数据筛选函数"><a href="#数据筛选函数" class="headerlink" title="数据筛选函数"></a>数据筛选函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>isin()</td>
<td>成员关系判断</td>
</tr>
<tr>
<td>between()</td>
<td>区间判断</td>
</tr>
<tr>
<td>loc()</td>
<td>条件判断（可使用在数据框中）</td>
</tr>
<tr>
<td>iloc()</td>
<td>索引判断（可使用在数据框中）</td>
</tr>
<tr>
<td>compress()</td>
<td>条件判断</td>
</tr>
<tr>
<td>nlargest()</td>
<td>搜寻最大的n个元素</td>
</tr>
<tr>
<td>nsmallest()</td>
<td>搜寻最小的n个元素</td>
</tr>
<tr>
<td>str.findall()</td>
<td>子串查询（可使用正则）</td>
</tr>
</tbody></table>
<h5 id="绘图与元素级运算函数"><a href="#绘图与元素级运算函数" class="headerlink" title="绘图与元素级运算函数"></a>绘图与元素级运算函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>hist()</td>
<td>绘制直方图</td>
</tr>
<tr>
<td>plot()</td>
<td>可基于kind参数绘制更多图形（饼图，折线图，箱线图等）</td>
</tr>
<tr>
<td>map()</td>
<td>元素映射</td>
</tr>
<tr>
<td>apply()</td>
<td>基于自定义函数的元素级操作</td>
</tr>
</tbody></table>
<h5 id="时间序列函数"><a href="#时间序列函数" class="headerlink" title="时间序列函数"></a>时间序列函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>dt.date()</td>
<td>抽取出日期值</td>
</tr>
<tr>
<td>dt.time()</td>
<td>抽取出时间（时分秒）</td>
</tr>
<tr>
<td>dt.year()</td>
<td>抽取出年</td>
</tr>
<tr>
<td>dt.mouth()</td>
<td>抽取出月</td>
</tr>
<tr>
<td>dt.day()</td>
<td>抽取出日</td>
</tr>
<tr>
<td>dt.hour()</td>
<td>抽取出时</td>
</tr>
<tr>
<td>dt.minute()</td>
<td>抽取出分钟</td>
</tr>
<tr>
<td>dt.second()</td>
<td>抽取出秒</td>
</tr>
<tr>
<td>dt.quarter()</td>
<td>抽取出季度</td>
</tr>
<tr>
<td>dt.weekday()</td>
<td>抽取出星期几（返回数值型）</td>
</tr>
<tr>
<td>dt.weekday_name()</td>
<td>抽取出星期几（返回字符型）</td>
</tr>
<tr>
<td>dt.week()</td>
<td>抽取出年中的第几周</td>
</tr>
<tr>
<td>dt.dayofyear()</td>
<td>抽取出年中的第几天</td>
</tr>
<tr>
<td>dt.daysinmonth()</td>
<td>抽取出月对应的最大天数</td>
</tr>
<tr>
<td>dt.is_month_start()</td>
<td>判断日期是否为当月的第一天</td>
</tr>
<tr>
<td>dt.is_month_end()</td>
<td>判断日期是否为当月的最后一天</td>
</tr>
<tr>
<td>dt.is_quarter_start()</td>
<td>判断日期是否为当季度的第一天</td>
</tr>
<tr>
<td>dt.is_quarter_end()</td>
<td>判断日期是否为当季度的最后一天</td>
</tr>
<tr>
<td>dt.is_year_start()</td>
<td>判断日期是否为当年的第一天</td>
</tr>
<tr>
<td>dt.is_year_end()</td>
<td>判断日期是否为当年的最后一天</td>
</tr>
<tr>
<td>dt.is_leap_year()</td>
<td>判断日期是否为闰年</td>
</tr>
</tbody></table>
<h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>append()</td>
<td>序列元素的追加（需指定其他序列）</td>
</tr>
<tr>
<td>diff()</td>
<td>一阶差分</td>
</tr>
<tr>
<td>round()</td>
<td>元素的四舍五入</td>
</tr>
<tr>
<td>sort_values()</td>
<td>按值排序</td>
</tr>
<tr>
<td>sort_index()</td>
<td>按索引排序</td>
</tr>
<tr>
<td>to_dict()</td>
<td>转为字典</td>
</tr>
<tr>
<td>tolist()</td>
<td>转为列表</td>
</tr>
<tr>
<td>unique()</td>
<td>元素排重</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas笔记（一）：查看数据</title>
    <url>/2022/09/23/pandas%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>Pandas 是 Python 语言的一个扩展程序库，用于数据分析。</p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>打开<code>terminal</code>输入</p>
<pre><code>&gt;&gt;&gt; pip install pandas
</code></pre>
<h3 id="3-生成数据"><a href="#3-生成数据" class="headerlink" title="3. 生成数据"></a>3. 生成数据</h3><p>使用<code>Pandas</code>生成数据的方式有3种：<br>第一种：使用列创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data [[<span class="string">&#x27;apple&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;banana&#x27;</span>,<span class="number">11</span>],[<span class="string">&#x27;cherry&#x27;</span>,<span class="number">12</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">&#x27;fruit&#x27;</span>,<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<table>
<thead>
<tr>
<th align="center">fruit</th>
<th align="center">count</th>
</tr>
</thead>
<tbody><tr>
<td align="center">apple</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">banana</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">cherry</td>
<td align="center">12</td>
</tr>
</tbody></table>
<p>第二种：使用<code>ndarrays</code>创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;fruit&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;cherry&#x27;</span>],<span class="string">&#x27;count&#x27;</span>:[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<table>
<thead>
<tr>
<th align="center">fruit</th>
<th align="center">count</th>
</tr>
</thead>
<tbody><tr>
<td align="center">apple</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">banana</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">cherry</td>
<td align="center">12</td>
</tr>
</tbody></table>
<p>第三种：使用字典创建：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [&#123;<span class="string">&#x27;fruit&#x27;</span>:<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;count&#x27;</span>:<span class="number">10</span>&#125;,&#123;<span class="string">&#x27;fruit&#x27;</span>:<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;count&#x27;</span>:<span class="number">11</span>&#125;,&#123;<span class="string">&#x27;fruit&#x27;</span>:<span class="string">&#x27;cherry&#x27;</span>,<span class="string">&#x27;count&#x27;</span>:<span class="number">12</span>&#125;]</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<table>
<thead>
<tr>
<th align="center">fruit</th>
<th align="center">count</th>
</tr>
</thead>
<tbody><tr>
<td align="center">apple</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">banana</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">cherry</td>
<td align="center">12</td>
</tr>
</tbody></table>
<h3 id="4-读取数据Excel数据"><a href="#4-读取数据Excel数据" class="headerlink" title="4. 读取数据Excel数据"></a>4. 读取数据Excel数据</h3><p>使用以下<code>code</code>读取excel文件：XXX为文件名，若文件不是与代码放在同一个目录下，需要在前面加入文件路径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.read_csv(<span class="string">&quot;XXX.csv&quot;</span>) <span class="comment">#cvs文件格式使用read_csv</span></span><br><span class="line">pd.read_excel(<span class="string">&quot;XXX.xlsx&quot;</span>) <span class="comment">#xlsx文件格式使用read_excel格式</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas笔记（二）</title>
    <url>/2022/09/25/pandas%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h3 id="5-查看数据"><a href="#5-查看数据" class="headerlink" title="5.查看数据"></a>5.查看数据</h3><p>有一张表如下图：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">fruit</th>
<th align="center">count</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">apple</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">banana</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">cherry</td>
<td align="center">12</td>
</tr>
</tbody></table>
<p>生成数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">	df = pd.DataFrame(&#123;<span class="string">&#x27;fruit&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;cherry&#x27;</span>],<span class="string">&#x27;count&#x27;</span>:[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]&#125;)</span><br></pre></td></tr></table></figure>

<p>查看<code>DataFrame</code>有多少列多少行</p>
<pre><code>df.shape
</code></pre>
<p>（3,2）</p>
<p>查看<code>DataFrame</code>详情</p>
<pre><code>df.info()  
</code></pre>
<p>运行结果：</p>
<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 3 entries, 0 to 2
Data columns (total 2 columns):
fruit    3 non-null object
count    3 non-null int64
dtypes: int64(1), object(1)
memory usage: 128.0+ bytes
</code></pre>
<p>describe()可以快速查看数据的统计概要：</p>
<pre><code>df.describe()
</code></pre>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">count</th>
</tr>
</thead>
<tbody><tr>
<td align="center">count</td>
<td align="center">3.0</td>
</tr>
<tr>
<td align="center">mean</td>
<td align="center">11.0</td>
</tr>
<tr>
<td align="center">std</td>
<td align="center">1.0</td>
</tr>
<tr>
<td align="center">min</td>
<td align="center">10.0</td>
</tr>
<tr>
<td align="center">25%</td>
<td align="center">10.5</td>
</tr>
<tr>
<td align="center">50%</td>
<td align="center">11.0</td>
</tr>
<tr>
<td align="center">75%</td>
<td align="center">11.5</td>
</tr>
<tr>
<td align="center">max</td>
<td align="center">12.0</td>
</tr>
</tbody></table>
<p>展示第一行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>展示最后一行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.tail(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>展示第二行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-获取数据"><a href="#6-获取数据" class="headerlink" title="6.获取数据"></a>6.获取数据</h3><p>选择单列，产生<code>Series</code>,与<code>df.X</code>等效。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;friut&#x27;</span>]</span><br><span class="line">df.friut</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>0     apple
1    banana
2    cherry
Name: fruit, dtype: object
</code></pre>
<p>用[]切片,获取从第一行开始，到第二行前结束的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">fruit</th>
<th align="center">count</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td align="center">banana</td>
<td align="center">11</td>
</tr>
</tbody></table>
<p>用标签提取第一行(标签默认为index 从0开始计数)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>用标签选取多列数据,[,]中间有两个位置，前面的是用于选取行，后面的是用于选取列。下面代码标识选取所有行以及<code>fruit</code>和<code>count</code>两列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[:,[<span class="string">&#x27;fruit&#x27;</span>,<span class="string">&#x27;count&#x27;</span>]]</span><br></pre></td></tr></table></figure>
<p>同理<code>iloc</code>也是用于获取数据，不同于loc，iloc是根据index获取在位置上的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[:,[<span class="number">0</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">fruit</th>
<th align="center">count</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">apple</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">banana</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">cherry</td>
<td align="center">12</td>
</tr>
</tbody></table>
<h3 id="索引-x2F-选择"><a href="#索引-x2F-选择" class="headerlink" title="索引&#x2F;选择"></a>索引&#x2F;选择</h3><p>索引基础用法入如下：</p>
<table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">句法</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">选择列</td>
<td align="left">df[col]</td>
<td align="left">Series</td>
</tr>
<tr>
<td align="left">用标签选择行</td>
<td align="left">df.loc[label]</td>
<td align="left">Series</td>
</tr>
<tr>
<td align="left">用整数位置选择行</td>
<td align="left">df.iloc[loc]</td>
<td align="left">Series</td>
</tr>
<tr>
<td align="left">行切片</td>
<td align="left">df[5:10]</td>
<td align="left">DataFrame</td>
</tr>
<tr>
<td align="left">用布尔向量选择行</td>
<td align="left">df[bool_vec]</td>
<td align="left">DataFrame</td>
</tr>
</tbody></table>
<h3 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h3><p>数据样例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>] * <span class="number">3</span>,</span><br><span class="line">                   <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>] * <span class="number">4</span>,</span><br><span class="line">                   <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>] * <span class="number">2</span>,</span><br><span class="line">                   <span class="string">&#x27;D&#x27;</span>: np.random.randn(<span class="number">12</span>),</span><br><span class="line">                   <span class="string">&#x27;E&#x27;</span>: np.random.randn(<span class="number">12</span>)&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">A</th>
<th align="center">B</th>
<th align="center">C</th>
<th align="center">D</th>
<th align="center">E</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">one</td>
<td align="center">A</td>
<td align="center">foo</td>
<td align="center">1.031008</td>
<td align="center">0.985879</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">one</td>
<td align="center">B</td>
<td align="center">foo</td>
<td align="center">-0.936926</td>
<td align="center">0.043031</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">two</td>
<td align="center">C</td>
<td align="center">foo</td>
<td align="center">-0.911246</td>
<td align="center">2.123596</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">three</td>
<td align="center">A</td>
<td align="center">bar</td>
<td align="center">-1.684552</td>
<td align="center">-0.235331</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">one</td>
<td align="center">B</td>
<td align="center">bar</td>
<td align="center">-0.705498</td>
<td align="center">1.147134</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">one</td>
<td align="center">C</td>
<td align="center">bar</td>
<td align="center">-0.524472</td>
<td align="center">-0.314987</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">two</td>
<td align="center">A</td>
<td align="center">foo</td>
<td align="center">0.272877</td>
<td align="center">-0.108869</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">three</td>
<td align="center">B</td>
<td align="center">foo</td>
<td align="center">-1.080479</td>
<td align="center">0.287439</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">one</td>
<td align="center">C</td>
<td align="center">foo</td>
<td align="center">-0.609487</td>
<td align="center">-0.139660</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">one</td>
<td align="center">A</td>
<td align="center">bar</td>
<td align="center">-0.806408</td>
<td align="center">-0.607651</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">two</td>
<td align="center">B</td>
<td align="center">bar</td>
<td align="center">-0.008508</td>
<td align="center">0.393806</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">three</td>
<td align="center">C	bar</td>
<td align="center">-0.145209</td>
<td align="center">1.897569</td>
<td align="center"></td>
</tr>
</tbody></table>
<p><code>pivot_table</code>是透视表函数，其中<code>value</code>是透视的数值列，index是透视的行，columns是透视的列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.pivot_table(values=<span class="string">&#x27;E&#x27;</span>,index=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>],columns=[<span class="string">&#x27;C&#x27;</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">C</th>
<th align="center">bar</th>
<th align="center">foo</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">B</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">one</td>
<td align="center">A</td>
<td align="center">-0.607651</td>
<td align="center">0.985879</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">B</td>
<td align="center">1.147134</td>
<td align="center">0.043031</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">C</td>
<td align="center">-0.314987</td>
<td align="center">-0.139660</td>
</tr>
<tr>
<td align="center">three</td>
<td align="center">A</td>
<td align="center">-0.235331</td>
<td align="center">NaN</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">B</td>
<td align="center">NaN</td>
<td align="center">0.287439</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">C</td>
<td align="center">1.897569</td>
<td align="center">NaN</td>
</tr>
<tr>
<td align="center">two</td>
<td align="center">A</td>
<td align="center">NaN</td>
<td align="center">-0.108869</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">B</td>
<td align="center">0.393806</td>
<td align="center">NaN</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">C</td>
<td align="center">NaN</td>
<td align="center">2.123596</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是客户体验? 为什么如此重要？</title>
    <url>/2023/02/12/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%A2%E6%88%B7%E4%BD%93%E9%AA%8C%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9E%81%E5%85%B6%E9%87%8D%E8%A6%81%EF%BC%9F/</url>
    <content><![CDATA[<p>如果你身在职场，那你应该或多或少都听说过“客户体验”，但客户体验究竟是什么呢？还有客户体验为什么如此重要呢？下面我们一起来看看吧</p>
<h3 id="什么是客户体验？"><a href="#什么是客户体验？" class="headerlink" title="什么是客户体验？"></a>什么是客户体验？</h3><p>客户体验是指客户与公司的所有互动和接触的整体体验。从客户体验之旅的开始，客户体验包括了客户从初次认识到考虑、购买、使用以及售后参与等所有环节。客户体验是基于客户所有的互动与触点，对公司及其产品的所有感受、看法和评价的总和。因此，客户体验是对公司和产品的全面评价。</p>
<h3 id="提升客户体验的目的是什么？"><a href="#提升客户体验的目的是什么？" class="headerlink" title="提升客户体验的目的是什么？"></a>提升客户体验的目的是什么？</h3><p>客户体验是专注于为客户创造情感上令人满意、难忘和有价值的体验。我们的目标不仅是满足客户的功能需求，还要超越他们的期望并留下持久的印象。积极的客户体验可以提高客户满意度、忠诚度和拥护度，最终可以推动业务增长和成功。</p>
<h3 id="客户体验会给企业带来什么影响呢？"><a href="#客户体验会给企业带来什么影响呢？" class="headerlink" title="客户体验会给企业带来什么影响呢？"></a>客户体验会给企业带来什么影响呢？</h3><p>良好的客户体验是客户对他们收到的产品或服务感到有价值、尊重和满意的体验。这是让客户觉得他们很重要，他们在体验企业带来的产品和服务时感到开心与满足。而满意的客户更有可能留下来并继续与公司开展业务（产生复购行为）。他们也更有可能将公司推荐给他们的朋友和家人，这有助于推动新的业务。另一方面，负面的客户体验会导致客户流失，客户会将转移到别处，体验竞品公司的服务与产品。</p>
<h3 id="那么影响客户体验的有哪些因素呢？"><a href="#那么影响客户体验的有哪些因素呢？" class="headerlink" title="那么影响客户体验的有哪些因素呢？"></a>那么影响客户体验的有哪些因素呢？</h3><p>客户体验会受到许多因素的影响，包括公司的产品和服务、沟通和消息传递、营销和广告、客户服务和支持、物理环境（对于实体企业）以及整体品牌声誉。为了提供卓越的客户体验，公司必须专注于了解他们的客户、他们的需求和愿望，以及推动他们做出决策的情绪。</p>
<h3 id="为什么客户体验如此重要？"><a href="#为什么客户体验如此重要？" class="headerlink" title="为什么客户体验如此重要？"></a>为什么客户体验如此重要？</h3><p>在当今的商业环境，产品同质化严重的时代，客户对于体验方面尤其得看重。客户有很高的期望并需要无缝、个性化和愉快的体验。对于可以投资于提供积极客户体验的公司不仅可以吸引和留住客户，还可以从竞争对手中脱颖而出，并最终推动长期业务成功。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总之，客户体验是现代商业的一个重要方面，涵盖了客户与公司互动的所有方面。公司必须专注于理解和满足客户的需求，以提供积极而难忘的体验，从而推动业务增长和成功。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>客户体验</tag>
      </tags>
  </entry>
  <entry>
    <title>博客的诞生</title>
    <url>/2020/03/22/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/</url>
    <content><![CDATA[<h2 id="hexo博客-使用介绍"><a href="#hexo博客-使用介绍" class="headerlink" title="hexo博客 使用介绍"></a>hexo博客 使用介绍</h2><span id="more"></span>
<h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署到终端"><a href="#部署到终端" class="headerlink" title="部署到终端"></a>部署到终端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据5V特征</title>
    <url>/2022/10/10/%E5%A4%A7%E6%95%B0%E6%8D%AE5V%E7%89%B9%E5%BE%81/</url>
    <content><![CDATA[<h3 id="大数据介绍"><a href="#大数据介绍" class="headerlink" title="大数据介绍"></a>大数据介绍</h3><p>大数据具有5个特征：其中包括Volume(大量)，Velocity（高速）,Variety（多样）,Value(低价值密度),Vercity(真实性)。</p>
<h6 id="Volume（大量）"><a href="#Volume（大量）" class="headerlink" title="Volume（大量）"></a>Volume（大量）</h6><p>大量指的是庞大的数据量，会对采集，存储，管理，分析造成很大的压力，甚至是超出了传统数据库软件工具能力范围的海量数据集合。这并非指的是TB级别的数据，其计量单位至少是P（千T），E（百万T）或Z（十亿T）。比方说天猫双11中所产生的数据量级。</p>
<h6 id="Velocity（高速）"><a href="#Velocity（高速）" class="headerlink" title="Velocity（高速）"></a>Velocity（高速）</h6><p>高速指的是数据的更新迭代、数据增长的速度极快，每天每分钟甚至每秒都有新的数据进来或进行数据的更新。这要求实时分析与数据处理及丢弃，而非事后批处理。这也是区别于传统数据挖掘的地方。</p>
<h6 id="Variety（多样）"><a href="#Variety（多样）" class="headerlink" title="Variety（多样）"></a>Variety（多样）</h6><p>数据的多样性，比方说在整个庞大的数据集里面存在格式各样的数据，如图片的、文本的、音频的、结构化与非结构化的数据等等。这无疑让数据分析师在做数据准备的过程中增添了许多难度。</p>
<h6 id="Value（低密度价值）"><a href="#Value（低密度价值）" class="headerlink" title="Value（低密度价值）"></a>Value（低密度价值）</h6><p>当这个数据是一条的时候数据本身是不能产生什么价值的，而是要结合海量数据去进行挖掘才能得出这部分数据的意义和价值所在。</p>
<h6 id="veracity（真实性）"><a href="#veracity（真实性）" class="headerlink" title="veracity（真实性）"></a>veracity（真实性）</h6><p>数据的真实性是一个需要考究的话题，我们需要做到确保数据是真实的并不是伪造的，这也是数据分析的基础。用不真实的数据去建模自然会输出不真实的结果。</p>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建自己的博客（三）：hexo主题更换</title>
    <url>/2022/07/07/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9Ahexo%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="1-主题选择"><a href="#1-主题选择" class="headerlink" title="1.主题选择"></a>1.主题选择</h3><p>hexo其实有许多好用的主题，其实原版的也不错都可以用。但每个人都会也有自己的个人喜好嘛~<br>hexo官方网页上也是有很多主题的，进入<code>https://hexo.io/themes/</code>页面可以选择自己所喜欢的。<br>这里推荐一款我目前自己在用的主题<code>yilia</code>,这个主题用的人会比较多而且也出得比较久了，所以出了问题的话也会比较好维护。</p>
<h3 id="2-主题安装"><a href="#2-主题安装" class="headerlink" title="2.主题安装"></a>2.主题安装</h3><p>打开<code>terminal</code>进入在本地<code>**/blog/themes</code>路径下输入以下命令：</p>
<pre><code>$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia
</code></pre>
<p>克隆完成后修改hexo根目录下的<code>_config.yml</code>：<code>theme：yilia</code></p>
<h3 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3.主题配置"></a>3.主题配置</h3><p>主题配置在主目录下的<code>_config.yml</code>,请根据自己需要修改使用。下面是本人的配置可以参考使用哈</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Header</span></span><br><span class="line"><span class="comment"># 菜单下面的都是分页，可以按需添加</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">编程笔记:</span> <span class="string">/categories/编程</span> </span><br><span class="line">  <span class="string">数据分析:</span> <span class="string">/categories/数据分析</span></span><br><span class="line">  <span class="string">文章归档:</span> <span class="string">/archives/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">pages:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">posts:</span></span><br><span class="line">      <span class="attr">title:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">path:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">text:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">raw:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">content:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">slug:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">updated:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">link:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">excerpt:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SubNav</span></span><br><span class="line"><span class="attr">subnav:</span></span><br><span class="line">  <span class="attr">github:</span> <span class="string">&quot;https://github.com/ganzhancheng2020&quot;</span></span><br><span class="line">  <span class="comment">#weibo: &quot;#&quot;</span></span><br><span class="line">  <span class="comment">#rss: &quot;#&quot;</span></span><br><span class="line">  <span class="comment">#zhihu: &quot;#&quot;</span></span><br><span class="line">  <span class="comment">#qq: &quot;#&quot;</span></span><br><span class="line">  <span class="attr">weixin:</span> <span class="string">&quot;/assets/img/weixin.png&quot;</span></span><br><span class="line">  <span class="comment">#jianshu: &quot;#&quot;</span></span><br><span class="line">  <span class="comment">#douban: &quot;#&quot;</span></span><br><span class="line">  <span class="comment">#segmentfault: &quot;#&quot;</span></span><br><span class="line">  <span class="attr">bilibili:</span> <span class="string">&quot;https://space.bilibili.com/7522004&quot;</span></span><br><span class="line">  <span class="comment">#acfun: &quot;#&quot;</span></span><br><span class="line">  <span class="attr">mail:</span> <span class="string">&quot;mailto:2513663405@qq.com&quot;</span></span><br><span class="line">  <span class="comment">#facebook: &quot;#&quot;</span></span><br><span class="line">  <span class="comment">#google: &quot;#&quot;</span></span><br><span class="line">  <span class="comment">#twitter: &quot;#&quot;</span></span><br><span class="line">  <span class="attr">linkedin:</span> <span class="string">&quot;https://www.linkedin.com/in/jack-gan-29653b186/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否需要修改 root 路径</span></span><br><span class="line"><span class="comment"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span></span><br><span class="line"><span class="comment"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Content</span></span><br><span class="line"><span class="comment"># 觉得文章太长想截断，代码&lt;!--more--&gt;需要在文章中使用</span></span><br><span class="line"><span class="comment"># 文章太长，截断按钮文字</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">more</span></span><br><span class="line"><span class="comment"># 文章卡片右下角常驻链接，不需要请设置为false</span></span><br><span class="line"><span class="attr">show_all_link:</span> <span class="string">&#x27;展开全文&#x27;</span></span><br><span class="line"><span class="comment"># 数学公式</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 是否在新窗口打开链接</span></span><br><span class="line"><span class="attr">open_in_new:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打赏</span></span><br><span class="line"><span class="comment"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span></span><br><span class="line"><span class="attr">reward_type:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 打赏wording</span></span><br><span class="line"><span class="attr">reward_wording:</span> <span class="string">&#x27;谢谢你请我喝咖啡&#x27;</span></span><br><span class="line"><span class="comment"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> </span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line"><span class="attr">weixin:</span> <span class="string">/assets/img/reward.png</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录</span></span><br><span class="line"><span class="comment"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span></span><br><span class="line"><span class="attr">toc:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</span></span><br><span class="line"><span class="attr">toc_hide_index:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 目录为空时的提示</span></span><br><span class="line"><span class="attr">toc_empty_wording:</span> <span class="string">&#x27;目录，不存在的…&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否有快速回到顶部的按钮</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Miscellaneous</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/assets/img/icon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你的头像url</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/assets/img/icon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启分享</span></span><br><span class="line"><span class="attr">share_jia:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment</span></span><br><span class="line"><span class="comment">#不需要使用某项，直接设置值为false，或注释掉</span></span><br><span class="line"><span class="comment">#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、多说</span></span><br><span class="line"><span class="attr">duoshuo:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、网易云跟帖</span></span><br><span class="line"><span class="attr">wangyiyun:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、畅言</span></span><br><span class="line"><span class="attr">changyan_appid:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">changyan_conf:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的</span></span><br><span class="line"><span class="attr">disqus:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5、Gitment</span></span><br><span class="line"><span class="attr">gitment_owner:</span> <span class="literal">false</span>      <span class="comment">#你的 GitHub ID</span></span><br><span class="line"><span class="attr">gitment_repo:</span> <span class="string">&#x27;&#x27;</span>          <span class="comment">#存储评论的 repo</span></span><br><span class="line"><span class="attr">gitment_oauth:</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">&#x27;&#x27;</span>           <span class="comment">#client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">&#x27;&#x27;</span>       <span class="comment">#client secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</span></span><br><span class="line"><span class="attr">style:</span></span><br><span class="line">  <span class="comment"># 头像上面的背景颜色</span></span><br><span class="line">  <span class="attr">header:</span> <span class="string">&#x27;#434343&#x27;</span></span><br><span class="line">  <span class="comment"># 右滑板块背景</span></span><br><span class="line">  <span class="attr">slider:</span> <span class="string">&#x27;linear-gradient(200deg,#a0cfe4,#e8c37e)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slider的设置</span></span><br><span class="line"><span class="attr">slider:</span></span><br><span class="line">  <span class="comment"># 是否默认展开tags板块</span></span><br><span class="line">  <span class="attr">showTags:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 智能菜单</span></span><br><span class="line"><span class="comment"># 如不需要，将该对应项置为false</span></span><br><span class="line"><span class="comment"># 比如</span></span><br><span class="line"><span class="comment">#smart_menu:</span></span><br><span class="line"><span class="comment">#  friends: false</span></span><br><span class="line"><span class="attr">smart_menu:</span></span><br><span class="line">  <span class="attr">innerArchive:</span> <span class="string">&#x27;所有文章&#x27;</span></span><br><span class="line">  <span class="attr">friends:</span> <span class="string">&#x27;友情链接&#x27;</span></span><br><span class="line">  <span class="attr">aboutme:</span> <span class="string">&#x27;关于我&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">friends:</span></span><br><span class="line">  <span class="attr">github:</span> <span class="string">‘https://github.com/ganzhancheng2020’</span></span><br><span class="line"></span><br><span class="line"><span class="attr">aboutme:</span> <span class="string">&#x27;一名野生的数据分析师&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-图片位置"><a href="#4-图片位置" class="headerlink" title="4.图片位置"></a>4.图片位置</h3><p>这里要注意一下打赏中有三个图片是需要放在<code>/assets/img/</code>,这个文件夹是在hexo根目录下的，并不是在theme文件夹下。<br>其中两张是打赏的图片，一张是头像的图片。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打赏</span></span><br><span class="line"><span class="comment"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span></span><br><span class="line"><span class="attr">reward_type:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 打赏wording</span></span><br><span class="line"><span class="attr">reward_wording:</span> <span class="string">&#x27;谢谢你请我喝咖啡&#x27;</span></span><br><span class="line"><span class="comment"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> </span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line"><span class="attr">weixin:</span> <span class="string">/assets/img/reward.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你的头像url</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/assets/img/icon.png</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>如何创建自己的博客</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建自己的博客（二）：hexo博客部署到github</title>
    <url>/2022/07/06/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Ahexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BFgithub%EF%BC%88%E7%BA%BF%E4%B8%8A%E9%83%A8%E7%BD%B2%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-创建github帐号"><a href="#1-创建github帐号" class="headerlink" title="1. 创建github帐号"></a>1. 创建github帐号</h3><p>打开浏览器输入<code>github.com</code>进入github页面，点击右上角的<code>sign up</code>,根据指引依次填写邮箱、密码、用户名就可以了。<br>填好之后github会向你邮箱发送一封验证邮件，通过邮箱验证后就完成注册了。</p>
<h3 id="2-创建github仓库"><a href="#2-创建github仓库" class="headerlink" title="2. 创建github仓库"></a>2. 创建github仓库</h3><p>i. 登录自己的github帐号，点击<code>Repositories</code>。<br>ii. 点击<code>new</code>，在<code>Repositories name</code>中输入自己的<code>github的用户名+github.io</code>(示例：ganzhancheng2020.github.io)点击确认后并保存。<br>PS：这里<code>Repossitories name</code>一定用自己的<code>github用户名+github.io</code>，不然待会是不能进行部署的。</p>
<h3 id="3-修改-config配置文件"><a href="#3-修改-config配置文件" class="headerlink" title="3. 修改_config配置文件"></a>3. 修改_config配置文件</h3><p>返回本地blog文件夹，在里面对<code>_config</code>文件修改配置。<br>在文件最后的<code>Deployment</code>模块修改，设置如下：<br>type写<code>git</code>就可以了，repo是刚输入的<code>Repositories name</code>,branch默认为<code>master</code>。</p>
<pre><code># Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy:
  type: git
  repo: https://github.com/ganzhancheng2020/ganzhancheng2020.github.io.git
  branch: master
</code></pre>
<h3 id="4-安装hexo开发者插件"><a href="#4-安装hexo开发者插件" class="headerlink" title="4. 安装hexo开发者插件"></a>4. 安装hexo开发者插件</h3><p>这个插件要预先安装不然再进行下一步部署的时候会报错。<br>在<code>terminal</code>输入以下命令：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<h3 id="5-将hexo部署到github上去"><a href="#5-将hexo部署到github上去" class="headerlink" title="5. 将hexo部署到github上去"></a>5. 将hexo部署到github上去</h3><p>插件安装完成后，输入hexo d将把本地文件部署到上github上。</p>
<pre><code>hexo d
</code></pre>
<h3 id="6-登录页面进行测试"><a href="#6-登录页面进行测试" class="headerlink" title="6. 登录页面进行测试"></a>6. 登录页面进行测试</h3><p>完成之后可以在浏览器输入自己的<code>github的用户名+github.io</code>(示例：ganzhancheng2020.github.io)看一下效果。<br>在这过程需要几分钟，若显示404可稍后进行尝试。<br>如果你页面上看到<code>hexo</code>在那就代表hexo博客成功部署到github上了。</p>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>如何创建自己的博客</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建自己的博客（五）：hexo文章中插入图片</title>
    <url>/2022/07/10/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Ahexo%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="1-资源文件夹配置"><a href="#1-资源文件夹配置" class="headerlink" title="1. 资源文件夹配置"></a>1. 资源文件夹配置</h3><p>首先要修改hexo目录根上的<code>_config.yml</code>文件，在里面找到<code>post_asset_folder</code>并设置为：<code>true</code></p>
<h3 id="2-文章内引用"><a href="#2-文章内引用" class="headerlink" title="2. 文章内引用"></a>2. 文章内引用</h3><p>这时新建文章时会在<code>_post</code>文件夹当中出现一个与文章名同名的资源文件夹，我们只需把图片放到这个资源文件夹当中。<br>然后根据以下命令进行引用，引用的参数为资源文件夹中的图片名称如<code>example.jpg</code>。</p>
<pre><code>&#123;% asset_img example.jpg %&#125;
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>如何创建自己的博客</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建自己的博客（四）：hexo常用命令</title>
    <url>/2022/07/10/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Ahexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="1-新建新文章"><a href="#1-新建新文章" class="headerlink" title="1. 新建新文章"></a>1. 新建新文章</h3><p>新建一篇文章。如果没有设置 layout 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<pre><code>$ hexo new [layout] &lt;title&gt;
$ hexo new &quot;post title with white space&quot;
</code></pre>
<h3 id="2-创建草稿"><a href="#2-创建草稿" class="headerlink" title="2. 创建草稿"></a>2. 创建草稿</h3><p>有时候我们会同时编辑多篇文章，在某些文章未完成不想发表时可以使用创建草稿的功能。当我们把文章部署到现网时只会部署正式文章，草稿是不会在博客中显示的。</p>
<pre><code>$ hexo new draft &lt;filename&gt;
</code></pre>
<p>当我们要将草稿转为正式文章时</p>
<pre><code>$ hexo publish [layout] &lt;filename&gt;
</code></pre>
<h3 id="3-生产静态文件"><a href="#3-生产静态文件" class="headerlink" title="3. 生产静态文件"></a>3. 生产静态文件</h3><pre><code>$ hexo generate
</code></pre>
<p>命令也可以简写为</p>
<pre><code>$ hexo g
</code></pre>
<h3 id="4-启动服务器"><a href="#4-启动服务器" class="headerlink" title="4. 启动服务器"></a>4. 启动服务器</h3><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。这个一般用于本地测试，若没什么问题了可以进行下一步部署网站。</p>
<pre><code>$  hexo server
</code></pre>
<p>命令也可以简写为</p>
<pre><code>$ hexo s
</code></pre>
<h3 id="5-部署网站"><a href="#5-部署网站" class="headerlink" title="5. 部署网站"></a>5. 部署网站</h3><pre><code>$ hexo deploy
</code></pre>
<p>命令也可以简写为</p>
<pre><code>$ hexo d
</code></pre>
<h3 id="6-清除缓存"><a href="#6-清除缓存" class="headerlink" title="6. 清除缓存"></a>6. 清除缓存</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<pre><code>$ hexo clean
</code></pre>
<p>命令也可以简写为</p>
<pre><code>$ hexo cl
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>如何创建自己的博客</tag>
      </tags>
  </entry>
  <entry>
    <title>如何撰写读书笔记</title>
    <url>/2022/09/04/%E5%A6%82%E4%BD%95%E6%92%B0%E5%86%99%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="为什么需要做笔记？"><a href="#为什么需要做笔记？" class="headerlink" title="为什么需要做笔记？"></a>为什么需要做笔记？</h3><p>知识的积累是内容提取、梳理、并将知识架构重组的循环过程。好的笔记可以帮助我们更有效率得完成知识转化的过程。</p>
<img src="/2022/09/04/%E5%A6%82%E4%BD%95%E6%92%B0%E5%86%99%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%9F%A5%E8%AF%86%E8%8E%B7%E5%8F%96%E8%BF%87%E7%A8%8B.png" class="">

<h3 id="怎么去做好的笔记？"><a href="#怎么去做好的笔记？" class="headerlink" title="怎么去做好的笔记？"></a>怎么去做好的笔记？</h3><p>好的笔记是会加速知识转化的过程，那么怎么去写出好的笔记呢？这个可能会因人而异，但我稍微说一下我个人做笔记的方法。</p>
<h6 id="1-图文并茂"><a href="#1-图文并茂" class="headerlink" title="1. 图文并茂"></a>1. 图文并茂</h6><p>这个不是最重要的一点，但我认为是不可少的。从记忆的角度去看，人类对于图片的记忆要远大于文字。在笔记中适当得插入一些图片、图绘是能有效得帮助记忆的。</p>
<h6 id="2-有序"><a href="#2-有序" class="headerlink" title="2. 有序"></a>2. 有序</h6><p>比起无序的事情人类更容易记住有序的事，知识也是一样的。在学习的过程中，把知识点融入到自身的知识框架当中就是一个无序转换为有序的过程。在这过程中可以使用思维导图，框架图，列表，思维模型等方法去梳理知识脉络，把知识点串联起来。</p>
<h6 id="3-拓展"><a href="#3-拓展" class="headerlink" title="3. 拓展"></a>3. 拓展</h6><p>我们在学习新的知识点的时候知识内容是碎片化的，也有可能是因为时间维度上的碎片化学习而导致内容是碎片化的。一个新的知识点在同一本书中也很可能是并不完全的。这时候需要对知识进行补充，与自身的知识架构所匹配，或者在别的书中补充对当前知识点做适当得拓展，把知识点补充完整。</p>
<h6 id="4-思考"><a href="#4-思考" class="headerlink" title="4. 思考"></a>4. 思考</h6><p>光掌握一个知识点或者说仅仅知道这个知识点的本身是远远不够的，我们需要将已有的知识点链接起来，放到我们整个的知识框架当中去，就像是在寻找知识地图中那块拼图所缺失的位置，这时候可以根据自身的场景写出自己的一些心得与思考，以及多个知识点的组合理论，在整理&#x2F;梳理的时候正是对这个知识思考的过程。</p>
<h6 id="5-行动"><a href="#5-行动" class="headerlink" title="5. 行动"></a>5. 行动</h6><p>知识点需要与行动相结合，做到知行合一。通过新学习到的知识点可以梳理出一些可以行动的事情或者自身能运用到的场景，立刻去执行，最好是能放到自身的日常系统当中去，周而复始的思考与行动会让知识记得更加牢固。</p>
]]></content>
      <categories>
        <category>思维模型</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>如果创建自己的博客（一）：hexo博客本地部署</title>
    <url>/2022/07/05/%E5%A6%82%E6%9E%9C%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Ahexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h3><p>安装地址：在浏览器输入<code>nodejs.org</code>，点击下载当前版本<code>10.15.1.LTS</code>（以LTS结尾长期支持版的）。<br>下载后将安装包打开然后一直点击安装就可以了，按对应的操作系统安装对应的版本即可。<br>node.js会安装两个包，1是<code>npm</code>，2是<code>node</code></p>
<h3 id="2-检测hexo是否安装成功"><a href="#2-检测hexo是否安装成功" class="headerlink" title="2. 检测hexo是否安装成功"></a>2. 检测hexo是否安装成功</h3><p>打开我们的<code>terminal</code>输入以下代码，如果成功显示版本号那就是为成功的。</p>
<pre><code>#sh-3.2# npm -v
6.10.2
#sh-3.2# node -v
v12.8.0 
</code></pre>
<h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h3><p>用<code>npm</code>可以直接安装<code>hexo</code>框架</p>
<pre><code>npm install hexo-cli -g
</code></pre>
<p>如果安装失败看下是不是node版本不适应的原因。<br>请到<code>nodejs.org</code>安装相应的版本（hexo 4.2.0对应的版本为node12.XX.XX）。</p>
<h3 id="4-验证hexo是否安装成功"><a href="#4-验证hexo是否安装成功" class="headerlink" title="4. 验证hexo是否安装成功"></a>4. 验证hexo是否安装成功</h3><p>注意看当前版本配置为hexo4.2.0 node版本为12.8.0, 如果出错请下载与之对应的版本。</p>
<pre><code>hexo -v
</code></pre>
<h3 id="5-新建一个目录"><a href="#5-新建一个目录" class="headerlink" title="5. 新建一个目录"></a>5. 新建一个目录</h3><p>hexo安装成功后可以新建一个目录，那是你存放博客文件的地方 如：</p>
<pre><code>mkdir 个人博客2022
</code></pre>
<h3 id="6-hexo初始化博客"><a href="#6-hexo初始化博客" class="headerlink" title="6. hexo初始化博客"></a>6. hexo初始化博客</h3><p>然后可以进入我们的目录开始初始化博客了。</p>
<pre><code>cd 个人博客2022
hexo init blog
</code></pre>
<h3 id="7-启动hexo博客"><a href="#7-启动hexo博客" class="headerlink" title="7. 启动hexo博客"></a>7. 启动hexo博客</h3><p>好的，我们试一下博客是否可以正常启动。</p>
<pre><code>cd blog
hexo s
</code></pre>
<h3 id="8-验证hexo博客是否正常运行"><a href="#8-验证hexo博客是否正常运行" class="headerlink" title="8. 验证hexo博客是否正常运行"></a>8. 验证hexo博客是否正常运行</h3><p>最后打开浏览器输入<code>http://localhost:4000/</code>进行验证就可以了。</p>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>如何创建自己的博客</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Anaconda</title>
    <url>/2022/10/02/%E5%AE%89%E8%A3%85Anaconda/</url>
    <content><![CDATA[<h3 id="安装介绍"><a href="#安装介绍" class="headerlink" title="安装介绍"></a>安装介绍</h3><p>之前一直因为安装Anaconda踩了不少坑，所以写个笔记记录一下。本人是用的MacOS系统，下面的安装步骤也是根据这系统写的，若是使用windows系统的朋友也可以参考一下。Anaconda是一个python的环境管理器，广泛适用于人工智能、数据分析、机器学习等领域、可以为用户提供一个很好的编程环境。</p>
<h3 id="Anaconda安装"><a href="#Anaconda安装" class="headerlink" title="Anaconda安装"></a>Anaconda安装</h3><p>官网安装地址：<a href="https://www.anaconda.com/products/distribution">https://www.anaconda.com/products/distribution</a><br>进入官网页面直接点绿色按钮的下载就可以，但直接下载的话一般会比较慢，这时候我们可以选择到清华源进行下载。<br>清华大学开源软件镜像站安装地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a><br>这里有几个版本，根据系统环境的不同下载对应的即可。打开<code>terminal</code>,输入以下命令行，如果以x86_64结尾的下载Anaconda3-2022.05-MacOSX-x86_64.pkg，<br>否则下载Anaconda3-2022.05-MacOSX-arm64.pkg，其余环境的请自行判断。</p>
<pre><code>(base) JackdeMacBook-Pro:~ jackgan$ uname -a
Darwin JackdeMacBook-Pro.local **.**.** Darwin Kernel Version 21.6.0: Mon Aug 22 20:17:10 PDT 2022; root:xnu-****.***.****/RELEASE_X86_64 x86_64
</code></pre>
<p>安装包下载后直接安装，一直点continue就成。如果不是第一次安装的话请先彻底卸载Anconda。</p>
<p>安装完成后可以打开<code>terminal</code>并输入以下命令行，确认是否安装成功：</p>
<pre><code>conda -V
conda 22.9.0
</code></pre>
<p>卸载过程：下载anaconda-clean安装包并运行，若在目录下还有Anaconda的文件夹，把文件夹也一并删除了。</p>
<pre><code>conda install anaconda-clean
anaconda-clean --yes
</code></pre>
<h3 id="安装Jupyter-notebook"><a href="#安装Jupyter-notebook" class="headerlink" title="安装Jupyter notebook"></a>安装Jupyter notebook</h3><p>输入以下命令行安装：</p>
<pre><code>conda install jupyter notebook
</code></pre>
<p>运行jupyter notebook：</p>
<pre><code>jupyter notebook
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>揭秘SWOT分析：让你在公司竞争中脱颖而出的秘密武器</title>
    <url>/2023/01/26/%E6%8F%AD%E7%A7%98SWOT%E5%88%86%E6%9E%90%EF%BC%9A%E8%AE%A9%E4%BD%A0%E5%9C%A8%E5%85%AC%E5%8F%B8%E7%AB%9E%E4%BA%89%E4%B8%AD%E8%84%B1%E9%A2%96%E8%80%8C%E5%87%BA%E7%9A%84%E7%A7%98%E5%AF%86%E6%AD%A6%E5%99%A8/</url>
    <content><![CDATA[<p>SWOT分析是企业成功的秘密武器，它能帮助企业在竞争中抢占先机。那么，到底什么是SWOT分析呢？它又是如何帮助企业取得成功的呢？本文将为您揭秘SWOT分析的秘密。</p>
<h3 id="什么是SWOT分析？"><a href="#什么是SWOT分析？" class="headerlink" title="什么是SWOT分析？"></a>什么是SWOT分析？</h3><p>首先，让我们了解一下SWOT分析的定义。SWOT分析是一种全面考察企业内外环境的工具，它将企业的内部因素和外部因素分为四个类别：<code>优势（Strengths）、劣势（Weaknesses）、机会（Opportunities）和威胁（Threats）。</code>通过对这四个类别的评估，企业可以更好地了解自身的优势和劣势，并寻找机会和应对威胁。</p>
<p><strong>优势(Strengths)</strong><br>是组织拥有的有利条件，如技术、资源、人员、品牌等，它们可以帮助组织获得竞争优势。例如，一家公司拥有高级的技术和研发能力，可以推出高性能的产品，进而在市场上获得优势。此外,一家公司拥有强大的品牌影响力，也可以成为其在市场中的优势。</p>
<p><strong>劣势(Weaknesses)</strong><br>是组织存在的不利条件，如资金短缺、管理缺陷、技术落后等，它们需要组织加以改进。例如，一家公司在资金方面短缺，可能会影响其研发和生产能力，降低其市场竞争力。另一方面，一家公司管理缺陷，可能会导致员工缺乏积极性和效率低下。</p>
<p><strong>机会(Opportunities)</strong><br>是组织可以利用的外部机会，如新市场、新技术、新产品等，它们可以帮助组织发展壮大。例如，随着社会发展和消费升级，健康产品和服务的需求将会增长，这对于一家生产健康食品的公司来说是一个机会。此外，随着科技的不断发展，新的产品和服务将会出现，这对于一家科技公司来说可能是一个机会。</p>
<p><strong>威胁(Threats)</strong><br>是组织面临的外部威胁，如竞争对手、环境变化、政策变化等，它们需要组织采取应对措施。例如，随着全球竞争的加剧，越来越多的竞争对手进入市场，这对于一家公司来说可能是一个威胁。此外,环境法规变化和政策变化也可能对公司造成威胁。</p>
<h3 id="SWOT分析该如何使用？"><a href="#SWOT分析该如何使用？" class="headerlink" title="SWOT分析该如何使用？"></a>SWOT分析该如何使用？</h3><p>在进行SWOT分析之前，首先需要确定分析的对象。对于企业来说，可以是整个公司或者是具体的产品或项目。对于个人而言，可以是自己或者是自己的团队。</p>
<p><strong>使用步骤:</strong><br>使用 SWOT 分析的方法主要分为以下三个步骤：</p>
<ol>
<li>确定公司或组织的目标：在开始进行SWOT分析之前，首先要确定公司或组织的目标，这样才能确定分析的范围。</li>
<li>构建SWOT分析: 制作一个SWOT分析表格，对洞察到的信息进行整理和分析，将其归纳为 S（优势）、W（劣势）、O（机会）、T（威胁）四个维度。确定内部优势和劣势: 分析公司或组织的内部资源、能力、结构等，确定其优势和劣势。确定外部机会和威胁：分析公司或组织所处的外部环境，如经济、政治、社会等，确定机会和威胁。</li>
<li>制定发展战略: 根据分析结果，结合公司的目标和资源，制定具有针对性的发展战略。一般战略会可以归为四种、<code>SO战略</code> (Strengths-Opportunities) 指的是利用公司的优势来抓住市场机会。<code>ST战略</code> (Strengths-Threats) 指的是利用公司的优势来应对市场威胁。<code>WT战略</code> (Weaknesses-Threats) 指的是通过改善公司的劣势来应对市场威胁。<code>WO战略</code> (Weaknesses-Opportunities) 指的是通过改善公司的劣势来抓住市场机会。</li>
</ol>
<p><strong>注意事项:</strong></p>
<ul>
<li>SWOT分析要全面，不能忽略任何重要的因素。</li>
<li>SWOT分析要客观,不能由个人喜好或主观看法来影响分析。</li>
<li>SWOT分析要定期更新,随着外部环境的变化，策略也要随之改变。</li>
<li>SWOT分析是以目标为导向的，制定策略时要针对目标。</li>
</ul>
<h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>假设你是一家电子商务公司的市场营销专员，你需要对公司进行SWOT分析。通过SWOT分析，你可以了解公司的优势，劣势，机会和威胁，并为公司制定有针对性的发展战略。提升公司在市场上的竞争力。<br>下面将会制作一个SWOT分析表格进行评估：</p>
<table>
<thead>
<tr>
<th></th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody><tr>
<td>内部</td>
<td>- 公司拥有大量的客户数据，可以更好地针对客户的需求进行市场营销。<br>公司拥有高效的物流系统，可以提供快速的配送服务。</td>
<td>- 公司目前只在本地运营，缺乏全国性的市场覆盖。<br>公司没有自己的品牌，只靠第三方商品销售。</td>
</tr>
<tr>
<td>外部</td>
<td>- 电商行业正在快速发展，有机会扩大市场规模。<br>随着网络技术的发展，可以进行线上销售，扩大客户群。</td>
<td>- 竞争对手正在不断壮大，市场竞争日益激烈。<br>由于地理位置的限制，可能会面临物流成本和运输时间的限制。</td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 外部优势 &#x3D; 机会，外部劣势 &#x3D; 威胁</p>
<p>接下来结合内部、外部优势和劣势制定发展战略:</p>
<table>
<thead>
<tr>
<th></th>
<th>优势(S)</th>
<th>劣势(W)</th>
</tr>
</thead>
<tbody><tr>
<td>机会(O)</td>
<td>针对优势和机会制定SO战略：<br>- 利用公司的客户数据和高效物流系统来扩大市场规模，在全国范围内运营。<br>- 利用网络技术进行线上销售，扩大客户群和销售额。</td>
<td>针对劣势和机会制定WO战略：<br>- 通过提高产品的质量和服务水平来吸引新的商业客户。<br> - 通过提高网络安全性来吸引更多的电子商务领域的合作伙伴。</td>
</tr>
<tr>
<td>风险(T)</td>
<td>针对优势和风险制定ST战略：<br>- 利用公司的营销策略和品牌优势来应对竞争对手的压力。<br>- 利用公司的资源优势来提高产品的质量和服务水平。</td>
<td>针对劣势和风险制定WT战略：<br>- 通过提高物流服务水平来应对竞争对手的服务优势。<br> - 通过提高网络安全性和稳定性来应对网络攻击和数据泄露的威胁。</td>
</tr>
</tbody></table>
<p>这些策略都是针对目标来制定的，可以帮助公司在竞争激烈的市场中取得更好的成绩。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过对这四个类别的评估，企业可以清楚地了解自身的优势和劣势，并寻找机会和应对威胁。通过运用SWOT分析，企业可以更好地制定有针对性的发展战略，抢占先机，取得成功。如果您是一个企业经营者，那么不妨尝试运用SWOT分析来提升您的企业竞争力。让SWOT分析成为您的公司的秘密武器，让您的公司在竞争中脱颖而出！</p>
<hr>
<p>“本文的结束，也是您对思维模型深入了解的开始。如果您在阅读中有任何疑问，不妨在评论区留言和我一起探讨。如果您觉得这篇文章有用，那就给我一个赞和收藏吧！这是对我最大的支持与鼓励。同时也欢迎关注我的博客和社交媒体账号，我会定期发布更多类似的文章，让我们一起成长。谢谢您的阅读，期待与您的下次相遇！”</p>
]]></content>
      <categories>
        <category>思维模型</category>
      </categories>
      <tags>
        <tag>思维模型</tag>
      </tags>
  </entry>
  <entry>
    <title>数字化客服设计读后感（一）：中心思想</title>
    <url>/2022/07/26/%E6%95%B0%E5%AD%97%E5%8C%96%E5%AE%A2%E6%9C%8D%E8%AE%BE%E8%AE%A1%E8%AF%BB%E5%90%8E%E6%84%9F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%AD%E5%BF%83%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h3 id="1-中心思想"><a href="#1-中心思想" class="headerlink" title="1. 中心思想"></a>1. 中心思想</h3><p>对于一个企业而言，客服是解决产品设计与用户认知之间一切误差的团队。<br>当发生产品设计与企业产生偏差时，用户会通过服务渠道去联系企业，这时服务就产生了。而客服的主要任务会有3个：</p>
<ol>
<li>推动企业减少误差.</li>
<li>误差发生时减少误差.</li>
<li>在两者的基础上提升效率。</li>
</ol>
<p>而去衡量以上3个任务是否做得好，有3个重要的指标: </p>
<h5 id="1-服务率"><a href="#1-服务率" class="headerlink" title="1. 服务率"></a>1. 服务率</h5><p>服务率的计算公式是：服务次数除以他的产品交易总数。是作为衡量产品与用户认知差异的一个指标。当认识差异存在的时候用户才打电话向客服咨询。而一家企业可以通过服务率的指标去监控消费者对某款产品或某种交易的认知差异，从而推动企业改进。</p>
<h5 id="2-解决力"><a href="#2-解决力" class="headerlink" title="2. 解决力"></a>2. 解决力</h5><p>客服解决力分为四个阶段：敷衍、传话筒、解决、惊喜。敷衍就是在消费者看来没有解决问题，传话筒就如同器人只是帮助企业转述了标准话说，没有实际得站在用户角度帮助用户解决问题。解决就是帮助了用户解决了当前问题。而惊喜会在解决问题的同时还会给予用户额外的收获。如：告诉用户问题的答案后，提供了避免问题发生的方法或更好得解决问题的途径。</p>
<p>举例:<br>打电话到海底捞客服，问有新上了什么菜品？客服不但有耐心的解答了问题，还提供了新品查询渠道。本来需要进线询问菜单改为通过微信小程序APP查看菜单，成功得减少了服务率。</p>
<h6 id="3-费力度"><a href="#3-费力度" class="headerlink" title="3. 费力度"></a>3. 费力度</h6><p>用户在解决问题的时候所需要成本，在获取时的难以程度。如：沟通客服的沟通时间，沟通效率，在客服服务的过程中用户的问题是否能容易得到解答。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>数字化客服设计</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析岗位相关职责</title>
    <url>/2022/07/06/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B2%97%E4%BD%8D%E7%9B%B8%E5%85%B3%E8%81%8C%E8%B4%A3/</url>
    <content><![CDATA[<h3 id="数据分析师-x2F-数据挖掘工程师"><a href="#数据分析师-x2F-数据挖掘工程师" class="headerlink" title="数据分析师&#x2F;数据挖掘工程师"></a>数据分析师&#x2F;数据挖掘工程师</h3><ol>
<li>基于业务理解设计数据基础体系与兄弟团队紧密合作，确保数据收集完好，结构合理，质量良好。</li>
<li>通过数据收集、数据处理及等可视化方法，善用数据产品释放BI宝贵资源。</li>
<li>通过业务分析和数据解读，转化成商业洞察和策略建议。</li>
<li>沉淀分析报告，建立并不断完善分析体系。</li>
<li>具备一定的数据挖掘能力，挖掘业务隐藏模式，能够预测业务发展趋势，帮助决策及快速调整方向。</li>
</ol>
<h3 id="算法团队-x2F-算法工程师"><a href="#算法团队-x2F-算法工程师" class="headerlink" title="算法团队&#x2F;算法工程师"></a>算法团队&#x2F;算法工程师</h3><ol>
<li>精通统计模式，创新性应用前沿技术。落地实际业务场景，实现最大增值。</li>
<li>在数据收集与校验中，与兄弟团队紧密合作。</li>
<li>基于决策层的商业决定，提供及时资源保证。</li>
<li>发明专利，发表论文。</li>
</ol>
<h3 id="数据技术团队-x2F-大数据工程师"><a href="#数据技术团队-x2F-大数据工程师" class="headerlink" title="数据技术团队&#x2F;大数据工程师"></a>数据技术团队&#x2F;大数据工程师</h3><ol>
<li>数据仓库，数据质量管理。</li>
<li>从技术评估出发，深度参与数据架构设计。</li>
<li>通过Hadoop、流计算等工具、高效得加工各种类型的数据。</li>
</ol>
]]></content>
      <tags>
        <tag>数据分析</tag>
        <tag>岗位</tag>
        <tag>职业规划</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析流程</title>
    <url>/2022/10/03/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>本篇博客内容是对于数据分析流程以及其数据分析阶段做一个简要的说明，主要是为了对自身数据分析流程做一个复盘，并开始构建自身的数据分析体系。</p>
<h3 id="1-明确目标"><a href="#1-明确目标" class="headerlink" title="1. 明确目标"></a>1. 明确目标</h3><p>明确分析的目标，在数据分析所需要输出的内容是什么？是对于现有数据的描述解析，指标的计算，还是对于数据趋势的判断。只有在明确目标的前提下才可以围绕具体的数据进行展开。</p>
<h3 id="2-数据获取"><a href="#2-数据获取" class="headerlink" title="2. 数据获取"></a>2. 数据获取</h3><p>数据获取的方式大致分为3种：自有数据、公开数据、自行收集</p>
<p><strong>2.1 自有数据（公司&#x2F;个人自有数据）</strong><br>比方说博客上的PV&#x2F;UV数据，每篇博文的转载量，浏览量，对于博客的打赏、软件上的埋点&#x2F;打点数据等。这种自有的数据一般可以通过一些现成的接口&#x2F;数据文档直接获取。</p>
<p><strong>2.2 公开数据</strong><br>比方说某上市公司的历年财报，一些数据平台&#x2F;咨询平台对外公开的行业数据，官方机构所发布的大数据信息等。这些公开数据一般是可以自有直接下载的。</p>
<p><strong>2.3 自行收集</strong><br>比方说某购物网站上用户的评论数据，某招聘网上的招聘数据，互联网直播中的弹幕等。这些数据是通过自建爬虫，到互联网上爬取公开数据，这里要特别注重数据安全规范，以及遵守robots协议。</p>
<h3 id="3-数据预处理"><a href="#3-数据预处理" class="headerlink" title="3. 数据预处理"></a>3. 数据预处理</h3><p>数据预处理大致会分为四个步步骤（数据抽样、数据探索、数据清洗、特征工程），以下会对四个步骤逐一展开，并解释。</p>
<p><strong>3.1 数据抽样</strong><br>在做数据分析的过程中难免会遇到数据量过于庞大的情况，在考虑到模型的性能以及分析效率的情况下，通常会选择数据抽样的方式减少耗时，进行分析。用这部分数据样本所分析出来的结果去代表整体的情况。</p>
<p><strong>3.2 数据探索</strong><br>在做数据分析之前，我们必须于数据本身有一个全面的了解，勘察是否有脏数据存在的情况。这里包含勘察数据量，数据的属性（数据列表中每列所代表的含义），数据的分布情况，脏数据的检测等。这样可以极大程度上方便我们去理解数据的全貌以及去选择接下来的处理方式</p>
<p><strong>3.3 数据清洗</strong><br>对于一些不规整的数据（脏数据）给清洗干净，让整个数据变成对适合进行分析的数据。脏数据大致可分为四个部分：重复数据、数据缺失、数据异常、数据不一致等。在数据预处理的过程中这通常都会占用整个数据分析流程80%以上的时间。在我们尽可能提升数据质量的情况下才会输出一个好的结果，数据的质量往往决定了我们数据分析结果的上限。对于脏数据的清洗方法会另外开一篇博客，就不在这做过多的解释了。</p>
<p><strong>3.4 特征工程</strong><br>特征工程是做什么的，我想这句话充分得体现了特征工程的含义。</p>
<blockquote>
<p>“feature engineering is manually designing what the input x’s should be.”<br>“you have to turn your inputs into things the algorithm can understand.”</p>
</blockquote>
<p>大致含义是通过设计你的X输入变量，让你的算法可以理解它。比方说身高和体重，这是两个常用的属性，那如何判读一个人身材是否标准呢？光从单一身高或体重是无法判断的。这时我们会用到IBM这么一个指标（根据身高和体重衍生出来的），而这就需要去了解很多专业的知识。这也是最简单的特征工程的例子之一。</p>
<h3 id="4-数据分析"><a href="#4-数据分析" class="headerlink" title="4. 数据分析"></a>4. 数据分析</h3><p>当数据处理好了之后，就可以开始分析了，根据你的分析目标，要选择合适的分析方法。常见的分析方法包括：描述性分析、探索性分析、推断性分析。</p>
<p><strong>4.1 描述性分析</strong><br>描述性分析主要是对所收集的数据进行分析，得出反映客观现象的各种数量特征的一种分析方法，它包括数据的集中趋势分析、数据离散程度分析、数据的频数分布分析等，描述性分析是对数据进一步分析的基础。</p>
<p><strong>4.2 探索性分析</strong><br>探索性分析主要是通过一些分析方法从大量的数据中发现未知且有价值信息的过程，它不受研究假设和分析模型的限制，尽可能地寻找变量之间的关联性。常见的分析方法有聚类分析、因子分析、对应分析等方法。</p>
<p><strong>4.3 推断性分析</strong><br>推断性分析是研究如何根据样本数据来推断总体样本数量特征，它是在对样本数据进行描述统计分析的基础上，对研究总体的数量特征做出推断。常见的分析方法有假设检验、相关分析、回归分析、时间序列分析等方法。</p>
<h3 id="5-数据建模"><a href="#5-数据建模" class="headerlink" title="5. 数据建模"></a>5. 数据建模</h3><p>从已有的数据中发现客观规律，建立数据模型，对之后数据的输出结果做出预测。数据建模包含构建模型，模型评价以及模型应用三个部分，之后对于数据建模会另开一篇博客，在此不做过多解释。</p>
<h3 id="6-数据可视化"><a href="#6-数据可视化" class="headerlink" title="6. 数据可视化"></a>6. 数据可视化</h3><p>数据可视化是给已输出的分析过程、数据结论提供有力的支撑。通过数据可视化的方式，如趋势图、散点图、热力图等图表让读者更容易理解数据分析过程以及结论，为数据分析报告奠定基础。</p>
<h3 id="7-报告撰写"><a href="#7-报告撰写" class="headerlink" title="7. 报告撰写"></a>7. 报告撰写</h3><p>数据分析报告是对数据分析结果的一个呈现方式，让数据所产生的结论变得通俗易懂，让读者更容易理解。一份好的数据分析报告需要有明确的分析目标，清晰的框架以及报告逻辑，结论需要有可观的数据论证给予支撑。而报告的呈现方式可以根据客户的喜好去适配。最重要的是能清晰得表述分析结论。</p>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>流程</tag>
      </tags>
  </entry>
  <entry>
    <title>数据质量评估标准</title>
    <url>/2022/10/12/%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E8%AF%84%E4%BC%B0%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h3 id="数据质量评估的6个标准"><a href="#数据质量评估的6个标准" class="headerlink" title="数据质量评估的6个标准"></a>数据质量评估的6个标准</h3><p>数据质量（DQ）维度是数据管理从业者基于已有的一些标准用来评估和衡量数据质量的一些特征。国际数据管理协会（DAMA）对数据质量的衡量标准，分为一些六大维度。</p>
<ol>
<li>完整性 - 衡量所必须数据的完整程度。</li>
<li>及时性 - 针对用户对信息获取的时间及时性要求，确保数据及时更新。</li>
<li>唯一性 - 针对某个数据项或某组数据，没与重复的数据值。 </li>
<li>一致性 - 数据元素的类型和含义必须一致和清晰。</li>
<li>准确性 - 确保数据必须反应真实的业务内容。</li>
<li>有效性 - 对于数据的值、格式要求符合数据定义或业务定义的要求。</li>
</ol>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>清酒（一）：基本介绍</title>
    <url>/2022/07/09/%E6%B8%85%E9%85%92%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="1-日本清酒介绍"><a href="#1-日本清酒介绍" class="headerlink" title="1.日本清酒介绍"></a>1.日本清酒介绍</h3><p>日本清酒属于日本的国酒，类似于中国白酒在中国的地位。日本清酒虽然借鉴了中国黄酒的酿造法，但却有别于中国的黄酒。该酒色泽呈淡黄色或无色，清亮透明，芳香宜人，口味纯正，绵柔爽口，其酸、甜、苦、涩、辣诸味谐调，<code>酒精含量在15%</code>以上，含多种氨基酸、维生素，是营养丰富的饮料酒。</p>
<img src="/2022/07/09/%E6%B8%85%E9%85%92%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/%E6%B8%85%E9%85%92.png" class="">


<h3 id="2-制作工艺"><a href="#2-制作工艺" class="headerlink" title="2.制作工艺"></a>2.制作工艺</h3><p>日本清酒是通过精选的大米去进行酿制的，日本清酒的制作工艺十分考究。精选的大米要<code>经过磨皮</code>，使大米精白，浸渍时<code>吸收水分</code>快，而且容易蒸熟；<code>发酵</code>又分成前、后发酵两个阶段；杀菌处理在装瓶前、后各进行一次，以确保酒的保质期；勾兑酒液时注重规格和标准。</p>
<h3 id="3-酿酒所用米"><a href="#3-酿酒所用米" class="headerlink" title="3.酿酒所用米"></a>3.酿酒所用米</h3><p>酿酒所用米跟我们平常的适用米是有区别的，一般来说酒米体积较大，有<code>心白</code>，蛋白质和脂质要少，酒米外硬内软，而且有较好的<code>吸水性</code>。而心白是指白米中心不透明的白色部分，主要<code>成分是淀粉</code>。含有心白的白米，曲菌菌丝易深入白米中心，且在制作酒母与酒醪时，白米更容易<code>糖化</code>，因此酿造清酒必须使用有心白的白米。</p>
<img src="/2022/07/09/%E6%B8%85%E9%85%92%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/%E9%85%BF%E9%85%92%E7%B1%B3%E7%B1%B3%E5%BF%83.jpeg" class="">

<h3 id="4-精米步合"><a href="#4-精米步合" class="headerlink" title="4.精米步合"></a>4.精米步合</h3><p>之前说到造酒时需要对精选过得大米进行<code>打磨</code>，那么打磨程度的衡量标准就叫做精米步合。打磨后的米重量&#x2F;打磨前的糙米重量x100&#x3D;精米步合（精密度）。在一定程度上，精米步合越低，被打磨掉的米越多，风味越纯净，价格也会越高。</p>
<img src="/2022/07/09/%E6%B8%85%E9%85%92%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/%E7%B2%BE%E7%B1%B3%E6%AD%A5%E5%90%88.png" class="">

<h3 id="5-清酒级别"><a href="#5-清酒级别" class="headerlink" title="5.清酒级别"></a>5.清酒级别</h3><p>清酒的级别是与精米步合所挂钩的，一般来说精密步和值越低，酒的象棋月浓厚。同样，价格也会越高。<br>以下简单列了个表格：在日本有8种特定名称酒，都是要求精米步合在70%以上的。精米步合70%以下的称为普通酒。<br>而特定名称酒大致也会被分成两类：一是纯米酒，仅用（<code>米+米曲</code>）进行酿造，二是本酿造类，使用（米+米曲+<code>酿造酒精</code>）酿制而成。达到特定精米步合的标准就会被赋予特定名称。<br>用以下表格呈现或许会显得更直观一些：</p>
<table>
<thead>
<tr>
<th>精米步合</th>
<th>纯米酒类</th>
<th>本酿造类</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;50%</td>
<td>纯米大吟酿</td>
<td>大吟酿</td>
</tr>
<tr>
<td>50%~60%</td>
<td>纯米吟酿</td>
<td>吟酿</td>
</tr>
<tr>
<td>60%~70%</td>
<td>特定纯米酒</td>
<td>特定本酿造</td>
</tr>
<tr>
<td>60%~70%</td>
<td>纯米酒</td>
<td>本酿造</td>
</tr>
<tr>
<td>&gt; 70%</td>
<td>普通酒</td>
<td>酿造酒</td>
</tr>
</tbody></table>
<img src="/2022/07/09/%E6%B8%85%E9%85%92%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/%E6%B8%85%E9%85%92%E7%AD%89%E7%BA%A7.jpg" class="">

<h3 id="6-酿造酒精"><a href="#6-酿造酒精" class="headerlink" title="6.酿造酒精"></a>6.酿造酒精</h3><p>对于清酒是否加入了酿造酒精其实并不直接关联品质的优劣，而加入酿造酒精是为了更能激发清酒独特的<code>韵味</code>。所谓酿造酒精,简单来说就是可食用的酒精。酿造酒精基本上<code>不具有香味</code>及<code>味道</code>，因此也<code>不会改变</code>清酒的<code>口感</code>。最初加入酿造酒精的租用也是防止就的品质劣化，它能抑制杂菌繁殖，使酒能够更长时间被保存下来。后来发现清酒的香气更易溶于酒精而不易溶于水，酿造酒精对于清酒的<code>呈香</code>有很大有帮助，所以本酿造类的就还大多有着洗练以及清爽的口感。</p>
]]></content>
      <categories>
        <category>人际关系</category>
      </categories>
      <tags>
        <tag>酒</tag>
      </tags>
  </entry>
  <entry>
    <title>疫情下的巴菲特2020股东大会</title>
    <url>/2020/04/04/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E5%B7%B4%E8%8F%B2%E7%89%B92020%E8%82%A1%E4%B8%9C%E5%A4%A7%E4%BC%9A/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>认为当初购买航空股可获得可观的收益，实际上是个错误。此次疫情对航空业打击很大，现在不清楚航空业在未来的会恢复多少。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>如果你持有的股票是自己欣赏的公司，即使疫情下价格发生改变，如果你真的认可商业模式和管理，股票有它自己的优势。</p>
<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>现在不建议建仓，除非做好长期持有的准备，如果现在选择进入股市市场要做好下跌50%或更多的准备。</p>
<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><p>回顾大萧条 道琼斯指数1929年9月3号在381.17点 大约两月后1929年11月13号道琼斯指数跌到198.69点跌幅接近50%。大约9个半月后1930年8月29号道琼斯指数恢复到240. 42点涨幅20%。人们当时认为从大萧条到了衰退期。但在1932年7月8号道琼斯指数跌倒了41.22点，不到两年跌幅超过了83%。银行相继面临破产，世界格局发生改变 FBIC机构成立。</p>
<h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><p>疫情会对经济有影响 某些行业会进一步衰退 比如 汽车行业 报业 航空业 农业</p>
<h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><p>石油行业正在发生风险</p>
<h3 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h3><p>买股票就是买公司收益的一部分，大多数人应该持有标普500</p>
<h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><p>做好分散投资 不要把鸡蛋放在同一个篮子里。</p>
<h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><p>有时候觉得失去信心其实是没有看到市场的潜在能力，要对美国市场有信心</p>
<h3 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h3><p>现在股价还太高</p>
]]></content>
      <categories>
        <category>财富密码</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
      </tags>
  </entry>
  <entry>
    <title>睡眠</title>
    <url>/2022/09/07/%E7%9D%A1%E7%9C%A0/</url>
    <content><![CDATA[<h3 id="1-睡眠是什么？"><a href="#1-睡眠是什么？" class="headerlink" title="1. 睡眠是什么？"></a>1. 睡眠是什么？</h3><p>人类的睡眠实际上被分为两种不同的类型：快速眼动睡眠以及非快速眼动睡眠。<br>人在入睡的时候，体温，心率，血压会下降并达到一个平稳的状态。</p>
<p>快速眼动睡眠（ram-sleep）：</p>
<ol>
<li>记忆整合</li>
<li>调节情绪</li>
</ol>
<p>非快速眼动睡眠（nram-sleep）：<br>脑电波频率明显变慢，呼吸频率和血压也明显降低。</p>
<ol>
<li>增强我们的记忆力</li>
<li>使身体更加健康，增强我们的免疫因子，</li>
</ol>
<p>一个睡眠周期在90分钟左右，从浅睡眠到深度睡眠再回到浅睡眠为一个周期。</p>
<h3 id="2-睡眠是怎么工作的？"><a href="#2-睡眠是怎么工作的？" class="headerlink" title="2. 睡眠是怎么工作的？"></a>2. 睡眠是怎么工作的？</h3><p>大概会有两个因素会对睡眠造成影响</p>
<ol>
<li>睡眠压力：睡觉的困意来自于神经元累积的叫”腺苷”分子，在一觉醒来后会开始逐渐累积，累积的越多困意就越大，但通过睡眠可以将这种分子恢复至最初的状态。</li>
<li>昼夜节律：人在一个昏暗的环境下更容易产生困意，身体会分泌一种叫“褪黑素”的神经递质去调节昼夜节律，告诉身体现在是白天该保持警觉，还是是晚上你应该睡觉了。</li>
</ol>
<h3 id="2-1-褪黑素的使用"><a href="#2-1-褪黑素的使用" class="headerlink" title="2.1 褪黑素的使用"></a>2.1 褪黑素的使用</h3><p>褪黑素在一定程度上可以调节睡眠，改善睡眠质量。</p>
<ol>
<li>人在青年的阶段，自身夜间的时候褪黑素分泌是足够的，可以通过改善外部环境去刺激褪黑素的分泌。</li>
<li>人在中年，老年的阶段自身夜间的时候褪黑素分泌会钝化或降低，在这时候补充一些褪黑素会让人体的褪黑素水平恢复到年轻时候的状态。</li>
<li>褪黑素的服用不适宜过量，如果褪黑素过量复用的话（5-10毫克）,身体会觉得不需要这么多褪黑素了，反而会抑制自身褪黑素的分泌。而一般医生建议服用的量为0.3-0.5毫克之间。</li>
</ol>
<h3 id="3-你是夜猫子？还是云雀？"><a href="#3-你是夜猫子？还是云雀？" class="headerlink" title="3. 你是夜猫子？还是云雀？"></a>3. 你是夜猫子？还是云雀？</h3><p>睡眠时间类型一般分为两种：一种是夜猫子类型的晚睡晚起，另一种是云雀类型的（早睡早起），还有一些人会在这两者之间。<br>而睡眠类型也是有基因决定的，也是天生的，你会带着你的这个天赋贯穿你的一生。如果说你是夜猫子的话，很有可能是你的父母至少是其中一方是夜猫子类型的。</p>
<h3 id="4-酒和咖啡因"><a href="#4-酒和咖啡因" class="headerlink" title="4. 酒和咖啡因"></a>4. 酒和咖啡因</h3><p>酒和咖啡都会影响人的睡眠情况</p>
<h6 id="咖啡："><a href="#咖啡：" class="headerlink" title="咖啡："></a>咖啡：</h6><ol>
<li>咖啡中含有大量的咖啡因，能让我们精神保持清醒。</li>
<li>咖啡因的持续时间：半衰期可长达5~6小时，也就是说当你下午2点喝了一杯咖啡后，到晚上8点你还有半杯咖啡因的在起作用，甚至到了凌晨2点的时候还有1&#x2F;4的咖啡因没消耗完。</li>
<li>咖啡会影响睡眠质量：会影响深度睡眠的质量，第二天起来会感觉比较疲劳。深度睡眠对心血管系统有益，可以帮助启动和充电免疫系统，可以把新的事实融入到神经结构中，增强记忆力。<br>原理：咖啡因会快速进入大脑与腺苷受体结合，从而阻断了腺苷与其受体的结合。让你的大脑觉得仍然还清醒没那么困了。但在这段时间内腺苷还是会持续增加的，当咖啡因失去作用时，大量的腺苷与受体结合会瞬间让你觉得非常得困。</li>
</ol>
<p>咖啡因隐藏：<br>注意咖啡因摄取，咖啡因会隐藏在一些日常的食物当中。</p>
<ol>
<li>及时是无咖啡因咖啡仍然具有小量的咖啡因。</li>
<li>运动饮料、可乐等饮料也会具有咖啡</li>
<li>冰淇淋也会具有咖啡因</li>
</ol>
<h6 id="酒："><a href="#酒：" class="headerlink" title="酒："></a>酒：</h6><p>平常认为酒会有助于睡眠，事实上酒对睡眠没有任何帮助甚至还会危害睡眠。</p>
<ol>
<li>酒只会让你进入镇定的状态，并不会让你进入自然睡觉。</li>
<li>让你的睡眠质量变差，难以进入深度睡眠甚至在夜间容易醒来。</li>
<li>扰乱快速眼动睡眠，降低记忆力。</li>
</ol>
<p>建议：</p>
<ol>
<li>尽量在下午或晚上减少咖啡因的摄入</li>
<li>保持规律睡眠，在同一时间起来，同一时间睡觉。</li>
</ol>
<h3 id="5-睡眠债"><a href="#5-睡眠债" class="headerlink" title="5. 睡眠债"></a>5. 睡眠债</h3><p>每天晚上如果我们得不到所需的睡眠，就会落下睡眠债。</p>
<ol>
<li>大脑中的腺苷无法全面得清除，残余的部分会跟随着你的身体度过一整天，这样一天都会过得很疲惫。</li>
<li>错过的睡眠无法通过恢复睡眠找回</li>
</ol>
<h6 id="少睡眠的危害"><a href="#少睡眠的危害" class="headerlink" title="少睡眠的危害"></a>少睡眠的危害</h6><ol>
<li>容易引起疲劳驾驶，在驾驶的过程中会出现微睡眠，眼睛会不自觉的闭合一两秒，容易造成事故损伤。</li>
<li>当你少睡一两个小时，个人是不自知的，觉得自己精神状态还很好，事实上</li>
<li>当没有达到充足睡眠的时候就跟醉酒了一样。</li>
</ol>
<h3 id="6-小睡"><a href="#6-小睡" class="headerlink" title="6.小睡"></a>6.小睡</h3><ol>
<li>小睡时长可达到15分钟到90分钟</li>
<li>午睡对心血管系统，增加记忆力，以及加强警觉性和专注能力有帮助。</li>
<li>但如果午睡的时间太长的话，会减少腺苷的累积，影响晚上的睡眠质量。</li>
</ol>
<h6 id="如何小睡？"><a href="#如何小睡？" class="headerlink" title="如何小睡？"></a>如何小睡？</h6><ol>
<li>最好在下午2-3点之前小睡，而且睡眠时间不要过长在15-20分钟左右，不然会影响你晚上的睡眠质量。</li>
</ol>
<h6 id="时差"><a href="#时差" class="headerlink" title="时差"></a>时差</h6><ol>
<li>身体会以每天减少一小时的时差逐渐适应当地的时间。</li>
<li>可以在上飞机的时候就调整成目的地的时间，让身体去提前适应。</li>
<li>身体需要至少持续清醒12小时以上才会累积健康的睡意，可以飞机是可以提前睡觉。</li>
</ol>
<h3 id="7-激活大脑"><a href="#7-激活大脑" class="headerlink" title="7. 激活大脑"></a>7. 激活大脑</h3><ol>
<li>在学习之前，让你的大脑准备好放下那些新的记忆痕迹。在睡眠被剥夺的情况下大脑几乎有40%的能力缺陷。在实验中表明剥夺睡眠会阻断海马体接收信号，就不能将新的信息存储到记忆中。</li>
<li>学习后睡觉巩固大脑中的神经结构。睡眠有助于将短期记忆变成长期的记忆。</li>
<li>需要睡觉来联想并将所有信息吸收整合到一起。</li>
</ol>
<h3 id="8-贯穿一生的睡眠"><a href="#8-贯穿一生的睡眠" class="headerlink" title="8. 贯穿一生的睡眠"></a>8. 贯穿一生的睡眠</h3><ol>
<li>当你老去睡眠质量以及睡眠时长也会逐渐下降。</li>
<li>在0-2岁的时候50%的情况下是在快速眼动睡眠的状态，另外50%的睡眠是在非快速眼动睡眠。到青年的时候非快速眼动睡眠的时间会更长一些。到成年的时候大概会有80%的情况是在非快速眼动睡眠，仅20%情况是在快速眼动睡眠。到老年的时候在夜间睡眠的次数会逐渐增多</li>
<li>在30岁后睡眠的脑电波就会开始下降，随着年龄的增长大脑不能产生睡眠满足必然的需求。</li>
<li>随着年纪的增长我们对昼夜节律的感知也会变得更差，因为大脑会减少褪黑素的释放。</li>
</ol>
<h6 id="阿尔兹海默症（老年痴呆症）"><a href="#阿尔兹海默症（老年痴呆症）" class="headerlink" title="阿尔兹海默症（老年痴呆症）"></a>阿尔兹海默症（老年痴呆症）</h6><ol>
<li>阿尔兹海默症与睡眠息息相关</li>
<li>当睡觉不充分得时候，脑袋会产生有毒的蛋白质（淀粉样蛋白-bete amyloid），而当我们进入深度非快速眼动睡眠的时候会清理这些有毒蛋白。</li>
</ol>
<h3 id="9-通宵治疗"><a href="#9-通宵治疗" class="headerlink" title="9.通宵治疗"></a>9.通宵治疗</h3><p>睡眠不足是如何影响我们的情绪的</p>
<ol>
<li>大脑中的杏仁核是控制情绪的中枢</li>
<li>当睡眠充足的时候前额叶皮层会对杏仁核进行调节，对于睡眠减少的情况下，这种调节机制基本上被切断了，杏仁核就会变得特别敏感。也就是说当有充足睡眠的时候情绪是可被管控的。</li>
<li>睡眠跟P创伤性后遗症，抑郁症，精神分裂等精神疾病都有关联。有充足的睡眠会对精神疾病很好的预防。</li>
<li>快速眼动睡眠和做梦是情绪急救。</li>
<li>睡眠会的自己的情绪有所校准，会增加对于情绪的洞察能力，读懂别人的情绪。</li>
</ol>
<h3 id="10-荒诞的梦境表现"><a href="#10-荒诞的梦境表现" class="headerlink" title="10.荒诞的梦境表现"></a>10.荒诞的梦境表现</h3><ol>
<li>做梦是一个正常的生理机制，是完全非理性的。</li>
</ol>
<h3 id="11-睡眠与你的身体"><a href="#11-睡眠与你的身体" class="headerlink" title="11.睡眠与你的身体"></a>11.睡眠与你的身体</h3><ol>
<li>人们通常认为健康的三个支柱是睡眠+饮食+运动，其实睡眠是作为一个重要的支柱给做饮食和运动支撑。</li>
<li>睡眠跟自身的免疫系统是强相关的，通过数百万的统计数据证明，睡眠时间越短，寿命就会越短。</li>
<li>每晚睡觉少于7个小时的人感冒的概率是正常人的3倍。</li>
<li>自然杀伤细胞：会像一个特工一样在你身体游走消灭有害的细胞，如果睡眠小于4小时的活活性会减弱80%。它是预防癌细胞的绝妙杀手。</li>
<li>缺少睡眠对一个男人来说会缺少健康和阳刚之气。</li>
</ol>
<h3 id="12-饮食与睡眠"><a href="#12-饮食与睡眠" class="headerlink" title="12.饮食与睡眠"></a>12.饮食与睡眠</h3><ol>
<li>睡眠不足的情况下体重会下降，但减少的并不是你的脂肪，而是肌肉。</li>
<li>睡眠不足的时候杏仁核会发出信号，会让人产生对于非健康食品的渴望。大脑皮层也会受损，从而失去对大脑中冲动的控制。</li>
<li>人体中有两种激素控制身体是否感受到饥饿，一是瘦素，让你的身体感受到饱腹感，二是饥饿素，让你的身体感受到饥饿。</li>
<li>睡眠不足会让以上两种激素走向不健康的样子，瘦素会下降，饥饿素上升，让你的身体去获取一些垃圾食品而非健康的食物。</li>
<li>当人人体的血糖升高时，人体中的胰岛素就会开始工作，告诉身体是时候从血液中吸食葡萄糖。</li>
<li>高糖、低纤饮食通常会对你的夜间睡眠不利，会让你在夜间容易醒来。最好在睡觉前3-4个小时就停止进食，给身体一个足够的消化时间。</li>
</ol>
<h3 id="13-睡眠引领成功"><a href="#13-睡眠引领成功" class="headerlink" title="13.睡眠引领成功"></a>13.睡眠引领成功</h3><ol>
<li>运动会让你的睡眠变得更好，可以增加你的睡眠的时长以及深度睡眠的时长。</li>
<li>但值得注意是的，不要睡觉前一两个小时进行运动，因为这样你的心率的增速，内啡肽的分泌都会让你的身体处于一个兴奋的状态，难以入睡。</li>
<li>睡觉其实是身体恢复的最佳良药，对于一些运动能力以及技巧是可以通过睡眠去固化的。</li>
</ol>
<h3 id="14-如何睡得更好"><a href="#14-如何睡得更好" class="headerlink" title="14.如何睡得更好"></a>14.如何睡得更好</h3><ol>
<li>有规律的睡眠，不管是工作日还是周末休息在同一时间上床睡觉，在同一时间醒来。</li>
<li>睡眠是有一个过度过程的，睡觉前可以先让身体放松起来，比方说洗个澡，伸个懒腰，读一下书等。试着建立相同的睡眠习惯。</li>
<li>在睡觉前一两个小时可以把你的忧虑写下来，得到一种宣泄的作用，科学证明这可以提高入睡的可能性。</li>
<li>保持凉爽，一个最佳的睡眠室内温度在18摄氏度，因为你的身体在睡觉的时候需要降低自身的体温1摄氏度才能入睡。</li>
<li>在睡觉前一个小时尽量把室内灯光调暗，让大脑得到黑暗甚至黄昏的信号，它需要足够的时间去释放褪黑素。</li>
<li>不要喝醉了上床睡觉，酒里含有尼古丁，是一种活性的化学物质这可以刺激你的大脑，让睡觉更加困难。</li>
<li>尽量避免在床上工作、吃学习、看电视等，这样会让你的大脑产生混乱，不要把床跟其他东西关联起来，除了睡个好觉。</li>
<li>若你在床上25分钟以上无法入睡的话应该起床到处走走，让大脑习惯性认为床是一个只适合睡觉的地方。</li>
<li>如果你想知道你做完的一个睡眠状态的话，可以使用具有检测睡眠的手表进行检测。</li>
</ol>
<h3 id="15-找回睡眠"><a href="#15-找回睡眠" class="headerlink" title="15.找回睡眠"></a>15.找回睡眠</h3><ol>
<li>找回自己的睡眠类型，因为每个人的睡眠类型都不一样有人早起早睡，有人晚起晚睡。现代社会工作制度不一定是合理的，统一的上班时间会剥夺了部分人的睡眠时间。但目前，也有一些大型的互联网公司采取弹性工作制度，可以让晚睡晚起的人晚些上班。</li>
</ol>
]]></content>
      <categories>
        <category>运动健康</category>
        <category>睡眠</category>
      </categories>
  </entry>
  <entry>
    <title>穿搭</title>
    <url>/2022/08/25/%E7%A9%BF%E6%90%AD/</url>
    <content><![CDATA[<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ol>
<li>颜色不要超过3种颜色以上，注意颜色之间的搭配。</li>
<li>搭配规则参考色环。同源色，相邻色、对比色。</li>
<li>遵循2&#x2F;8分布，20%为主色，80%为配色。</li>
<li>同色系衣服需要有不同的颜色进行过度。</li>
<li>注意颜色呼应，如上衣图案的颜色最好能和配饰对应上。</li>
</ol>
<h3 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h3><ol>
<li>尽量穿比较宽松的衣服，如直筒裤。</li>
<li>记得繁简搭配，如果上衣比较复杂那么下身尽量穿得简单一些。</li>
</ol>
<h3 id="配饰"><a href="#配饰" class="headerlink" title="配饰"></a>配饰</h3><ol>
<li>穿衣需要点缀：如项链，帽子，口罩，手表，袜子等都可以成为你的配饰。</li>
<li>配饰也可以遵循2&#x2F;8分布，配饰作为20%的主显色系。</li>
</ol>
]]></content>
      <categories>
        <category>人际关系</category>
      </categories>
      <tags>
        <tag>穿搭</tag>
      </tags>
  </entry>
  <entry>
    <title>纳瓦尔关于生活、工作和智慧的访谈笔录</title>
    <url>/2022/11/03/%E7%BA%B3%E7%93%A6%E5%B0%94%E5%85%B3%E4%BA%8E%E7%94%9F%E6%B4%BB%E3%80%81%E5%B7%A5%E4%BD%9C%E5%92%8C%E6%99%BA%E6%85%A7%E7%9A%84%E8%AE%BF%E8%B0%88%E7%AC%94%E5%BD%95/</url>
    <content><![CDATA[<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><ol>
<li>去阅读满足自身求知欲望的书籍，在阅读过程中不一定需要完全读完一整本，可以选择仅阅读你感兴趣的部分。</li>
<li>在一个垂直领域去阅读&#x2F;学习，同一个领域不同作者的书可以多读几本，从不同的角度去理解同一个观点，对于观点会有更加全面的了解。<br>比方说我正在学习如何赚钱，在纳瓦尔宝典这本书中有个章节是专门讲解财富的，那么我去阅读那一章节就可以了</li>
</ol>
<h1 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h1><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1>]]></content>
      <categories>
        <category>思维模型</category>
      </categories>
      <tags>
        <tag>纳瓦尔</tag>
      </tags>
  </entry>
  <entry>
    <title>【大师课】职业规划</title>
    <url>/2022/12/20/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h3 id="挖掘你的天赋领域"><a href="#挖掘你的天赋领域" class="headerlink" title="挖掘你的天赋领域"></a>挖掘你的天赋领域</h3><ol>
<li>首先要发现自己的天赋领域，天赋领域是受价值观牵引的，天赋领域这会增强你的天赋、激情 自信。</li>
<li>天赋领域：及综合了你的激情、才能、价值观与技能 仅有你能做而非其他人可以做的。 要尽可能得把更多的时间放在天赋领域上面。</li>
<li>激情：在不考虑生存资源情况下也会去做的事。这是需要时间去培养的。</li>
<li>技能：在以后生活中或通往目标的路上都会用到的技能&#x2F;工具，需要花时间去培养和学习。</li>
<li>天赋：自己擅长的事情，自己几乎不费什么力气就能轻松完成的事情，或者说在花费同等时间的情况下你能比别人做得更好。</li>
<li>价值观：对于你来说，什么比钱更重要？对于一份工作而言，他不能违背你的价值观框架。用价值观去过滤哪些工作是你该做的哪些是不该做的。<br>Tip: 可以从童年的回忆中去挖掘与别人与众不同的地方，也可以从别人的印象中去获取。</li>
</ol>
<h3 id="职业发展蓝图"><a href="#职业发展蓝图" class="headerlink" title="职业发展蓝图"></a>职业发展蓝图</h3><ol>
<li>以目标为牵引，当你在职业发展道路上遇到挫折时也不会过于迷茫。</li>
<li>职业发展蓝图是从一个更高的角度去往下俯视，这包括了你的短期规划，以及长期规划。学会如何从大局出发规划你的职业生涯。</li>
<li>人生的灯台&#x2F;标杆，找一个人作为你的”老师”参照的对象。学习他的职业规划&#x2F;人生道路，会找到属于自己的职业发展蓝图。</li>
<li>通过思维导图去构建你的职业蓝图，从中心“目的”开始，然后链接的圆是是你的一些项目和想法，再从项目中可以再划分出更具体的项目细节。</li>
</ol>
<h3 id="构建人脉圈子"><a href="#构建人脉圈子" class="headerlink" title="构建人脉圈子"></a>构建人脉圈子</h3><ol>
<li>需要构建自己的顾问委员会，在自己做决策或做重大规划的时候需要有人给你建议&#x2F;聊一聊。</li>
<li>寻找一个人生导师，可以从一杯咖啡开始</li>
<li>不一定要向上找，也可以向周围看看。寻找与自己有相同经历的人，看看他们是怎么做到的。</li>
<li>不要低估你当先建立关系的力量，付出而不求回报，支持周围的人，慷慨的付出你的时间和精力。</li>
</ol>
<h3 id="寻找机会与副业"><a href="#寻找机会与副业" class="headerlink" title="寻找机会与副业"></a>寻找机会与副业</h3>]]></content>
  </entry>
  <entry>
    <title>自动聊天机器人学习笔记</title>
    <url>/2020/04/04/%E8%87%AA%E5%8A%A8%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="自动聊天机器人学习笔记"><a href="#自动聊天机器人学习笔记" class="headerlink" title="自动聊天机器人学习笔记"></a>自动聊天机器人学习笔记</h2><h3 id="1-NLTK"><a href="#1-NLTK" class="headerlink" title="1 NLTK"></a>1 NLTK</h3><p>NLTK 是Python自然语言处理库<br>自带语料库 词性分类库 自带分类 分词 等功能</p>
<h3 id="1-1-安装-x2F-测试"><a href="#1-1-安装-x2F-测试" class="headerlink" title="1.1 安装&#x2F;测试"></a>1.1 安装&#x2F;测试</h3><p>mac安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -u nltk</span><br></pre></td></tr></table></figure>

<p>mac测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Python</span><br><span class="line">&gt;&gt;&gt; import nltk</span><br></pre></td></tr></table></figure>

<p>语料库安装cropus</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; nltk.download()</span><br></pre></td></tr></table></figure>
<p>语料库使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import nltk.cropus</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NLP</tag>
        <tag>文本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>自然语言处理（一）：TFIDF</title>
    <url>/2022/07/16/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ATFIDF/</url>
    <content><![CDATA[<h3 id="1-TFIDF的定义"><a href="#1-TFIDF的定义" class="headerlink" title="1. TFIDF的定义"></a>1. TFIDF的定义</h3><p>TFIDF 全称 Term Frequency, Inverse document Frequency，也可以翻译成词频逆向文档频率。TFIDF可以分为两部分，其中TF就是一个词出现在一个文档中出现的频率，而IDF就是有多少个文档包含了该单词。</p>
<h3 id="2-使用说明"><a href="#2-使用说明" class="headerlink" title="2. 使用说明"></a>2. 使用说明</h3><p>TFIDF是一种基于词频的算法公式，用来为每个词组计算一个分值，基于这个分值识别一个词在一个文档中的重要性，而后可以作为关键词提取或用于给词向量加权。</p>
<h3 id="3-基本原理"><a href="#3-基本原理" class="headerlink" title="3. 基本原理"></a>3. 基本原理</h3><p>TF是计算词频，词频越高就证明了这词越重要，而IDF逆向文档频率就是为了降低一些常用词出现的权重。最后通过TF*IDF的乘积得到一个最后分值。一般来说经过TFIDF公式计算后的单词分值越大越为重要。原理是当一个词在单个文档中出现频繁的出现，但在其他文档中出现得少，这证明这个单词对于这个文档是重要的。</p>
<p>比方说有个文件夹下有两个文档:<br>1.今天吃番茄炒蛋， 在这个句子分词后可以分为: 今天 上午 吃 番茄 炒 蛋 下午 吃 番茄 土豆<br>2.明天吃番茄炒土豆， 在这个句子分词后可以分为: 今天 上午 吃 红烧鱼 下午 吃 土豆</p>
<p>从这两句话中可以看出 “番茄” 是比较重要的，因为番茄在句一出现了两次而在其他文档中没有频繁出现。而 “今天” ，”上午” 等词语经过IDF减权显得并非那么重要。</p>
<h3 id="4-算法公式"><a href="#4-算法公式" class="headerlink" title="4. 算法公式"></a>4. 算法公式</h3><p>TF: 一个词在一个文档出现的次数&#x2F;在所有文档中所有出现过词的数量<br>IDF: log(文档总算量&#x2F;包含该词的文档数量)<br>TFIDF &#x3D; TF * IDF</p>
<h3 id="5-优缺点"><a href="#5-优缺点" class="headerlink" title="5. 优缺点"></a>5. 优缺点</h3><p>优点<br>简答、快捷、满足一般分析需求</p>
<p>缺点<br>1.不考虑上下文关系, 每个词都是相对独立了 我爱你和你爱我 算法过后表示同一意思。<br>2.文档过多的话会导致IDF可能会低估词的重要性。</p>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NLP</tag>
        <tag>文本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云AI学习（一）天池入门与实践笔记</title>
    <url>/2022/11/06/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E5%A4%A9%E6%B1%A0%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="天池是什么"><a href="#天池是什么" class="headerlink" title="天池是什么"></a>天池是什么</h1><p>是一个可以给开发者提供云端开发环境，它无需在本地进行部署。</p>
<h1 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h1><p>打通各种数据源，支持各种开源训练框架，并对tensorflow进行了优化。</p>
<h1 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h1><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">配置</th>
</tr>
</thead>
<tbody><tr>
<td align="center">底座</td>
<td align="center">DSW探索者</td>
</tr>
<tr>
<td align="center">硬件</td>
<td align="center">2c4g cpu &#x2F; tesla p100 GPU</td>
</tr>
<tr>
<td align="center">存储空间</td>
<td align="center">5GB</td>
</tr>
<tr>
<td align="center">使用时长</td>
<td align="center">单次8小时</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>AI学习</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>阿里云</tag>
        <tag>天池</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础（上）</title>
    <url>/2022/11/19/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1>Python基础(上)</h1>

<ol>
<li><p><a href="#%E7%AE%80%E4%BB%8B">简介</a></p>
</li>
<li><p><a href="#%E5%8F%98%E9%87%8F%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">变量、运算符与数据类型</a><br><br><a href="#1.-%E6%B3%A8%E9%87%8A">1. 注释</a><br><br><a href="#2.-%E8%BF%90%E7%AE%97%E7%AC%A6">2. 运算符</a><br><br><a href="#3.-%E5%8F%98%E9%87%8F%E5%92%8C%E8%B5%8B%E5%80%BC">3. 变量和赋值</a><br><br><a href="#4.-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BD%AC%E6%8D%A2">4. 数据类型与转换</a><br><br><a href="#5.-print()-%E5%87%BD%E6%95%B0">5. print()函数</a><br></p>
</li>
<li><p><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97">位运算</a><br><br><a href="#1.-%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81">1. 原码、反码和补码</a><br><br><a href="#2.-%E6%8C%89%E4%BD%8D%E8%BF%90%E7%AE%97">2. 按位运算</a><br><br><a href="#3.-%E5%88%A9%E7%94%A8%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E8%AE%A1%E7%AE%97">3. 利用位运算实现快速计算</a><br><br><a href="#4.-%E5%88%A9%E7%94%A8%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88">4. 利用位运算实现整数集合</a><br></p>
</li>
<li><p><a href="#%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5">条件语句</a><br><br><a href="#1.-if-%E8%AF%AD%E5%8F%A5">1. if 语句</a><br><br><a href="#2.-if---else-%E8%AF%AD%E5%8F%A5">2. if - else 语句</a><br><br><a href="#3.-if---elif---else-%E8%AF%AD%E5%8F%A5">3. if - elif - else 语句</a><br><br><a href="#4.-assert-%E5%85%B3%E9%94%AE%E8%AF%8D">4. assert 关键词</a><br></p>
</li>
<li><p><a href="#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5">循环语句</a><br><br><a href="#1.-while-%E5%BE%AA%E7%8E%AF">1. while 循环</a><br><br><a href="#2.-while---else-%E5%BE%AA%E7%8E%AF">2. while - else 循环</a><br><br><a href="#3.-for-%E5%BE%AA%E7%8E%AF">3. for 循环</a><br><br><a href="#4.-for---else-%E5%BE%AA%E7%8E%AF">4. for - else 循环</a><br><br><a href="#5.-range()-%E5%87%BD%E6%95%B0">5. range() 函数</a><br><br><a href="#6.-enumerate()%E5%87%BD%E6%95%B0">6. enumerate()函数</a><br><br><a href="#7.-break-%E8%AF%AD%E5%8F%A5">7. break 语句</a><br><br><a href="#8.-continue-%E8%AF%AD%E5%8F%A5">8. continue 语句</a><br><br><a href="#9.-pass-%E8%AF%AD%E5%8F%A5">9. pass 语句</a><br><br><a href="#10.-%E6%8E%A8%E5%AF%BC%E5%BC%8F">10. 推导式</a><br></p>
</li>
<li><p><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a><br><br><a href="#1.-Python-%E6%A0%87%E5%87%86%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93">1. Python 标准异常总结</a><br><br><a href="#2.-Python%E6%A0%87%E5%87%86%E8%AD%A6%E5%91%8A%E6%80%BB%E7%BB%93">2. Python 标准警告总结</a><br><br><a href="#3.-try---except-%E8%AF%AD%E5%8F%A5">3. try - except 语句</a><br><br><a href="#4.-try---except---finally-%E8%AF%AD%E5%8F%A5">4. try - except - finally 语句</a><br><br><a href="#5.-try---except---else-%E8%AF%AD%E5%8F%A5">5. try - except - else 语句</a><br><br><a href="#6.-raise%E8%AF%AD%E5%8F%A5">6. raise语句</a><br></p>
</li>
</ol>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>
<p>天池官方为大家准备钉钉学习交流群，在学习过程中，大家有任何教程内容或者平台使用问题都可以在群内提出，扫码即可加入：</p>
<div align=center><img src="https://img.alicdn.com/imgextra/i3/O1CN013BEK6q1kvG3Je4kvO_!!6000000004745-2-tps-1000-1232.png" width=30% />


<p>本实验包括以下内容：</p>
<ul>
<li>变量、运算符与数据类型<ul>
<li>注释</li>
<li>运算符</li>
<li>变量和赋值</li>
<li>数据类型与转换</li>
<li>print() 函数</li>
</ul>
</li>
<li>位运算<ul>
<li>原码、反码和补码</li>
<li>按位非操作 ~</li>
<li>按位与操作 &amp;</li>
<li>按位或操作 |</li>
<li>按位异或操作 ^</li>
<li>按位左移操作 &lt;&lt;</li>
<li>按位右移操作 &gt;&gt;</li>
<li>利用位运算实现快速计算</li>
<li>利用位运算实现整数集合</li>
</ul>
</li>
<li>条件语句<ul>
<li>if 语句</li>
<li>if - else 语句</li>
<li>if - elif - else 语句</li>
<li>assert 关键词</li>
</ul>
</li>
<li>循环语句<ul>
<li>while 循环</li>
<li>while - else 循环</li>
<li>for 循环</li>
<li>for - else 循环</li>
<li>range() 函数</li>
<li>enumerate()函数</li>
<li>break 语句</li>
<li>continue 语句</li>
<li>pass 语句</li>
<li>推导式</li>
</ul>
</li>
<li>异常处理<ul>
<li>Python 标准异常总结</li>
<li>Python 标准警告总结</li>
<li>try - except 语句</li>
<li>try - except - finally 语句</li>
<li>try - except - else 语句</li>
<li>raise语句</li>
</ul>
</li>
</ul>
<h1 id="变量、运算符与数据类型"><a href="#变量、运算符与数据类型" class="headerlink" title="变量、运算符与数据类型"></a>变量、运算符与数据类型</h1><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h2><ul>
<li>在 Python 中，<code>#</code> 表示注释，作用于整行。</li>
</ul>
<p>【例子】单行注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hello world</span></span><br></pre></td></tr></table></figure>

<pre><code>Hello world
</code></pre>
<ul>
<li><code>&#39;&#39;&#39; &#39;&#39;&#39;</code> 或者 <code>&quot;&quot;&quot; &quot;&quot;&quot;</code> 表示区间注释，在三引号之间的所有内容被注释</li>
</ul>
<p>【例子】多行注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello china&quot;</span>) </span><br><span class="line"><span class="comment"># Hello china</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号 </span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello china&quot;</span>) </span><br><span class="line"><span class="comment"># hello china</span></span><br></pre></td></tr></table></figure>

<pre><code>Hello china
hello china
</code></pre>
<p>【我是测试题1】请在下方代码块中打印(print)出 hello+你的姓名<br><br>如：print(“hello 老表”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写下你的答案</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello Jack&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>hello Jack
</code></pre>
<h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><p><b>算术运算符</b></p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>+</code></td>
<td align="center">加</td>
<td align="center"><code>1 + 1</code></td>
</tr>
<tr>
<td align="center"><code>-</code></td>
<td align="center">减</td>
<td align="center"><code>2 - 1</code></td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">乘</td>
<td align="center"><code>3 * 4</code></td>
</tr>
<tr>
<td align="center"><code>/</code></td>
<td align="center">除</td>
<td align="center"><code>3 / 4</code></td>
</tr>
<tr>
<td align="center"><code>//</code></td>
<td align="center">整除（地板除）</td>
<td align="center"><code>3 // 4</code></td>
</tr>
<tr>
<td align="center"><code>%</code></td>
<td align="center">取余</td>
<td align="center"><code>3 % 4</code></td>
</tr>
<tr>
<td align="center"><code>**</code></td>
<td align="center">幂</td>
<td align="center"><code>2 ** 3</code></td>
</tr>
</tbody></table>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="number">1</span>)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> - <span class="number">1</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> * <span class="number">4</span>)  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> / <span class="number">4</span>)  <span class="comment"># 0.75</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> // <span class="number">4</span>)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> % <span class="number">4</span>)  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> ** <span class="number">3</span>)  <span class="comment"># 8</span></span><br></pre></td></tr></table></figure>

<pre><code>2

1

12

0.75

0

3

8
</code></pre>
<p><b>比较运算符</b></p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&gt;</code></td>
<td align="center">大于</td>
<td align="center"><code>2 &gt; 1</code></td>
</tr>
<tr>
<td align="center"><code>&gt;=</code></td>
<td align="center">大于等于</td>
<td align="center"><code>2 &gt;= 4</code></td>
</tr>
<tr>
<td align="center"><code>&lt;</code></td>
<td align="center">小于</td>
<td align="center"><code>1 &lt; 2</code></td>
</tr>
<tr>
<td align="center"><code>&lt;=</code></td>
<td align="center">小于等于</td>
<td align="center"><code>5 &lt;= 2</code></td>
</tr>
<tr>
<td align="center"><code>==</code></td>
<td align="center">等于</td>
<td align="center"><code>3 == 4</code></td>
</tr>
<tr>
<td align="center"><code>!=</code></td>
<td align="center">不等于</td>
<td align="center"><code>3 != 5</code></td>
</tr>
</tbody></table>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">2</span> &gt; <span class="number">1</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> &gt;= <span class="number">4</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> &lt; <span class="number">2</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &lt;= <span class="number">2</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> == <span class="number">4</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> != <span class="number">5</span>)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<pre><code>True

False

True

False

False

True
</code></pre>
<p><b>逻辑运算符</b></p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>and</code></td>
<td align="center">与</td>
<td align="center"><code>(3 &gt; 2) and (3 &lt; 5)</code></td>
</tr>
<tr>
<td align="center"><code>or</code></td>
<td align="center">或</td>
<td align="center"><code>(1 &gt; 3) or (9 &lt; 2)</code></td>
</tr>
<tr>
<td align="center"><code>not</code></td>
<td align="center">非</td>
<td align="center"><code>not (2 &gt; 1)</code></td>
</tr>
</tbody></table>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="number">3</span> &gt; <span class="number">2</span>) <span class="keyword">and</span> (<span class="number">3</span> &lt; <span class="number">5</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span> &gt; <span class="number">3</span>) <span class="keyword">or</span> (<span class="number">9</span> &lt; <span class="number">2</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> (<span class="number">2</span> &gt; <span class="number">1</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<pre><code>True

False

False
</code></pre>
<p><b>位运算符</b></p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>~</code></td>
<td align="center">按位取反</td>
<td align="center"><code>~4</code></td>
</tr>
<tr>
<td align="center"><code>&amp;</code></td>
<td align="center">按位与</td>
<td align="center"><code>4 &amp; 5</code></td>
</tr>
<tr>
<td align="center">&#96;</td>
<td align="center">&#96;</td>
<td align="center">按位或</td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">按位异或</td>
<td align="center"><code>4 ^ 5</code></td>
</tr>
<tr>
<td align="center"><code>&lt;&lt;</code></td>
<td align="center">左移</td>
<td align="center"><code>4 &lt;&lt; 2</code></td>
</tr>
<tr>
<td align="center"><code>&gt;&gt;</code></td>
<td align="center">右移</td>
<td align="center"><code>4 &gt;&gt; 2</code></td>
</tr>
</tbody></table>
<p>【例子】有关二进制的运算，参见“位运算”部分的讲解。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">4</span>))  <span class="comment"># 0b100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">5</span>))  <span class="comment"># 0b101</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(~<span class="number">4</span>), ~<span class="number">4</span>)  <span class="comment"># -0b101 -5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">4</span> &amp; <span class="number">5</span>), <span class="number">4</span> &amp; <span class="number">5</span>)  <span class="comment"># 0b100 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">4</span> | <span class="number">5</span>), <span class="number">4</span> | <span class="number">5</span>)  <span class="comment"># 0b101 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">4</span> ^ <span class="number">5</span>), <span class="number">4</span> ^ <span class="number">5</span>)  <span class="comment"># 0b1 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">4</span> &lt;&lt; <span class="number">2</span>), <span class="number">4</span> &lt;&lt; <span class="number">2</span>)  <span class="comment"># 0b10000 16</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">4</span> &gt;&gt; <span class="number">2</span>), <span class="number">4</span> &gt;&gt; <span class="number">2</span>)  <span class="comment"># 0b1 1</span></span><br></pre></td></tr></table></figure>

<pre><code>0b100

0b101

-0b101 -5

0b100 4

0b101 5

0b1 1

0b10000 16

0b1 1
</code></pre>
<p><b>三元运算符</b></p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> x &lt; y:</span><br><span class="line">    small = x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    small = y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(small)  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<pre><code>4
</code></pre>
<p>有了这个三元操作符的条件表达式，你可以使用一条语句来完成以上的条件判断和赋值操作。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">small = x <span class="keyword">if</span> x &lt; y <span class="keyword">else</span> y</span><br><span class="line"><span class="built_in">print</span>(small)  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<pre><code>4
</code></pre>
<p><b>其他运算符</b></p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>in</code></td>
<td align="center">存在</td>
<td align="center"><code>&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></td>
</tr>
<tr>
<td align="center"><code>not in</code></td>
<td align="center">不存在</td>
<td align="center"><code>&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></td>
</tr>
<tr>
<td align="center"><code>is</code></td>
<td align="center">是</td>
<td align="center"><code>&quot;hello&quot; is &quot;hello&quot;</code></td>
</tr>
<tr>
<td align="center"><code>is not</code></td>
<td align="center">不是</td>
<td align="center"><code>&quot;hello&quot; is not &quot;hello&quot;</code></td>
</tr>
</tbody></table>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letters = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">in</span> letters:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span> + <span class="string">&#x27; exists&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;h&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> letters:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;h&#x27;</span> + <span class="string">&#x27; not exists&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A exists</span></span><br><span class="line"><span class="comment"># h not exists</span></span><br></pre></td></tr></table></figure>

<pre><code>A exists

h not exists
</code></pre>
<p>【例子】比较的两个变量均指向不可变类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b, a == b)  <span class="comment"># True True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="keyword">not</span> b, a != b)  <span class="comment"># False False</span></span><br></pre></td></tr></table></figure>

<pre><code>True True

False False
</code></pre>
<p>【例子】比较的两个变量均指向可变类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>]</span><br><span class="line">b = [<span class="string">&quot;hello&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b, a == b)  <span class="comment"># False True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="keyword">not</span> b, a != b)  <span class="comment"># True False</span></span><br></pre></td></tr></table></figure>

<pre><code>False True

True False
</code></pre>
<p>注意：</p>
<ul>
<li>is, is not 对比的是两个变量的内存地址</li>
<li>&#x3D;&#x3D;, !&#x3D; 对比的是两个变量的值</li>
<li>比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 &#x3D;&#x3D;，！&#x3D; 是完全等价的。</li>
<li>对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。</li>
</ul>
<p><b>运算符的优先级</b></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>指数（最高优先级）</td>
</tr>
<tr>
<td>~+-</td>
<td>按位翻转，一元加号和减号</td>
</tr>
<tr>
<td>* &#x2F; % &#x2F;&#x2F;</td>
<td>乘，除，取模和取整除）</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>&gt;&gt; &lt;&lt;</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>位‘AND’</td>
</tr>
<tr>
<td>^|</td>
<td>位运算符</td>
</tr>
<tr>
<td>&lt;&#x3D;&lt;&gt;&gt;&#x3D;</td>
<td>比较运算符</td>
</tr>
<tr>
<td>&lt;&gt;&#x3D;&#x3D;!&#x3D;</td>
<td>等于运算符</td>
</tr>
<tr>
<td>&#x3D;%&#x3D;&#x2F;&#x3D;&#x2F;&#x2F;&#x3D;-&#x3D;+&#x3D;*&#x3D;**&#x3D;</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not and or</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(-<span class="number">3</span> ** <span class="number">2</span>)  <span class="comment"># -9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> ** -<span class="number">2</span>)  <span class="comment"># 0.1111111111111111</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> &lt;&lt; <span class="number">3</span> + <span class="number">2</span> &amp; <span class="number">7</span>)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">3</span> * <span class="number">2</span> + <span class="number">5</span> / -<span class="number">2</span> - <span class="number">4</span>)  <span class="comment"># -12.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">and</span> <span class="number">4</span> &lt; <span class="number">5</span>)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<pre><code>-9

0.1111111111111111

0

-12.5

True
</code></pre>
<p>【我是测试题2】下面这段代码的运行结果是什么？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行一下结果就出来了</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b, a == b) <span class="comment">#True True</span></span><br></pre></td></tr></table></figure>

<pre><code>True True
</code></pre>
<h2 id="3-变量和赋值"><a href="#3-变量和赋值" class="headerlink" title="3. 变量和赋值"></a>3. 变量和赋值</h2><ul>
<li>在使用变量之前，需要对其先赋值。</li>
<li>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</li>
<li>Python 变量名是大小写敏感的，foo !&#x3D; Foo。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teacher = <span class="string">&quot;老马的程序人生&quot;</span></span><br><span class="line"><span class="built_in">print</span>(teacher)  <span class="comment"># 老马的程序人生</span></span><br></pre></td></tr></table></figure>

<pre><code>老马的程序人生
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first = <span class="number">2</span></span><br><span class="line">second = <span class="number">3</span></span><br><span class="line">third = first + second</span><br><span class="line"><span class="built_in">print</span>(third)  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>

<pre><code>5
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myTeacher = <span class="string">&quot;老马的程序人生&quot;</span></span><br><span class="line">yourTeacher = <span class="string">&quot;小马的程序人生&quot;</span></span><br><span class="line">ourTeacher = myTeacher + <span class="string">&#x27;,&#x27;</span> + yourTeacher</span><br><span class="line"><span class="built_in">print</span>(ourTeacher)  <span class="comment"># 老马的程序人生,小马的程序人生</span></span><br></pre></td></tr></table></figure>

<pre><code>老马的程序人生,小马的程序人生
</code></pre>
<p>【我是测试题3】运行下面一段代码看看结果是什么？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行一下就好啦</span></span><br><span class="line">set_1 = &#123;<span class="string">&quot;欢迎&quot;</span>, <span class="string">&quot;学习&quot;</span>,<span class="string">&quot;Python&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set_1.pop()) <span class="comment">#Python</span></span><br></pre></td></tr></table></figure>

<pre><code>Python
</code></pre>
<h2 id="4-数据类型与转换"><a href="#4-数据类型与转换" class="headerlink" title="4. 数据类型与转换"></a>4. 数据类型与转换</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int</td>
<td align="center">整型 <code>&lt;class &#39;int&#39;&gt;</code></td>
<td align="center"><code>-876, 10</code></td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">浮点型<code>&lt;class &#39;float&#39;&gt;</code></td>
<td align="center"><code>3.149, 11.11</code></td>
</tr>
<tr>
<td align="center">bool</td>
<td align="center">布尔型<code>&lt;class &#39;bool&#39;&gt;</code></td>
<td align="center"><code>True, False</code></td>
</tr>
</tbody></table>
<p><b>整型</b></p>
<p>【例子】通过 <code>print()</code> 可看出 <code>a</code> 的值，以及类 (class) 是<code>int</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1031</span></span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">type</span>(a))</span><br><span class="line"><span class="comment"># 1031 &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>1031 &lt;class &#39;int&#39;&gt;
</code></pre>
<p>Python 里面万物皆对象（object），整型也不例外，只要是对象，就有相应的属性 （attributes） 和方法（methods）。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="built_in">dir</span>(<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;__abs__&#x27;, &#x27;__add__&#x27;, &#x27;__and__&#x27;, &#x27;__bool__&#x27;, &#x27;__ceil__&#x27;, &#x27;__class__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__delattr__&#x27;, &#x27;__dir__&#x27;, &#x27;__divmod__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__float__&#x27;, &#x27;__floor__&#x27;, &#x27;__floordiv__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__getattribute__&#x27;, &#x27;__getnewargs__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__index__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__int__&#x27;, &#x27;__invert__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__le__&#x27;, &#x27;__lshift__&#x27;, &#x27;__lt__&#x27;, &#x27;__mod__&#x27;, &#x27;__mul__&#x27;, &#x27;__ne__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__neg__&#x27;, &#x27;__new__&#x27;, &#x27;__or__&#x27;, &#x27;__pos__&#x27;, &#x27;__pow__&#x27;, &#x27;__radd__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__rand__&#x27;, &#x27;__rdivmod__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__rfloordiv__&#x27;, &#x27;__rlshift__&#x27;, &#x27;__rmod__&#x27;, &#x27;__rmul__&#x27;, &#x27;__ror__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__round__&#x27;, &#x27;__rpow__&#x27;, &#x27;__rrshift__&#x27;, &#x27;__rshift__&#x27;, &#x27;__rsub__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__rtruediv__&#x27;, &#x27;__rxor__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;__sub__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__truediv__&#x27;, &#x27;__trunc__&#x27;, &#x27;__xor__&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;bit_length&#x27;, &#x27;conjugate&#x27;, &#x27;denominator&#x27;, &#x27;from_bytes&#x27;, &#x27;imag&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;numerator&#x27;, &#x27;real&#x27;, &#x27;to_bytes&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__bool__&#39;, &#39;__ceil__&#39;, &#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__float__&#39;, &#39;__floor__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__index__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__int__&#39;, &#39;__invert__&#39;, &#39;__le__&#39;, &#39;__lshift__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rlshift__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rrshift__&#39;, &#39;__rshift__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__trunc__&#39;, &#39;__xor__&#39;, &#39;bit_length&#39;, &#39;conjugate&#39;, &#39;denominator&#39;, &#39;from_bytes&#39;, &#39;imag&#39;, &#39;numerator&#39;, &#39;real&#39;, &#39;to_bytes&#39;]
</code></pre>
<p>对它们有个大概印象就可以了，具体怎么用，需要哪些参数 （argument），还需要查文档。看个<code>bit_length()</code>的例子。</p>
<p>【例子】找到一个整数的二进制表示，再返回其长度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1031</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a))  <span class="comment"># 0b10000000111</span></span><br><span class="line"><span class="built_in">print</span>(a.bit_length())  <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>

<pre><code>0b10000000111

11
</code></pre>
<p><b>浮点型</b></p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="built_in">type</span>(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 1 &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.</span>, <span class="built_in">type</span>(<span class="number">1.</span>))</span><br><span class="line"><span class="comment"># 1.0 &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0.00000023</span></span><br><span class="line">b = <span class="number">2.3e-7</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2.3e-07</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 2.3e-07</span></span><br></pre></td></tr></table></figure>

<pre><code>1 &lt;class &#39;int&#39;&gt;

1.0 &lt;class &#39;float&#39;&gt;

2.3e-07

2.3e-07
</code></pre>
<p>有时候我们想保留浮点型的小数点后 <code>n</code> 位。可以用 <code>decimal</code> 包里的 <code>Decimal</code> 对象和 <code>getcontext()</code> 方法来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br></pre></td></tr></table></figure>


<p>Python 里面有很多用途广泛的包 (package)，用什么你就引进 (import) 什么。包也是对象，也可以用上面提到的<code>dir(decimal)</code> 来看其属性和方法。</p>
<p>【例子】<code>getcontext()</code> 显示了 <code>Decimal</code> 对象的默认精度值是 28 位 (<code>prec=28</code>)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = decimal.getcontext()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999,</span></span><br><span class="line"><span class="comment"># capitals=1, clamp=0, flags=[], </span></span><br><span class="line"><span class="comment"># traps=[InvalidOperation, DivisionByZero, Overflow])</span></span><br></pre></td></tr></table></figure>

<pre><code>Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = Decimal(<span class="number">1</span>) / Decimal(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.3333333333333333333333333333</span></span><br></pre></td></tr></table></figure>

<pre><code>0.3333333333333333333333333333
</code></pre>
<p>【例子】使 1&#x2F;3 保留 4 位，用 <code>getcontext().prec</code> 来调整精度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">decimal.getcontext().prec = <span class="number">4</span></span><br><span class="line">c = Decimal(<span class="number">1</span>) / Decimal(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.3333</span></span><br></pre></td></tr></table></figure>

<pre><code>0.3333
</code></pre>
<p><b>布尔型</b></p>
<p>布尔 (boolean) 型变量只能取两个值，<code>True</code> 和 <code>False</code>。当把布尔型变量用在数字运算中，用 <code>1</code> 和 <code>0</code> 代表 <code>True</code> 和 <code>False</code>。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> + <span class="literal">True</span>)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> + <span class="literal">False</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> * <span class="literal">False</span>)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<pre><code>2

1

0
</code></pre>
<p>除了直接给变量赋值 <code>True</code> 和 <code>False</code>，还可以用 <code>bool(X)</code> 来创建变量，其中 <code>X</code> 可以是</p>
<ul>
<li>基本类型：整型、浮点型、布尔型</li>
<li>容器类型：字符串、元组、列表、字典和集合</li>
</ul>
<p>【例子】<code>bool</code> 作用在基本类型变量：<code>X</code> 只要不是整型 <code>0</code>、浮点型 <code>0.0</code>，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">0</span>), <span class="built_in">bool</span>(<span class="number">0</span>), <span class="built_in">bool</span>(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># &lt;class &#x27;int&#x27;&gt; False True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10.31</span>), <span class="built_in">bool</span>(<span class="number">0.00</span>), <span class="built_in">bool</span>(<span class="number">10.31</span>))</span><br><span class="line"><span class="comment"># &lt;class &#x27;float&#x27;&gt; False True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">True</span>), <span class="built_in">bool</span>(<span class="literal">False</span>), <span class="built_in">bool</span>(<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># &lt;class &#x27;bool&#x27;&gt; False True</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;int&#39;&gt; False True

&lt;class &#39;float&#39;&gt; False True

&lt;class &#39;bool&#39;&gt; False True
</code></pre>
<p>【例子】<code>bool</code> 作用在容器类型变量：<code>X</code> 只要不是空的变量，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;&#x27;</span>), <span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>), <span class="built_in">bool</span>(<span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt; False True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(()), <span class="built_in">bool</span>(()), <span class="built_in">bool</span>((<span class="number">10</span>,)))</span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt; False True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>([]), <span class="built_in">bool</span>([]), <span class="built_in">bool</span>([<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="comment"># &lt;class &#x27;list&#x27;&gt; False True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(&#123;&#125;), <span class="built_in">bool</span>(&#123;&#125;), <span class="built_in">bool</span>(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;))</span><br><span class="line"><span class="comment"># &lt;class &#x27;dict&#x27;&gt; False True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">set</span>()), <span class="built_in">bool</span>(<span class="built_in">set</span>()), <span class="built_in">bool</span>(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;))</span><br><span class="line"><span class="comment"># &lt;class &#x27;set&#x27;&gt; False True</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;str&#39;&gt; False True

&lt;class &#39;tuple&#39;&gt; False True

&lt;class &#39;list&#39;&gt; False True

&lt;class &#39;dict&#39;&gt; False True

&lt;class &#39;set&#39;&gt; False True
</code></pre>
<p>确定<code>bool(X)</code> 的值是 <code>True</code> 还是 <code>False</code>，就看 <code>X</code> 是不是空，空的话就是 <code>False</code>，不空的话就是 <code>True</code>。</p>
<ul>
<li>对于数值变量，<code>0</code>, <code>0.0</code> 都可认为是空的。</li>
<li>对于容器变量，里面没元素就是空的。</li>
</ul>
<p><b>获取类型信息</b></p>
<ul>
<li>获取类型信息 <code>type(object)</code></li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">1</span>, <span class="built_in">int</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">5.2</span>, <span class="built_in">float</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="literal">True</span>, <span class="built_in">bool</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;5.2&#x27;</span>, <span class="built_in">str</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<pre><code>True

True

True

True
</code></pre>
<p>注：</p>
<ul>
<li><code>type()</code> 不会认为子类是一种父类类型，不考虑继承关系。</li>
<li><code>isinstance()</code> 会认为子类是一种父类类型，考虑继承关系。</li>
</ul>
<p>如果要判断两个类型是否相同推荐使用 <code>isinstance()</code>。</p>
<p><strong>类型转换</strong></p>
<ul>
<li>转换为整型 <code>int(x, base=10)</code></li>
<li>转换为字符串 <code>str(object=&#39;&#39;)</code></li>
<li>转换为浮点型 <code>float(x)</code></li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;520&#x27;</span>))  <span class="comment"># 520</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">520.52</span>))  <span class="comment"># 520</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&#x27;520.52&#x27;</span>))  <span class="comment"># 520.52</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">520</span>))  <span class="comment"># 520.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">10</span> + <span class="number">10</span>))  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">10.1</span> + <span class="number">5.2</span>))  <span class="comment"># 15.3</span></span><br></pre></td></tr></table></figure>

<pre><code>520

520

520.52

520.0

20

15.3
</code></pre>
<h2 id="5-print-函数"><a href="#5-print-函数" class="headerlink" title="5. print() 函数"></a>5. print() 函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(*objects, sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按<code>str()</code>方式进行转换为字符串输出；</li>
<li>关键字参数<code>sep</code>是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li>
<li>关键字参数<code>end</code>是输出结束时的字符，默认是换行符<code>\n</code>；</li>
<li>关键字参数<code>file</code>是定义流输出的文件，可以是标准的系统输出<code>sys.stdout</code>，也可以重定义为别的文件；</li>
<li>关键字参数<code>flush</code>是立即把内容输出到流文件，不作缓存。</li>
</ul>
<p>【例子】没有参数时，每次输出后都会换行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shoplist = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>, <span class="string">&#x27;carrot&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;This is printed without &#x27;end&#x27;and &#x27;sep&#x27;.&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> shoplist:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is printed without &#x27;end&#x27;and &#x27;sep&#x27;.</span></span><br><span class="line"><span class="comment"># apple</span></span><br><span class="line"><span class="comment"># mango</span></span><br><span class="line"><span class="comment"># carrot</span></span><br><span class="line"><span class="comment"># banana</span></span><br></pre></td></tr></table></figure>

<pre><code>This is printed without &#39;end&#39;and &#39;sep&#39;.

apple

mango

carrot

banana
</code></pre>
<p>【例子】每次输出结束都用<code>end</code>设置的参数<code>&amp;</code>结尾，并没有默认换行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shoplist = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>, <span class="string">&#x27;carrot&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;This is printed with &#x27;end=&#x27;&amp;&#x27;&#x27;.&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> shoplist:</span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is printed with &#x27;end=&#x27;&amp;&#x27;&#x27;.</span></span><br><span class="line"><span class="comment"># apple&amp;mango&amp;carrot&amp;banana&amp;hello world</span></span><br></pre></td></tr></table></figure>

<pre><code>This is printed with &#39;end=&#39;&amp;&#39;&#39;.

apple&amp;mango&amp;carrot&amp;banana&amp;hello world
</code></pre>
<p>【例子】<code>item</code>值与<code>&#39;another string&#39;</code>两个值之间用<code>sep</code>设置的参数<code>&amp;</code>分割。由于<code>end</code>参数没有设置，因此默认是输出解释后换行，即<code>end</code>参数的默认值为<code>\n</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shoplist = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>, <span class="string">&#x27;carrot&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;This is printed with &#x27;sep=&#x27;&amp;&#x27;&#x27;.&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> shoplist:</span><br><span class="line">    <span class="built_in">print</span>(item, <span class="string">&#x27;another string&#x27;</span>, sep=<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is printed with &#x27;sep=&#x27;&amp;&#x27;&#x27;.</span></span><br><span class="line"><span class="comment"># apple&amp;another string</span></span><br><span class="line"><span class="comment"># mango&amp;another string</span></span><br><span class="line"><span class="comment"># carrot&amp;another string</span></span><br><span class="line"><span class="comment"># banana&amp;another string</span></span><br></pre></td></tr></table></figure>

<pre><code>This is printed with &#39;sep=&#39;&amp;&#39;&#39;.

apple&amp;another string

mango&amp;another string

carrot&amp;another string

banana&amp;another string
</code></pre>
<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="1-原码、反码和补码"><a href="#1-原码、反码和补码" class="headerlink" title="1. 原码、反码和补码"></a>1. 原码、反码和补码</h2><p>二进制有三种不同的表示形式：原码、反码和补码，<u>计算机内部使用补码来表示</u>。</p>
<p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; -<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">11</span> <span class="number">00</span> -&gt; -<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码+1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">11</span> 01 -&gt; -<span class="number">3</span></span><br></pre></td></tr></table></figure>


<p><strong>符号位</strong>：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。</p>
<h2 id="2-按位运算"><a href="#2-按位运算" class="headerlink" title="2. 按位运算"></a>2. 按位运算</h2><ul>
<li>按位非操作 ~</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line">~ <span class="number">0</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><code>~</code> 把<code>num</code>的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在 <code>~</code> 运算中同样会取反。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">~</span><br><span class="line">---</span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">10</span> <span class="number">10</span> -&gt; -<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">10</span> <span class="number">11</span> -&gt; -<span class="number">5</span></span><br><span class="line">~</span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">00</span> -&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure>

<ul>
<li>按位与操作 &amp;</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &amp; <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>只有两个对应位都为 1 时才为 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">10</span> -&gt; <span class="number">6</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">00</span> -&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure>

<ul>
<li>按位或操作 |</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> | <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> | <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> | <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> | <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>只要两个对应位中有一个 1 时就为 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">|</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">10</span> -&gt; <span class="number">6</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">11</span> -&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure>

<ul>
<li>按位异或操作 ^</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>只有两个对应位不同时才为 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">^</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">10</span> -&gt; <span class="number">6</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>异或操作的性质：满足交换律和结合律</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A: <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span></span><br><span class="line">B: <span class="number">00</span> <span class="number">00</span> 01 <span class="number">11</span></span><br><span class="line"></span><br><span class="line">A^B: <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">B^A: <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line">A^A: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">A^<span class="number">0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line">A^B^A: = A^A^B = B = <span class="number">00</span> <span class="number">00</span> 01 <span class="number">11</span></span><br></pre></td></tr></table></figure>


<ul>
<li>按位左移操作 &lt;&lt;</li>
</ul>
<p><code>num &lt;&lt; i</code> 将<code>num</code>的二进制表示向左移动<code>i</code>位所得的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span> -&gt; <span class="number">11</span></span><br><span class="line"><span class="number">11</span> &lt;&lt; <span class="number">3</span></span><br><span class="line">---</span><br><span class="line">01 01 <span class="number">10</span> <span class="number">00</span> -&gt; <span class="number">88</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>按位右移操作 &gt;&gt;</li>
</ul>
<p><code>num &gt;&gt; i</code> 将<code>num</code>的二进制表示向右移动<code>i</code>位所得的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span> -&gt; <span class="number">11</span></span><br><span class="line"><span class="number">11</span> &gt;&gt; <span class="number">2</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> -&gt; <span class="number">2</span> </span><br></pre></td></tr></table></figure>

<h2 id="3-利用位运算实现快速计算"><a href="#3-利用位运算实现快速计算" class="headerlink" title="3. 利用位运算实现快速计算"></a>3. 利用位运算实现快速计算</h2><p>通过 <code>&lt;&lt;</code>，<code>&gt;&gt;</code> 快速计算2的倍数问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n &lt;&lt; <span class="number">1</span> -&gt; 计算 n*<span class="number">2</span></span><br><span class="line">n &gt;&gt; <span class="number">1</span> -&gt; 计算 n/<span class="number">2</span>，负奇数的运算不可用</span><br><span class="line">n &lt;&lt; m -&gt; 计算 n*(<span class="number">2</span>^m)，即乘以 <span class="number">2</span> 的 m 次方</span><br><span class="line">n &gt;&gt; m -&gt; 计算 n/(<span class="number">2</span>^m)，即除以 <span class="number">2</span> 的 m 次方</span><br><span class="line"><span class="number">1</span> &lt;&lt; n -&gt; <span class="number">2</span>^n</span><br></pre></td></tr></table></figure>


<p>通过 <code>^</code> 快速交换两个整数。<br>通过 <code>^</code> 快速交换两个整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br></pre></td></tr></table></figure>

<p>通过 <code>a &amp; (-a)</code> 快速获取<code>a</code>的最后为 1 位置的整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">10</span> <span class="number">11</span> -&gt; -<span class="number">5</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 01 -&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">10</span> -&gt; <span class="number">14</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">00</span> <span class="number">10</span> -&gt; -<span class="number">14</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> -&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="4-利用位运算实现整数集合"><a href="#4-利用位运算实现整数集合" class="headerlink" title="4. 利用位运算实现整数集合"></a>4. 利用位运算实现整数集合</h2><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p>
<p>比如集合 <code>&#123;1, 3, 4, 8&#125;</code>，可以表示成 <code>01 00 01 10 10</code> 而对应的位运算也就可以看作是对集合进行的操作。</p>
<p>元素与集合的操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a | (<span class="number">1</span>&lt;&lt;i)  -&gt; 把 i 插入到集合中</span><br><span class="line">a &amp; ~(<span class="number">1</span>&lt;&lt;i) -&gt; 把 i 从集合中删除</span><br><span class="line">a &amp; (<span class="number">1</span>&lt;&lt;i)  -&gt; 判断 i 是否属于该集合（零不属于，非零属于）</span><br></pre></td></tr></table></figure>

<p>集合之间的操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a 补   -&gt; ~a</span><br><span class="line">a 交 b -&gt; a &amp; b</span><br><span class="line">a 并 b -&gt; a | b</span><br><span class="line">a 差 b -&gt; a &amp; (~b)</span><br></pre></td></tr></table></figure>


<p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p>
<p>【例子】C#语言输出负数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        string s1 = Convert.ToString(-<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        Console.WriteLine(s1); </span><br><span class="line">        // <span class="number">11111111111111111111111111111101</span></span><br><span class="line">        </span><br><span class="line">        string s2 = Convert.ToString(-<span class="number">3</span>, <span class="number">16</span>);</span><br><span class="line">        Console.WriteLine(s2); </span><br><span class="line">        // fffffffd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>【例子】 Python 的<code>bin()</code> 输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">3</span>))  <span class="comment"># 0b11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(-<span class="number">3</span>))  <span class="comment"># -0b11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(-<span class="number">3</span> &amp; <span class="number">0xffffffff</span>))  </span><br><span class="line"><span class="comment"># 0b11111111111111111111111111111101</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">0xfffffffd</span>))       </span><br><span class="line"><span class="comment"># 0b11111111111111111111111111111101</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0xfffffffd</span>)  <span class="comment"># 4294967293</span></span><br></pre></td></tr></table></figure>

<pre><code>0b11

-0b11

0b11111111111111111111111111111101

0b11111111111111111111111111111101

4294967293
</code></pre>
<p>是不是很颠覆认知，我们从结果可以看出：</p>
<ul>
<li>Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</li>
<li>Python中的整型是补码形式存储的。</li>
<li>Python中整型是不限制长度的不会超范围溢出。</li>
</ul>
<p>所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数<code>0xffffffff</code>进行按位与操作，再交给<code>bin()</code>进行输出，得到的才是负数的补码表示。</p>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="1-if-语句"><a href="#1-if-语句" class="headerlink" title="1. if 语句"></a>1. if 语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    expr_true_suite</span><br></pre></td></tr></table></figure>

<ul>
<li>if 语句的 <code>expr_true_suite</code> 代码块只有当条件表达式 <code>expression</code> 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。</li>
<li>单个 if 语句中的 <code>expression</code> 条件表达式可以通过布尔操作符 <code>and</code>，<code>or</code>和<code>not</code> 实现多重条件判断。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="number">2</span> &gt; <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Correct Judgement!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Correct Judgement!</span></span><br></pre></td></tr></table></figure>

<pre><code>Correct Judgement!
</code></pre>
<h2 id="2-if-else-语句"><a href="#2-if-else-语句" class="headerlink" title="2. if - else 语句"></a>2. if - else 语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    expr_true_suite</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    expr_false_suite</span><br></pre></td></tr></table></figure>
<ul>
<li>Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>(<span class="string">&quot;猜一猜小姐姐想的是哪个数字？&quot;</span>)</span><br><span class="line">guess = <span class="built_in">int</span>(temp) <span class="comment"># input 函数将接收的任何数据类型都默认为 str。</span></span><br><span class="line"><span class="keyword">if</span> guess == <span class="number">666</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你太了解小姐姐的心思了！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;哼，猜对也没有奖励！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜错了，小姐姐现在心里想的是666！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏结束，不玩儿啦！&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>猜一猜小姐姐想的是哪个数字？666

你太了解小姐姐的心思了！

哼，猜对也没有奖励！

游戏结束，不玩儿啦！
</code></pre>
<p><code>if</code>语句支持嵌套，即在一个<code>if</code>语句中嵌入另一个<code>if</code>语句，从而构成不同层次的选择结构。</p>
<p>【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意<code>else</code>的悬挂问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hi = <span class="number">6</span></span><br><span class="line"><span class="keyword">if</span> hi &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">if</span> hi &gt; <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;好棒!好棒!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;切~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure>



<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>(<span class="string">&quot;猜一猜小姐姐想的是哪个数字？&quot;</span>)</span><br><span class="line">guess = <span class="built_in">int</span>(temp)</span><br><span class="line"><span class="keyword">if</span> guess &gt; <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;大了，大了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> guess == <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你太了解小姐姐的心思了！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;哼，猜对也没有奖励！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小了，小了&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏结束，不玩儿啦！&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>猜一猜小姐姐想的是哪个数字？8

你太了解小姐姐的心思了！

哼，猜对也没有奖励！

游戏结束，不玩儿啦！
</code></pre>
<h2 id="3-if-elif-else-语句"><a href="#3-if-elif-else-语句" class="headerlink" title="3. if - elif - else 语句"></a>3. if - elif - else 语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression1:</span><br><span class="line">    expr1_true_suite</span><br><span class="line"><span class="keyword">elif</span> expression2:</span><br><span class="line">    expr2_true_suite</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"><span class="keyword">elif</span> expressionN:</span><br><span class="line">    exprN_true_suite</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    expr_false_suite</span><br></pre></td></tr></table></figure>

<ul>
<li>elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>(<span class="string">&#x27;请输入成绩:&#x27;</span>)</span><br><span class="line">source = <span class="built_in">int</span>(temp)</span><br><span class="line"><span class="keyword">if</span> <span class="number">100</span> &gt;= source &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">90</span> &gt; source &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &gt; source &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &gt; source &gt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入错误！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>请输入成绩:99

A
</code></pre>
<h2 id="4-assert-关键词"><a href="#4-assert-关键词" class="headerlink" title="4. assert 关键词"></a>4. assert 关键词</h2><ul>
<li><code>assert</code>这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出<code>AssertionError</code>的异常。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">&#x27;lsgogroup&#x27;</span>]</span><br><span class="line">my_list.pop(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(my_list) &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AssertionError</span></span><br></pre></td></tr></table></figure>

<p>【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">3</span> &gt; <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AssertionError</span></span><br></pre></td></tr></table></figure>

<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="1-while-循环"><a href="#1-while-循环" class="headerlink" title="1. while 循环"></a>1. while 循环</h2><p><code>while</code>语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于<code>while</code>代码块的缩进语句。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 布尔表达式:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<p><code>while</code>循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。</p>
<p>如果布尔表达式不带有<code>&lt;、&gt;、==、！=、in、not in</code>等运算符，仅仅给出数值之类的条件，也是可以的。当<code>while</code>后写入一个非零整数时，视为真值，执行循环体；写入<code>0</code>时，视为假值，不执行循环体。也可以写入<code>str、list</code>或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    temp = <span class="built_in">input</span>(<span class="string">&quot;猜一猜小姐姐想的是哪个数字？&quot;</span>)</span><br><span class="line">    guess = <span class="built_in">int</span>(temp)</span><br><span class="line">    <span class="keyword">if</span> guess &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;大了，大了&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> guess == <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你太了解小姐姐的心思了！&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;哼，猜对也没有奖励！&quot;</span>)</span><br><span class="line">            count = <span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;小了，小了&quot;</span>)</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏结束，不玩儿啦！&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>猜一猜小姐姐想的是哪个数字？8

你太了解小姐姐的心思了！

哼，猜对也没有奖励！

游戏结束，不玩儿啦！
</code></pre>
<p>【例子】布尔表达式返回0，循环终止。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"><span class="keyword">while</span> string:</span><br><span class="line">    <span class="built_in">print</span>(string)</span><br><span class="line">    string = string[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># abcd</span></span><br><span class="line"><span class="comment"># bcd</span></span><br><span class="line"><span class="comment"># cd</span></span><br><span class="line"><span class="comment"># d</span></span><br></pre></td></tr></table></figure>

<pre><code>abcd

bcd

cd

d
</code></pre>
<hr>
<h2 id="2-while-else-循环"><a href="#2-while-else-循环" class="headerlink" title="2. while - else 循环"></a>2. while - else 循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 布尔表达式:</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<p>当<code>while</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>while</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容。    </p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is  less than 5&quot;</span> % count)</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is not less than 5&quot;</span> % count)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 0 is  less than 5</span></span><br><span class="line"><span class="comment"># 1 is  less than 5</span></span><br><span class="line"><span class="comment"># 2 is  less than 5</span></span><br><span class="line"><span class="comment"># 3 is  less than 5</span></span><br><span class="line"><span class="comment"># 4 is  less than 5</span></span><br><span class="line"><span class="comment"># 5 is not less than 5</span></span><br></pre></td></tr></table></figure>

<pre><code>0 is  less than 5

1 is  less than 5

2 is  less than 5

3 is  less than 5

4 is  less than 5

5 is not less than 5
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is  less than 5&quot;</span> % count)</span><br><span class="line">    count = <span class="number">6</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is not less than 5&quot;</span> % count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 is  less than 5</span></span><br></pre></td></tr></table></figure>

<pre><code>0 is  less than 5
</code></pre>
<hr>
<h2 id="3-for-循环"><a href="#3-for-循环" class="headerlink" title="3. for 循环"></a>3. for 循环</h2><p><code>for</code>循环是迭代循环，在Python中相当于一个通用的序列迭代器，可以遍历任何有序序列，如<code>str、list、tuple</code>等，也可以遍历任何可迭代对象，如<code>dict</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>
<p>每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;ILoveLSGO&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 不换行输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I L o v e L S G O</span></span><br></pre></td></tr></table></figure>

<pre><code>I L o v e L S G O 
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">member = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;刘德华&#x27;</span>, <span class="string">&#x27;刘六&#x27;</span>, <span class="string">&#x27;周润发&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> member:</span><br><span class="line">    <span class="built_in">print</span>(each)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 张三</span></span><br><span class="line"><span class="comment"># 李四</span></span><br><span class="line"><span class="comment"># 刘德华</span></span><br><span class="line"><span class="comment"># 刘六</span></span><br><span class="line"><span class="comment"># 周润发</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(member)):</span><br><span class="line">    <span class="built_in">print</span>(member[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 张三</span></span><br><span class="line"><span class="comment"># 李四</span></span><br><span class="line"><span class="comment"># 刘德华</span></span><br><span class="line"><span class="comment"># 刘六</span></span><br><span class="line"><span class="comment"># 周润发</span></span><br></pre></td></tr></table></figure>

<pre><code>张三

李四

刘德华

刘六

周润发

张三

李四

刘德华

刘六

周润发
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dic.items():</span><br><span class="line">    <span class="built_in">print</span>(key, value, sep=<span class="string">&#x27;:&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># a:1 b:2 c:3 d:4 </span></span><br></pre></td></tr></table></figure>

<pre><code>a:1 b:2 c:3 d:4 
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic.keys():</span><br><span class="line">    <span class="built_in">print</span>(key, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># a b c d </span></span><br></pre></td></tr></table></figure>

<pre><code>a b c d 
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dic.values():</span><br><span class="line">    <span class="built_in">print</span>(value, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 1 2 3 4</span></span><br></pre></td></tr></table></figure>

<pre><code>1 2 3 4 
</code></pre>
<hr>
<h2 id="4-for-else-循环"><a href="#4-for-else-循环" class="headerlink" title="4. for - else 循环"></a>4. for - else 循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<p>当<code>for</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>for</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容，与<code>while - else</code>语句一样。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">20</span>):  <span class="comment"># 迭代 10 到 20 之间的数字</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):  <span class="comment"># 根据因子迭代</span></span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:  <span class="comment"># 确定第一个因子</span></span><br><span class="line">            j = num / i  <span class="comment"># 计算第二个因子</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%d 等于 %d * %d&#x27;</span> % (num, i, j))</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 跳出当前循环</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 循环的 else 部分</span></span><br><span class="line">        <span class="built_in">print</span>(num, <span class="string">&#x27;是一个质数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10 等于 2 * 5</span></span><br><span class="line"><span class="comment"># 11 是一个质数</span></span><br><span class="line"><span class="comment"># 12 等于 2 * 6</span></span><br><span class="line"><span class="comment"># 13 是一个质数</span></span><br><span class="line"><span class="comment"># 14 等于 2 * 7</span></span><br><span class="line"><span class="comment"># 15 等于 3 * 5</span></span><br><span class="line"><span class="comment"># 16 等于 2 * 8</span></span><br><span class="line"><span class="comment"># 17 是一个质数</span></span><br><span class="line"><span class="comment"># 18 等于 2 * 9</span></span><br><span class="line"><span class="comment"># 19 是一个质数</span></span><br></pre></td></tr></table></figure>

<pre><code>10 等于 2 * 5

11 是一个质数

12 等于 2 * 6

13 是一个质数

14 等于 2 * 7

15 等于 3 * 5

16 等于 2 * 8

17 是一个质数

18 等于 2 * 9

19 是一个质数
</code></pre>
<hr>
<h2 id="5-range-函数"><a href="#5-range-函数" class="headerlink" title="5. range() 函数"></a>5. range() 函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>([start,] stop[, step=<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<ul>
<li>这个BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。</li>
<li><code>step=1</code> 表示第三个参数的默认值是1。</li>
<li><code>range</code> 这个BIF的作用是生成一个从<code>start</code>参数的值开始到<code>stop</code>参数的值结束的数字序列，该序列包含<code>start</code>的值但不包含<code>stop</code>的值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>):  <span class="comment"># 不包含9</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure>

<pre><code>2

3

4

5

6

7

8
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 9</span></span><br></pre></td></tr></table></figure>

<pre><code>1

3

5

7

9
</code></pre>
<hr>
<h2 id="6-enumerate-函数"><a href="#6-enumerate-函数" class="headerlink" title="6. enumerate()函数"></a>6. enumerate()函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(sequence, [start=<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<ul>
<li>sequence：一个序列、迭代器或其他支持迭代对象。</li>
<li>start：下标起始位置。</li>
<li>返回 enumerate(枚举) 对象</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seasons = [<span class="string">&#x27;Spring&#x27;</span>, <span class="string">&#x27;Summer&#x27;</span>, <span class="string">&#x27;Fall&#x27;</span>, <span class="string">&#x27;Winter&#x27;</span>]</span><br><span class="line">lst = <span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons))</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># [(0, &#x27;Spring&#x27;), (1, &#x27;Summer&#x27;), (2, &#x27;Fall&#x27;), (3, &#x27;Winter&#x27;)]</span></span><br><span class="line">lst = <span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons, start=<span class="number">1</span>))  <span class="comment"># 下标从 1 开始</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># [(1, &#x27;Spring&#x27;), (2, &#x27;Summer&#x27;), (3, &#x27;Fall&#x27;), (4, &#x27;Winter&#x27;)]</span></span><br></pre></td></tr></table></figure>

<pre><code>[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]

[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]
</code></pre>
<p><code>enumerate()</code>与 for 循环的结合使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, a <span class="keyword">in</span> <span class="built_in">enumerate</span>(A)</span><br><span class="line">    do something <span class="keyword">with</span> a  </span><br></pre></td></tr></table></figure>
<p>用 <code>enumerate(A)</code> 不仅返回了 <code>A</code> 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用 <code>enumerate(A, j)</code> 还可以确定索引起始值为 <code>j</code>。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">languages = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Matlab&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I love&#x27;</span>, language)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done!&#x27;</span>)</span><br><span class="line"><span class="comment"># I love Python</span></span><br><span class="line"><span class="comment"># I love R</span></span><br><span class="line"><span class="comment"># I love Matlab</span></span><br><span class="line"><span class="comment"># I love C++</span></span><br><span class="line"><span class="comment"># Done!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, language <span class="keyword">in</span> <span class="built_in">enumerate</span>(languages, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, <span class="string">&#x27;I love&#x27;</span>, language)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done!&#x27;</span>)</span><br><span class="line"><span class="comment"># 2 I love Python</span></span><br><span class="line"><span class="comment"># 3 I love R</span></span><br><span class="line"><span class="comment"># 4 I love Matlab</span></span><br><span class="line"><span class="comment"># 5 I love C++</span></span><br><span class="line"><span class="comment"># Done!</span></span><br></pre></td></tr></table></figure>

<pre><code>I love Python

I love R

I love Matlab

I love C++

Done!

2 I love Python

3 I love R

4 I love Matlab

5 I love C++

Done!
</code></pre>
<hr>
<h2 id="7-break-语句"><a href="#7-break-语句" class="headerlink" title="7. break 语句"></a>7. break 语句</h2><p><code>break</code>语句可以跳出当前所在层的循环。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">secret = random.randint(<span class="number">1</span>, <span class="number">10</span>) <span class="comment">#[1,10]之间的随机数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    temp = <span class="built_in">input</span>(<span class="string">&quot;猜一猜小姐姐想的是哪个数字？&quot;</span>)</span><br><span class="line">    guess = <span class="built_in">int</span>(temp)</span><br><span class="line">    <span class="keyword">if</span> guess &gt; secret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;大了，大了&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> guess == secret:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你太了解小姐姐的心思了！&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;哼，猜对也没有奖励！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;小了，小了&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏结束，不玩儿啦！&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>猜一猜小姐姐想的是哪个数字？8

你太了解小姐姐的心思了！

哼，猜对也没有奖励！

游戏结束，不玩儿啦！
</code></pre>
<hr>
<h2 id="8-continue-语句"><a href="#8-continue-语句" class="headerlink" title="8. continue 语句"></a>8. continue 语句</h2><p><code>continue</code>终止本轮循环并开始下一轮循环。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 9</span></span><br></pre></td></tr></table></figure>

<pre><code>2

1

4

3

6

5

8

7

10

9
</code></pre>
<hr>
<h2 id="9-pass-语句"><a href="#9-pass-语句" class="headerlink" title="9. pass 语句"></a>9. pass 语句</h2><p><code>pass</code> 语句的意思是“不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 <code>pass</code> 语句就是用来解决这些问题的。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_func</span>():</span><br><span class="line"></span><br><span class="line"><span class="comment"># SyntaxError: unexpected EOF while parsing</span></span><br></pre></td></tr></table></figure>

<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><code>pass</code>是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管<code>pass</code>语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个<code>pass</code>语句，让代码可以正常运行。</p>
<hr>
<h2 id="10-推导式"><a href="#10-推导式" class="headerlink" title="10. 推导式"></a>10. 推导式</h2><p><strong>列表推导式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[ expr <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] ]</span><br></pre></td></tr></table></figure>

<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [-<span class="number">4</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">y = [a * <span class="number">2</span> <span class="keyword">for</span> a <span class="keyword">in</span> x]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [-8, -4, 0, 4, 8]</span></span><br></pre></td></tr></table></figure>

<pre><code>[-8, -4, 0, 4, 8]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [(i, i ** <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</span></span><br></pre></td></tr></table></figure>

<pre><code>[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>) <span class="keyword">if</span> (i % <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">and</span> (i % <span class="number">3</span>) == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]</span></span><br></pre></td></tr></table></figure>

<pre><code>[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span></span><br></pre></td></tr></table></figure>

<pre><code>[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [[i, j] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span></span><br></pre></td></tr></table></figure>

<pre><code>[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]

[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>) <span class="keyword">if</span> i &lt; <span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>) <span class="keyword">if</span> j &gt; <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(0, 2)]</span></span><br></pre></td></tr></table></figure>

<pre><code>[(0, 2)]
</code></pre>
<p><strong>元组推导式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">( expr <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] )</span><br></pre></td></tr></table></figure>

<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x0000025BE511CC48&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;generator object &lt;genexpr&gt; at 0x0000014CEC2E28B8&gt;

(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
</code></pre>
<p><strong>字典推导式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] &#125;</span><br></pre></td></tr></table></figure>

<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = &#123;i: i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># &#123;0: True, 3: False, 6: True, 9: False&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;0: True, 3: False, 6: True, 9: False&#125;
</code></pre>
<p><strong>集合推导式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; expr for value in collection [if condition] &#125;</span><br></pre></td></tr></table></figure>

<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;1, 2, 3, 4, 5, 6&#125;
</code></pre>
<p><strong>其它</strong></p>
<ul>
<li><code>next(iterator[, default])</code> Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x0000007A0B8D01B0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(e))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(e))  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> e:</span><br><span class="line">    <span class="built_in">print</span>(each, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;generator object &lt;genexpr&gt; at 0x0000014CEC389C78&gt;

0

1

2 3 4 5 6 7 8 9 
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">sum</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)])</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 5050</span></span><br><span class="line">s = <span class="built_in">sum</span>((i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)))</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 5050</span></span><br></pre></td></tr></table></figure>

<pre><code>5050

5050
</code></pre>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。</p>
<h2 id="1-Python-标准异常总结"><a href="#1-Python-标准异常总结" class="headerlink" title="1. Python 标准异常总结"></a>1. Python 标准异常总结</h2><ul>
<li>BaseException：所有异常的 <strong>基类</strong></li>
<li>Exception：常规异常的 <strong>基类</strong></li>
<li>StandardError：所有的内建标准异常的基类</li>
<li>ArithmeticError：所有数值计算异常的基类</li>
<li>FloatingPointError：浮点计算异常</li>
<li><u>OverflowError</u>：数值运算超出最大限制</li>
<li><u>ZeroDivisionError</u>：除数为零</li>
<li><u>AssertionError</u>：断言语句（assert）失败</li>
<li><u>AttributeError</u>：尝试访问未知的对象属性</li>
<li>EOFError：没有内建输入，到达EOF标记</li>
<li>EnvironmentError：操作系统异常的基类</li>
<li>IOError：输入&#x2F;输出操作失败</li>
<li><u>OSError</u>：操作系统产生的异常（例如打开一个不存在的文件）</li>
<li>WindowsError：系统调用失败</li>
<li><u>ImportError</u>：导入模块失败的时候</li>
<li>KeyboardInterrupt：用户中断执行</li>
<li>LookupError：无效数据查询的基类</li>
<li><u>IndexError</u>：索引超出序列的范围</li>
<li><u>KeyError</u>：字典中查找一个不存在的关键字</li>
<li><u>MemoryError</u>：内存溢出（可通过删除对象释放内存）</li>
<li><u>NameError</u>：尝试访问一个不存在的变量</li>
<li>UnboundLocalError：访问未初始化的本地变量</li>
<li>ReferenceError：弱引用试图访问已经垃圾回收了的对象</li>
<li>RuntimeError：一般的运行时异常</li>
<li>NotImplementedError：尚未实现的方法</li>
<li><u>SyntaxError</u>：语法错误导致的异常</li>
<li>IndentationError：缩进错误导致的异常</li>
<li>TabError：Tab和空格混用</li>
<li>SystemError：一般的解释器系统异常</li>
<li><u>TypeError</u>：不同类型间的无效操作</li>
<li><u>ValueError</u>：传入无效的参数</li>
<li>UnicodeError：Unicode相关的异常</li>
<li>UnicodeDecodeError：Unicode解码时的异常</li>
<li>UnicodeEncodeError：Unicode编码错误导致的异常</li>
<li>UnicodeTranslateError：Unicode转换错误导致的异常</li>
</ul>
<p>异常体系内部有层次关系，Python异常体系中的部分关系如下所示：</p>
<p><img src="https://tianchi-public.oss-cn-hangzhou.aliyuncs.com/public/files/forum/162210513255214581622105132094.png"></p>
<hr>
<h2 id="2-Python标准警告总结"><a href="#2-Python标准警告总结" class="headerlink" title="2. Python标准警告总结"></a>2. Python标准警告总结</h2><ul>
<li>Warning：警告的基类</li>
<li>DeprecationWarning：关于被弃用的特征的警告</li>
<li>FutureWarning：关于构造将来语义会有改变的警告</li>
<li>UserWarning：用户代码生成的警告</li>
<li>PendingDeprecationWarning：关于特性将会被废弃的警告</li>
<li>RuntimeWarning：可疑的运行时行为(runtime behavior)的警告</li>
<li>SyntaxWarning：可疑语法的警告</li>
<li>ImportWarning：用于在导入模块过程中触发的警告</li>
<li>UnicodeWarning：与Unicode相关的警告</li>
<li>BytesWarning：与字节或字节码相关的警告</li>
<li>ResourceWarning：与资源使用相关的警告</li>
</ul>
<hr>
<h2 id="3-try-except-语句"><a href="#3-try-except-语句" class="headerlink" title="3. try - except 语句"></a>3. try - except 语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检测范围</span><br><span class="line"><span class="keyword">except</span> Exception[<span class="keyword">as</span> reason]:</span><br><span class="line">    出现异常后的处理代码</span><br></pre></td></tr></table></figure>

<p>try 语句按照如下方式工作：</p>
<ul>
<li>首先，执行<code>try</code>子句（在关键字<code>try</code>和关键字<code>except</code>之间的语句）</li>
<li>如果没有异常发生，忽略<code>except</code>子句，<code>try</code>子句执行后结束。</li>
<li>如果在执行<code>try</code>子句的过程中发生了异常，那么<code>try</code>子句余下的部分将被忽略。如果异常的类型和<code>except</code>之后的名称相符，那么对应的<code>except</code>子句将被执行。最后执行<code>try - except</code>语句之后的代码。</li>
<li>如果一个异常没有与任何的<code>except</code>匹配，那么这个异常将会传递给上层的<code>try</code>中。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> OSError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打开文件出错&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件出错</span></span><br></pre></td></tr></table></figure>

<pre><code>打开文件出错
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打开文件出错\n原因是：&#x27;</span> + <span class="built_in">str</span>(error))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件出错</span></span><br><span class="line"><span class="comment"># 原因是：[Errno 2] No such file or directory: &#x27;test.txt&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>打开文件出错

原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;
</code></pre>
<p>一个<code>try</code>语句可能包含多个<code>except</code>子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    s = <span class="number">1</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打开文件出错\n原因是：&#x27;</span> + <span class="built_in">str</span>(error))</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;类型出错\n原因是：&#x27;</span> + <span class="built_in">str</span>(error))</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;数值出错\n原因是：&#x27;</span> + <span class="built_in">str</span>(error))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值出错</span></span><br><span class="line"><span class="comment"># 原因是：invalid literal for int() with base 10: &#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>数值出错

原因是：invalid literal for int() with base 10: &#39;abc&#39;
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">22</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = dict1[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="keyword">except</span> LookupError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查询错误&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;键错误&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询错误</span></span><br></pre></td></tr></table></figure>

<pre><code>查询错误
</code></pre>
<p><code>try-except-else</code>语句尝试查询不在<code>dict</code>中的键值对，从而引发了异常。这一异常准确地说应属于<code>KeyError</code>，但由于<code>KeyError</code>是<code>LookupError</code>的子类，且将<code>LookupError</code>置于<code>KeyError</code>之前，因此程序优先执行该<code>except</code>代码块。所以，使用多个<code>except</code>代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">22</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = dict1[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;键错误&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> LookupError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查询错误&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键错误</span></span><br></pre></td></tr></table></figure>

<pre><code>键错误
</code></pre>
<p>【例子】一个 <code>except</code> 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = <span class="number">1</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="built_in">int</span>(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> (OSError, TypeError, ValueError) <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了！\n原因是：&#x27;</span> + <span class="built_in">str</span>(error))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出错了！</span></span><br><span class="line"><span class="comment"># 原因是：unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>出错了！

原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;
</code></pre>
<hr>
<h2 id="4-try-except-finally-语句"><a href="#4-try-except-finally-语句" class="headerlink" title="4. try - except - finally 语句"></a>4. try - except - finally 语句</h2><p>try:<br>    检测范围<br>except Exception[as reason]:<br>    出现异常后的处理代码<br>finally:<br>    无论如何都会被执行的代码</p>
<p>不管<code>try</code>子句里面有没有发生异常，<code>finally</code>子句都会执行。</p>
<p>【例子】如果一个异常在<code>try</code>子句里被抛出，而又没有任何的<code>except</code>把它截住，那么这个异常会在<code>finally</code>子句执行后被抛出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = x / y</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;result is&quot;</span>, result)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;division by zero!&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;executing finally clause&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">divide(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># result is 2.0</span></span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line">divide(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># division by zero!</span></span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line">divide(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line"><span class="comment"># TypeError: unsupported operand type(s) for /: &#x27;str&#x27; and &#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>result is 2.0

executing finally clause

division by zero!

executing finally clause
</code></pre>
<hr>
<h2 id="5-try-except-else-语句"><a href="#5-try-except-else-语句" class="headerlink" title="5. try - except - else 语句"></a>5. try - except - else 语句</h2><p>如果在<code>try</code>子句执行时没有发生异常，Python将执行<code>else</code>语句后的语句。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检测范围</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    出现异常后的处理代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    如果没有异常执行这块代码</span><br></pre></td></tr></table></figure>

<p>使用<code>except</code>而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。</p>
<p>try:<br>    检测范围<br>except(Exception1[, Exception2[,…ExceptionN]]]):<br>   发生以上多个异常中的一个，执行这块代码<br>else:<br>    如果没有异常执行这块代码</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fh = <span class="built_in">open</span>(<span class="string">&quot;testfile.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    fh.write(<span class="string">&quot;这是一个测试文件，用于测试异常!!&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error: 没有找到文件或读取文件失败&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;内容写入文件成功&quot;</span>)</span><br><span class="line">    fh.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容写入文件成功</span></span><br></pre></td></tr></table></figure>

<pre><code>内容写入文件成功
</code></pre>
<p>注意：<code>else</code>语句的存在必须以<code>except</code>语句的存在为前提，在没有<code>except</code>语句的<code>try</code>语句中使用<code>else</code>语句，会引发语法错误。</p>
<hr>
<h2 id="6-raise语句"><a href="#6-raise语句" class="headerlink" title="6. raise语句"></a>6. raise语句</h2><p>Python 使用<code>raise</code>语句抛出一个指定的异常。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">&#x27;HiThere&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;An exception flew by!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># An exception flew by!</span></span><br></pre></td></tr></table></figure>

<pre><code>An exception flew by!
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础（下）</title>
    <url>/2022/11/19/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<h1>Python基础(下)</h1>

<ol>
<li><p><a href="#%E7%AE%80%E4%BB%8B">简介</a></p>
</li>
<li><p><a href="#%E5%87%BD%E6%95%B0">函数</a><br><br><a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89">1. 函数的定义</a><br><br><a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8">2. 函数的调用</a><br><br><a href="#%E5%87%BD%E6%95%B0%E6%96%87%E6%A1%A3">3. 函数文档</a><br><br><a href="#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">4. 函数参数</a><br><br><a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC">5. 函数的返回值</a><br><br><a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F">6. 变量作用域</a><br></p>
</li>
<li><p><a href="#Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">Lambda-表达式</a><br><br><a href="#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89">1. 匿名函数的定义</a><br><br><a href="#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8">2. 匿名函数的应用</a><br></p>
</li>
<li><p><a href="#%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1">类与对象</a><br><br><a href="#%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E7%BB%84%E6%88%90%E5%AF%B9%E8%B1%A1">1. 属性和方法组成对象</a><br><br><a href="#self-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">2. self是什么？</a><br><br><a href="#Python-%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95">3. Python的魔法方法</a><br><br><a href="#%E5%85%AC%E6%9C%89%E5%92%8C%E7%A7%81%E6%9C%89">4. 公有和私有</a><br><br><a href="#%E7%BB%A7%E6%89%BF">5. 继承</a><br><br><a href="#%E7%BB%84%E5%90%88">6. 组合</a><br><br><a href="#%E7%B1%BB%E3%80%81%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1">7. 类、类对象和实例对象</a><br><br><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%91%E5%AE%9A%EF%BC%9F">8. 什么是绑定？</a><br><br><a href="#%E4%B8%80%E4%BA%9B%E7%9B%B8%E5%85%B3%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%EF%BC%88BIF%EF%BC%89">9. 一些相关的内置函数（BIF）</a><br></p>
</li>
<li><p><a href="#%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95">魔法方法</a><br><br><a href="#%E5%9F%BA%E6%9C%AC%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95">1. 基本的魔法方法</a><br><br><a href="#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6">2. 算术运算符</a><br><br><a href="#%E5%8F%8D%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6">3. 反算术运算符</a><br><br><a href="#%E5%A2%9E%E9%87%8F%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6">4. 增量赋值运算</a><br><br><a href="#%E4%B8%80%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6">5. 一元运算符</a><br><br><a href="#%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE">6. 属性访问</a><br><br><a href="#%E6%8F%8F%E8%BF%B0%E7%AC%A6">7. 描述符</a><br><br><a href="#%E5%AE%9A%E5%88%B6%E5%BA%8F%E5%88%97">8. 定制序列</a><br><br><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8">9. 迭代器</a><br></p>
</li>
</ol>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>
<p>本实验包括以下内容：</p>
<ul>
<li>函数<ul>
<li>函数的定义</li>
<li>函数的调用</li>
<li>函数文档</li>
<li>函数参数</li>
<li>函数的返回值</li>
<li>变量作用域</li>
</ul>
</li>
<li>Lambda 表达式<ul>
<li>匿名函数的定义</li>
<li>匿名函数的应用</li>
</ul>
</li>
<li>类与对象<ul>
<li>对象 &#x3D; 属性 + 方法</li>
<li>self 是什么？</li>
<li>Python 的魔法方法</li>
<li>公有和私有</li>
<li>继承</li>
<li>组合</li>
<li>类、类对象和实例对象</li>
<li>什么是绑定？</li>
<li>一些相关的内置函数（BIF）</li>
</ul>
</li>
<li>魔法方法<ul>
<li>基本的魔法方法</li>
<li>算术运算符</li>
<li>反算术运算符</li>
<li>增量赋值运算符</li>
<li>一元运算符</li>
<li>属性访问</li>
<li>描述符</li>
<li>定制序列</li>
<li>迭代器</li>
</ul>
</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>还记得 Python 里面“万物皆对象”么？Python 把函数也当成对象，可以从另一个函数中返回出来而去构建高阶函数，比如：<br>参数是函数、返回值是函数。</p>
<p>我们首先来介绍函数的定义。</p>
<ul>
<li>函数以<code>def</code>关键词开头，后接函数名和圆括号()。</li>
<li>函数执行的代码以冒号起始，并且缩进。</li>
<li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回<code>None</code>。</li>
</ul>
<blockquote>
<p>def functionname (parameters):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;”函数_文档字符串”<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; function_suite<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return [expression]</p>
</blockquote>
<h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printme</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printme(<span class="string">&quot;我要调用用户自定义函数!&quot;</span>)  <span class="comment"># 我要调用用户自定义函数!</span></span><br><span class="line">printme(<span class="string">&quot;再次调用同一函数&quot;</span>)  <span class="comment"># 再次调用同一函数</span></span><br><span class="line">temp = printme(<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">print</span>(temp)  <span class="comment"># None</span></span><br></pre></td></tr></table></figure>

<pre><code>我要调用用户自定义函数!
再次调用同一函数
hello
None
</code></pre>
<h2 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MyFirstFunction</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="string">&quot;函数定义过程中name是形参&quot;</span></span><br><span class="line">    <span class="comment"># 因为Ta只是一个形式，表示占据一个参数位置</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;传递进来的&#123;0&#125;叫做实参，因为Ta是具体的参数值！&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyFirstFunction(<span class="string">&#x27;老马的程序人生&#x27;</span>)  </span><br><span class="line"><span class="comment"># 传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(MyFirstFunction.__doc__)  </span><br><span class="line"><span class="comment"># 函数定义过程中name是形参</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(MyFirstFunction)</span><br><span class="line"><span class="comment"># Help on function MyFirstFunction in module __main__:</span></span><br><span class="line"><span class="comment"># MyFirstFunction(name)</span></span><br><span class="line"><span class="comment">#    函数定义过程中name是形参</span></span><br></pre></td></tr></table></figure>

<pre><code>传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！
函数定义过程中name是形参
Help on function MyFirstFunction in module __main__:

MyFirstFunction(name)
    函数定义过程中name是形参
</code></pre>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>Python 的函数具有非常灵活多样的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。从简到繁的参数形态如下：</p>
<ul>
<li>位置参数 (positional argument)</li>
<li>默认参数 (default argument)</li>
<li>可变参数 (variable argument)</li>
<li>关键字参数 (keyword argument)</li>
<li>命名关键字参数 (name keyword argument)</li>
<li>参数组合</li>
</ul>
<p><strong>1. 位置参数</strong></p>
<blockquote>
<p>def functionname(arg1):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;”函数_文档字符串”<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;function_suite<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return [expression]<br></p>
</blockquote>
<ul>
<li><code>arg1</code> - 位置参数 ，这些参数在调用函数 (call function) 时位置要固定。</li>
</ul>
<p><strong>2. 默认参数</strong></p>
<blockquote>
<p>def functionname(arg1, arg2&#x3D;v):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;”函数_文档字符串”<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;function_suite<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return [expression]<br></p>
</blockquote>
<ul>
<li><code>arg2 = v</code> - 默认参数 &#x3D; 默认值，调用函数时，默认参数的值如果没有传入，则被认为是默认值。</li>
<li>默认参数一定要放在位置参数 <b>后面</b>，不然程序会报错。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">name, age=<span class="number">8</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(<span class="string">&#x27;小马&#x27;</span>)  <span class="comment"># Name:小马,Age:8</span></span><br><span class="line">printinfo(<span class="string">&#x27;小马&#x27;</span>, <span class="number">10</span>)  <span class="comment"># Name:小马,Age:10</span></span><br></pre></td></tr></table></figure>

<pre><code>Name:小马,Age:8
Name:小马,Age:10
</code></pre>
<ul>
<li>Python 允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">name, age</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(age=<span class="number">8</span>, name=<span class="string">&#x27;小马&#x27;</span>)  <span class="comment"># Name:小马,Age:8</span></span><br></pre></td></tr></table></figure>

<pre><code>Name:小马,Age:8
</code></pre>
<p><strong>3. 可变参数</strong></p>
<p>顾名思义，可变参数就是传入的参数个数是可变的，可以是 0, 1, 2 到任意个，是不定长的参数。</p>
<blockquote>
<p>def functionname(arg1, arg2&#x3D;v, *args):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;”函数_文档字符串”<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;function_suite<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return [expression]<br></p>
</blockquote>
<ul>
<li><code>*args</code> - 可变参数，可以是从零个到任意个，自动组装成元组。</li>
<li>加了星号（*）的变量名会存放所有未命名的变量参数。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">arg1, *args</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg1)</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(<span class="number">10</span>)  <span class="comment"># 10</span></span><br><span class="line">printinfo(<span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># 60</span></span><br><span class="line"><span class="comment"># 50</span></span><br></pre></td></tr></table></figure>

<pre><code>10
70
60
50
</code></pre>
<p><strong>4. 关键字参数</strong></p>
<blockquote>
<p>def functionname(arg1, arg2&#x3D;v, *args, **kw):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;”函数_文档字符串”<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;function_suite<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return [expression]<br></p>
</blockquote>
<ul>
<li><code>**kw</code> - 关键字参数，可以是从零个到任意个，自动组装成字典。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">arg1, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg1)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(<span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># (60, 50)</span></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br><span class="line">printinfo(<span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>, a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># (60, 50)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>70
(60, 50)
&#123;&#125;
70
(60, 50)
&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;
</code></pre>
<p>「可变参数」和「关键字参数」的同异总结如下：</p>
<ul>
<li>可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。</li>
<li>关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)。</li>
</ul>
<p><strong>5. 命名关键字参数</strong></p>
<blockquote>
<p>def functionname(arg1, arg2&#x3D;v, *args, *, nkw, **kw):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;”函数_文档字符串”<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;function_suite<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return [expression]<br></p>
</blockquote>
<ul>
<li><code>*, nkw</code> - 命名关键字参数，用户想要输入的关键字参数，定义方式是在nkw 前面加个分隔符 <code>*</code>。</li>
<li>如果要限制关键字参数的名字，就可以用「命名关键字参数」</li>
<li>使用命名关键字参数时，要特别注意不能缺少参数名。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">arg1, *, nkw, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg1)</span><br><span class="line">    <span class="built_in">print</span>(nkw)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printinfo(<span class="number">70</span>, nkw=<span class="number">10</span>, a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 70</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line">printinfo(<span class="number">70</span>, <span class="number">10</span>, a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># TypeError: printinfo() takes 1 positional argument but 2 were given</span></span><br></pre></td></tr></table></figure>

<pre><code>70
10
&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;
</code></pre>
<ul>
<li>没有写参数名<code>nwk</code>，因此 10 被当成「位置参数」，而原函数只有 1 个位置函数，现在调用了 2 个，因此程序会报错。</li>
</ul>
<p><strong>6. 参数组合</strong></p>
<p>在 Python 中定义函数，可以用位置参数、默认参数、可变参数、命名关键字参数和关键字参数，这 5 种参数中的 4 个都可以一起使用，但是注意，参数定义的顺序必须是：</p>
<ul>
<li>位置参数、默认参数、可变参数和关键字参数。</li>
<li>位置参数、默认参数、命名关键字参数和关键字参数。</li>
</ul>
<p>要注意定义可变参数和关键字参数的语法：</p>
<ul>
<li><code>*args</code> 是可变参数，<code>args</code> 接收的是一个 <code>tuple</code></li>
<li><code>**kw</code> 是关键字参数，<code>kw</code> 接收的是一个 <code>dict</code></li>
</ul>
<p>命名关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。定义命名关键字参数不要忘了写分隔符 <code>*</code>，否则定义的是位置参数。</p>
<p>警告：虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数很难懂。</p>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(add([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))  <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<pre><code>3
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>():</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="string">&#x27;小马的程序人生&#x27;</span>, <span class="number">3.14</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(back())  <span class="comment"># [1, &#x27;小马的程序人生&#x27;, 3.14]</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, &#39;小马的程序人生&#39;, 3.14]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="string">&#x27;小马的程序人生&#x27;</span>, <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(back())  <span class="comment"># (1, &#x27;小马的程序人生&#x27;, 3.14)</span></span><br></pre></td></tr></table></figure>

<pre><code>(1, &#39;小马的程序人生&#39;, 3.14)
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printme</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">temp = printme(<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">print</span>(temp) <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp))  <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>hello
None
&lt;class &#39;NoneType&#39;&gt;
</code></pre>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul>
<li>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</li>
<li>定义在函数内部的变量拥有局部作用域，该变量称为局部变量。</li>
<li>定义在函数外部的变量拥有全局作用域，该变量称为全局变量。</li>
<li>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">discounts</span>(<span class="params">price, rate</span>):</span><br><span class="line">    final_price = price * rate</span><br><span class="line">    <span class="keyword">return</span> final_price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">old_price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入原价:&#x27;</span>))  <span class="comment"># 98</span></span><br><span class="line">rate = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入折扣率:&#x27;</span>))  <span class="comment"># 0.9</span></span><br><span class="line">new_price = discounts(old_price, rate)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;打折后价格是:%.2f&#x27;</span> % new_price)  <span class="comment"># 88.20</span></span><br></pre></td></tr></table></figure>

<pre><code>请输入原价:98
请输入折扣率:0.9
打折后价格是:88.20
</code></pre>
<ul>
<li>当内部作用域想修改外部作用域的变量时，就要用到<code>global</code>和<code>nonlocal</code>关键字了。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="keyword">global</span> num  <span class="comment"># 需要使用 global 关键字声明</span></span><br><span class="line">    <span class="built_in">print</span>(num)  <span class="comment"># 1</span></span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    <span class="built_in">print</span>(num)  <span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment"># 123</span></span><br></pre></td></tr></table></figure>

<pre><code>1
123
123
</code></pre>
<p><strong>内嵌函数</strong></p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outer函数在这被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inner函数在这被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    inner()  <span class="comment"># 该函数只能在outer函数内部被调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># outer函数在这被调用</span></span><br><span class="line"><span class="comment"># inner函数在这被调用</span></span><br></pre></td></tr></table></figure>

<pre><code>outer函数在这被调用
inner函数在这被调用
</code></pre>
<p><strong>闭包</strong></p>
<ul>
<li>是函数式编程的一个重要的语法结构，是一种特殊的内嵌函数。</li>
<li>如果在一个内部函数里对外层非全局作用域的变量进行引用，那么内部函数就被认为是闭包。</li>
<li>通过闭包可以访问外层非全局作用域的变量，这个作用域称为 <b>闭包作用域</b>。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funX</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">funY</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> funY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = funX(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(i))  <span class="comment"># &lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(i(<span class="number">5</span>))  <span class="comment"># 40</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;function&#39;&gt;
40
</code></pre>
<p>【例子】闭包的返回值通常是函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_counter</span>(<span class="params">init</span>):</span><br><span class="line">    counter = [init]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inc</span>(): counter[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dec</span>(): counter[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(): <span class="keyword">return</span> counter[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(): counter[<span class="number">0</span>] = init</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inc, dec, get, reset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inc, dec, get, reset = make_counter(<span class="number">0</span>)</span><br><span class="line">inc()</span><br><span class="line">inc()</span><br><span class="line">inc()</span><br><span class="line"><span class="built_in">print</span>(get())  <span class="comment"># 3</span></span><br><span class="line">dec()</span><br><span class="line"><span class="built_in">print</span>(get())  <span class="comment"># 2</span></span><br><span class="line">reset()</span><br><span class="line"><span class="built_in">print</span>(get())  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<pre><code>3
2
0
</code></pre>
<p>【例子】 如果要修改闭包作用域中的变量则需要 <code>nonlocal</code> 关键字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> num  <span class="comment"># nonlocal关键字声明</span></span><br><span class="line">        num = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"><span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<pre><code>100
100
</code></pre>
<p><strong>递归</strong></p>
<ul>
<li>如果一个函数在内部调用自身本身，这个函数就是递归函数。</li>
</ul>
<p>【例子】<code>n! = 1 x 2 x 3 x ... x n</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用循环</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    n = n * k</span><br><span class="line"><span class="built_in">print</span>(n)  <span class="comment"># 120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>)) <span class="comment"># 120</span></span><br></pre></td></tr></table></figure>

<pre><code>120
120
</code></pre>
<p>【例子】斐波那契数列 <code>f(n)=f(n-1)+f(n-2), f(0)=0 f(1)=1</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用循环</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">lst = <span class="built_in">list</span>([i, j])</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>):</span><br><span class="line">    k = i + j</span><br><span class="line">    lst.append(k)</span><br><span class="line">    i = j</span><br><span class="line">    j = k</span><br><span class="line"><span class="built_in">print</span>(lst)  </span><br><span class="line"><span class="comment"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recur_fibo</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> recur_fibo(n - <span class="number">1</span>) + recur_fibo(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    lst.append(recur_fibo(k))</span><br><span class="line"><span class="built_in">print</span>(lst)  </span><br><span class="line"><span class="comment"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></span><br></pre></td></tr></table></figure>

<pre><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
</code></pre>
<p>【例子】设置递归的层数，Python默认递归层数为 100</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>


<h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><h2 id="匿名函数的定义"><a href="#匿名函数的定义" class="headerlink" title="匿名函数的定义"></a>匿名函数的定义</h2><p>在 Python 里有两类函数：</p>
<ul>
<li>第一类：用 <code>def</code> 关键词定义的正规函数</li>
<li>第二类：用 <code>lambda</code> 关键词定义的匿名函数</li>
</ul>
<p>Python 使用 <code>lambda</code> 关键词来创建匿名函数，而非<code>def</code>关键词，它没有函数名，其语法结构如下：</p>
<blockquote>
<p>lambda argument_list: expression</p>
</blockquote>
<ul>
<li><code>lambda</code> - 定义匿名函数的关键词。</li>
<li><code>argument_list</code> - 函数参数，它们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样。</li>
<li><code>:</code>- 冒号，在函数参数和表达式中间要加个冒号。</li>
<li><code>expression</code> - 只是一个表达式，输入函数参数，输出一些值。</li>
</ul>
<p>注意：</p>
<ul>
<li><code>expression</code> 中没有 return 语句，因为 lambda 不需要它来返回，表达式本身结果就是返回值。</li>
<li>匿名函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sqr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqr)</span><br><span class="line"><span class="comment"># &lt;function sqr at 0x000000BABD3A4400&gt;</span></span><br><span class="line"></span><br><span class="line">y = [sqr(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"></span><br><span class="line">lbd_sqr = <span class="keyword">lambda</span> x: x ** <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(lbd_sqr)</span><br><span class="line"><span class="comment"># &lt;function &lt;lambda&gt; at 0x000000BABB6AC1E0&gt;</span></span><br><span class="line"></span><br><span class="line">y = [lbd_sqr(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sumary = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"><span class="built_in">print</span>(sumary(<span class="number">10</span>, <span class="number">20</span>))  <span class="comment"># 30</span></span><br><span class="line"></span><br><span class="line">func = <span class="keyword">lambda</span> *args: <span class="built_in">sum</span>(args)</span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;function sqr at 0x00000220081D9E18&gt;
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;function &lt;lambda&gt; at 0x00000220081FF400&gt;
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
30
15
</code></pre>
<h2 id="匿名函数的应用"><a href="#匿名函数的应用" class="headerlink" title="匿名函数的应用"></a>匿名函数的应用</h2><p>函数式编程 是指代码中每一块都是不可变的，都由纯函数的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用。</p>
<p>【例子】非函数式编程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">        x[i] += <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">f(x)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [11, 12, 13]</span></span><br></pre></td></tr></table></figure>

<pre><code>[11, 12, 13]
</code></pre>
<p>【例子】函数式编程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> x:</span><br><span class="line">        y.append(item + <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">f(x)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3]
</code></pre>
<p>匿名函数 常常应用于函数式编程的高阶函数 (high-order function)中，主要有两种形式：</p>
<ul>
<li>参数是函数 (filter, map)</li>
<li>返回值是函数 (closure)</li>
</ul>
<p>如，在 <code>filter</code>和<code>map</code>函数中的应用：</p>
<ul>
<li><code>filter(function, iterable)</code> 过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 <code>list()</code> 来转换。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">odd = <span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">templist = <span class="built_in">filter</span>(odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(templist))  <span class="comment"># [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, 3, 5, 7, 9]
</code></pre>
<ul>
<li><code>map(function, *iterables)</code> 根据提供的函数对指定序列做映射。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m1 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(m1))  </span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line">m2 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(m2))  </span><br><span class="line"><span class="comment"># [3, 7, 11, 15, 19]</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, 4, 9, 16, 25]
[3, 7, 11, 15, 19]
</code></pre>
<p>除了 Python 这些内置函数，我们也可以自己定义高阶函数。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">apply_to_list</span>(<span class="params">fun, some_list</span>):</span><br><span class="line">    <span class="keyword">return</span> fun(some_list)</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(apply_to_list(<span class="built_in">sum</span>, lst))</span><br><span class="line"><span class="comment"># 15</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(apply_to_list(<span class="built_in">len</span>, lst))</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(apply_to_list(<span class="keyword">lambda</span> x: <span class="built_in">sum</span>(x) / <span class="built_in">len</span>(x), lst))</span><br><span class="line"><span class="comment"># 3.0</span></span><br></pre></td></tr></table></figure>

<pre><code>15
5
3.0
</code></pre>
<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="对象-x3D-属性-方法"><a href="#对象-x3D-属性-方法" class="headerlink" title="对象 &#x3D; 属性 + 方法"></a>对象 &#x3D; 属性 + 方法</h2><p>对象是类的实例。换句话说，类主要定义对象的结构，然后我们以类为模板创建对象。类不但包含方法定义，而且还包含所有实例共享的数据。</p>
<ul>
<li>封装：信息隐蔽技术</li>
</ul>
<p>我们可以使用关键字 <code>class</code> 定义 Python 类，关键字后面紧跟类的名称、分号和类的实现。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Turtle</span>:  <span class="comment"># Python中的类名约定以大写字母开头</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;关于类的一个简单例子&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 属性</span></span><br><span class="line">    color = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    weight = <span class="number">10</span></span><br><span class="line">    legs = <span class="number">4</span></span><br><span class="line">    shell = <span class="literal">True</span></span><br><span class="line">    mouth = <span class="string">&#x27;大嘴&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climb</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我正在很努力的向前爬...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我正在飞快的向前跑...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bite</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;咬死你咬死你!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;有得吃，真满足...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;困了，睡了，晚安，zzz&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tt = Turtle()</span><br><span class="line"><span class="built_in">print</span>(tt)</span><br><span class="line"><span class="comment"># &lt;__main__.Turtle object at 0x0000007C32D67F98&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tt))</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Turtle&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tt.__class__)</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Turtle&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tt.__class__.__name__)</span><br><span class="line"><span class="comment"># Turtle</span></span><br><span class="line"></span><br><span class="line">tt.climb()</span><br><span class="line"><span class="comment"># 我正在很努力的向前爬...</span></span><br><span class="line"></span><br><span class="line">tt.run()</span><br><span class="line"><span class="comment"># 我正在飞快的向前跑...</span></span><br><span class="line"></span><br><span class="line">tt.bite()</span><br><span class="line"><span class="comment"># 咬死你咬死你!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python类也是对象。它们是type的实例</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Turtle))</span><br><span class="line"><span class="comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;__main__.Turtle object at 0x000002200820E898&gt;
&lt;class &#39;__main__.Turtle&#39;&gt;
&lt;class &#39;__main__.Turtle&#39;&gt;
Turtle
我正在很努力的向前爬...
我正在飞快的向前跑...
咬死你咬死你!!
&lt;class &#39;type&#39;&gt;
</code></pre>
<ul>
<li>继承：子类自动共享父类之间数据和方法的机制</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>(<span class="title class_ inherited__">list</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = MyList([<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">lst.append(<span class="number">9</span>)</span><br><span class="line">lst.sort()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 2, 5, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 5, 7, 8, 9]
</code></pre>
<ul>
<li>多态：不同对象对同一方法响应不同的行动</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;子类必须实现这个方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;人正在走&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;pig is walking&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;dog is running&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">animal</span>):</span><br><span class="line">    animal.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(Pig())</span><br><span class="line"><span class="comment"># pig is walking</span></span><br></pre></td></tr></table></figure>

<pre><code>pig is walking
</code></pre>
<hr>
<h2 id="self-是什么？"><a href="#self-是什么？" class="headerlink" title="self 是什么？"></a>self 是什么？</h2><p>Python 的 <code>self</code> 相当于 C++ 的 <code>this</code> 指针。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__class__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.prt()</span><br><span class="line"><span class="comment"># &lt;__main__.Test object at 0x000000BC5A351208&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Test&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;__main__.Test object at 0x000002200820EA20&gt;
&lt;class &#39;__main__.Test&#39;&gt;
</code></pre>
<p>类的方法与普通的函数只有一个特别的区别 —— 它们必须有一个额外的第一个参数名称（对应于该实例，即该对象本身），按照惯例它的名称是 <code>self</code>。在调用方法时，我们无需明确提供与参数 <code>self</code> 相对应的参数。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setName</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kick</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫%s,该死的，谁踢我...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Ball()</span><br><span class="line">a.setName(<span class="string">&quot;球A&quot;</span>)</span><br><span class="line">b = Ball()</span><br><span class="line">b.setName(<span class="string">&quot;球B&quot;</span>)</span><br><span class="line">c = Ball()</span><br><span class="line">c.setName(<span class="string">&quot;球C&quot;</span>)</span><br><span class="line">a.kick()</span><br><span class="line"><span class="comment"># 我叫球A,该死的，谁踢我...</span></span><br><span class="line">b.kick()</span><br><span class="line"><span class="comment"># 我叫球B,该死的，谁踢我...</span></span><br></pre></td></tr></table></figure>

<pre><code>我叫球A,该死的，谁踢我...
我叫球B,该死的，谁踢我...
</code></pre>
<hr>
<h2 id="Python-的魔法方法"><a href="#Python-的魔法方法" class="headerlink" title="Python 的魔法方法"></a>Python 的魔法方法</h2><p>据说，Python 的对象天生拥有一些神奇的方法，它们是面向对象的 Python 的一切…</p>
<p>它们是可以给你的类增加魔力的特殊方法…</p>
<p>如果你的对象实现了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，而这一切都是自动发生的…</p>
<p>类有一个名为<code>__init__(self[, param1, param2...])</code>的魔法方法，该方法在类实例化时会自动调用。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kick</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫%s,该死的，谁踢我...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Ball(<span class="string">&quot;球A&quot;</span>)</span><br><span class="line">b = Ball(<span class="string">&quot;球B&quot;</span>)</span><br><span class="line">c = Ball(<span class="string">&quot;球C&quot;</span>)</span><br><span class="line">a.kick()</span><br><span class="line"><span class="comment"># 我叫球A,该死的，谁踢我...</span></span><br><span class="line">b.kick()</span><br><span class="line"><span class="comment"># 我叫球B,该死的，谁踢我...</span></span><br></pre></td></tr></table></figure>

<pre><code>我叫球A,该死的，谁踢我...
我叫球B,该死的，谁踢我...
</code></pre>
<hr>
<h2 id="公有和私有"><a href="#公有和私有" class="headerlink" title="公有和私有"></a>公有和私有</h2><p>在 Python 中定义私有变量只需要在变量名或函数名前加上“__”两个下划线，那么这个函数或变量就会为私有的了。</p>
<p>【例子】类的私有属性实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JustCounter</span>:</span><br><span class="line">    __secretCount = <span class="number">0</span>  <span class="comment"># 私有变量</span></span><br><span class="line">    publicCount = <span class="number">0</span>  <span class="comment"># 公开变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>):</span><br><span class="line">        self.__secretCount += <span class="number">1</span></span><br><span class="line">        self.publicCount += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(self.__secretCount)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = JustCounter()</span><br><span class="line">counter.count()  <span class="comment"># 1</span></span><br><span class="line">counter.count()  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(counter.publicCount)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python的私有为伪私有</span></span><br><span class="line"><span class="built_in">print</span>(counter._JustCounter__secretCount)  <span class="comment"># 2 </span></span><br><span class="line"><span class="built_in">print</span>(counter.__secretCount)  </span><br><span class="line"><span class="comment"># AttributeError: &#x27;JustCounter&#x27; object has no attribute &#x27;__secretCount&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>1
2
2
2
</code></pre>
<p>【例子】类的私有方法实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Site</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, url</span>):</span><br><span class="line">        self.name = name  <span class="comment"># public</span></span><br><span class="line">        self.__url = url  <span class="comment"># private</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">who</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name  : &#x27;</span>, self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;url : &#x27;</span>, self.__url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__foo</span>(<span class="params">self</span>):  <span class="comment"># 私有方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是私有方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):  <span class="comment"># 公共方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是公共方法&#x27;</span>)</span><br><span class="line">        self.__foo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = Site(<span class="string">&#x27;老马的程序人生&#x27;</span>, <span class="string">&#x27;https://blog.csdn.net/LSGO_MYP&#x27;</span>)</span><br><span class="line">x.who()</span><br><span class="line"><span class="comment"># name  :  老马的程序人生</span></span><br><span class="line"><span class="comment"># url :  https://blog.csdn.net/LSGO_MYP</span></span><br><span class="line"></span><br><span class="line">x.foo()</span><br><span class="line"><span class="comment"># 这是公共方法</span></span><br><span class="line"><span class="comment"># 这是私有方法</span></span><br><span class="line"></span><br><span class="line">x.__foo()</span><br><span class="line"><span class="comment"># AttributeError: &#x27;Site&#x27; object has no attribute &#x27;__foo&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>name  :  老马的程序人生
url :  https://blog.csdn.net/LSGO_MYP
这是公共方法
这是私有方法
</code></pre>
<hr>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Python 同样支持类的继承，派生类的定义如下所示：</p>
<blockquote>
<p>class DerivedClassName(BaseClassName):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;statement-1<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;statement-N</p>
</blockquote>
<p><code>BaseClassName</code>（基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用：</p>
<blockquote>
<p>class DerivedClassName(modname.BaseClassName):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;statement-1<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;statement-N</p>
</blockquote>
<p>【例子】如果子类中定义与父类同名的方法或属性，则会自动覆盖父类对应的方法或属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment"># 定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w, g</span>):</span><br><span class="line">        <span class="comment"># 调用父类的构函</span></span><br><span class="line">        people.__init__(self, n, a, w)</span><br><span class="line">        self.grade = g</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span> % (self.name, self.age, self.grade))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = student(<span class="string">&#x27;小马的程序人生&#x27;</span>, <span class="number">10</span>, <span class="number">60</span>, <span class="number">3</span>)</span><br><span class="line">s.speak()</span><br><span class="line"><span class="comment"># 小马的程序人生 说: 我 10 岁了，我在读 3 年级</span></span><br></pre></td></tr></table></figure>

<pre><code>小马的程序人生 说: 我 10 岁了，我在读 3 年级
</code></pre>
<p>注意：如果上面的程序去掉：<code>people.__init__(self, n, a, w)</code>，则输出：<code> 说: 我 0 岁了，我在读 3 年级</code>，因为子类的构造方法把父类的构造方法覆盖了。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        self.y = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        self.x -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的位置&quot;</span>, self.x, self.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoldFish</span>(<span class="title class_ inherited__">Fish</span>):  <span class="comment"># 金鱼</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Carp</span>(<span class="title class_ inherited__">Fish</span>):  <span class="comment"># 鲤鱼</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Salmon</span>(<span class="title class_ inherited__">Fish</span>):  <span class="comment"># 三文鱼</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shark</span>(<span class="title class_ inherited__">Fish</span>):  <span class="comment"># 鲨鱼</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.hungry = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.hungry:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;吃货的梦想就是天天有得吃！&quot;</span>)</span><br><span class="line">            self.hungry = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;太撑了，吃不下了！&quot;</span>)</span><br><span class="line">            self.hungry = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GoldFish()</span><br><span class="line">g.move()  <span class="comment"># 我的位置 9 4</span></span><br><span class="line">s = Shark()</span><br><span class="line">s.eat() <span class="comment"># 吃货的梦想就是天天有得吃！</span></span><br><span class="line">s.move()  </span><br><span class="line"><span class="comment"># AttributeError: &#x27;Shark&#x27; object has no attribute &#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>我的位置 3 8
吃货的梦想就是天天有得吃！
</code></pre>
<p>解决该问题可用以下两种方式：</p>
<ul>
<li>调用未绑定的父类方法<code>Fish.__init__(self)</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shark</span>(<span class="title class_ inherited__">Fish</span>):  <span class="comment"># 鲨鱼</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        Fish.__init__(self)</span><br><span class="line">        self.hungry = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.hungry:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;吃货的梦想就是天天有得吃！&quot;</span>)</span><br><span class="line">            self.hungry = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;太撑了，吃不下了！&quot;</span>)</span><br><span class="line">            self.hungry = <span class="literal">True</span></span><br></pre></td></tr></table></figure>


<ul>
<li>使用super函数<code>super().__init__()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shark</span>(<span class="title class_ inherited__">Fish</span>):  <span class="comment"># 鲨鱼</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.hungry = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.hungry:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;吃货的梦想就是天天有得吃！&quot;</span>)</span><br><span class="line">            self.hungry = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;太撑了，吃不下了！&quot;</span>)</span><br><span class="line">            self.hungry = <span class="literal">True</span></span><br></pre></td></tr></table></figure>


<p>Python 虽然支持多继承的形式，但我们一般不使用多继承，因为容易引起混乱。</p>
<blockquote>
<p>class DerivedClassName(Base1, Base2, Base3):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;statement-1<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;statement-N<br></p>
</blockquote>
<p>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，Python 从左至右搜索，即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="comment"># 定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w, g</span>):</span><br><span class="line">        <span class="comment"># 调用父类的构函</span></span><br><span class="line">        People.__init__(self, n, a, w)</span><br><span class="line">        self.grade = g</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span> % (self.name, self.age, self.grade))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一个类，多重继承之前的准备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Speaker</span>:</span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, t</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span> % (self.name, self.topic))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多重继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sample01</span>(Speaker, Student):</span><br><span class="line">    a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w, g, t</span>):</span><br><span class="line">        Student.__init__(self, n, a, w, g)</span><br><span class="line">        Speaker.__init__(self, n, t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法名同，默认调用的是在括号中排前地父类的方法</span></span><br><span class="line">test = Sample01(<span class="string">&quot;Tim&quot;</span>, <span class="number">25</span>, <span class="number">80</span>, <span class="number">4</span>, <span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()  </span><br><span class="line"><span class="comment"># 我叫 Tim，我是一个演说家，我演讲的主题是 Python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sample02</span>(Student, Speaker):</span><br><span class="line">    a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w, g, t</span>):</span><br><span class="line">        Student.__init__(self, n, a, w, g)</span><br><span class="line">        Speaker.__init__(self, n, t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法名同，默认调用的是在括号中排前地父类的方法</span></span><br><span class="line">test = Sample02(<span class="string">&quot;Tim&quot;</span>, <span class="number">25</span>, <span class="number">80</span>, <span class="number">4</span>, <span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()  </span><br><span class="line"><span class="comment"># Tim 说: 我 25 岁了，我在读 4 年级</span></span><br></pre></td></tr></table></figure>

<pre><code>我叫 Tim，我是一个演说家，我演讲的主题是 Python
Tim 说: 我 25 岁了，我在读 4 年级
</code></pre>
<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Turtle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.num = x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.num = x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.turtle = Turtle(x)</span><br><span class="line">        self.fish = Fish(y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_num</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;水池里面有乌龟%s只，小鱼%s条&quot;</span> % (self.turtle.num, self.fish.num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Pool(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">p.print_num()</span><br><span class="line"><span class="comment"># 水池里面有乌龟2只，小鱼3条</span></span><br></pre></td></tr></table></figure>

<pre><code>水池里面有乌龟2只，小鱼3条
</code></pre>
<h2 id="类、类对象和实例对象"><a href="#类、类对象和实例对象" class="headerlink" title="类、类对象和实例对象"></a>类、类对象和实例对象</h2><p><img src="https://img-blog.csdnimg.cn/20191007090316462.png" alt="类对象和实例对象"></p>
<p>类对象：创建一个类，其实也是一个对象也在内存开辟了一块空间，称为类对象，类对象只有一个。</p>
<blockquote>
<p>class A(object):<br><br>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;pass</p>
</blockquote>
<p>实例对象：就是通过实例化类创建的对象，称为实例对象，实例对象可以有多个。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化对象 a、b、c都属于实例对象。</span></span><br><span class="line">a = A()</span><br><span class="line">b = A()</span><br><span class="line">c = A()</span><br></pre></td></tr></table></figure>


<p>类属性：类里面方法外面定义的变量称为类属性。类属性所属于类对象并且多个实例对象之间共享同一个类属性，说白了就是类属性所有的通过该类实例化的对象都能共享。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    a = <span class="number">0</span>  <span class="comment">#类属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, xx</span>):</span><br><span class="line">        A.a = xx  <span class="comment">#使用类属性可以通过 （类名.类属性）调用。</span></span><br></pre></td></tr></table></figure>




<p>实例属性：实例属性和具体的某个实例对象有关系，并且一个实例对象和另外一个实例对象是不共享属性的，说白了实例属性只能在自己的对象里面使用，其他的对象不能直接使用，因为<code>self</code>是谁调用，它的值就属于该对象。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    class_attr = <span class="number">100</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.sl_attr = <span class="number">100</span>  <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类对象.类属性的值:&#x27;</span>, Test.class_attr)  <span class="comment"># 调用类属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;self.类属性的值&#x27;</span>, self.class_attr)  <span class="comment"># 相当于把类属性 变成实例属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;self.实例属性的值&#x27;</span>, self.sl_attr)  <span class="comment"># 调用实例属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Test()</span><br><span class="line">a.func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类对象.类属性的值: 100</span></span><br><span class="line"><span class="comment"># self.类属性的值 100</span></span><br><span class="line"><span class="comment"># self.实例属性的值 100</span></span><br><span class="line"></span><br><span class="line">b = Test()</span><br><span class="line">b.func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类对象.类属性的值: 100</span></span><br><span class="line"><span class="comment"># self.类属性的值 100</span></span><br><span class="line"><span class="comment"># self.实例属性的值 100</span></span><br><span class="line"></span><br><span class="line">a.class_attr = <span class="number">200</span></span><br><span class="line">a.sl_attr = <span class="number">200</span></span><br><span class="line">a.func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类对象.类属性的值: 100</span></span><br><span class="line"><span class="comment"># self.类属性的值 200</span></span><br><span class="line"><span class="comment"># self.实例属性的值 200</span></span><br><span class="line"></span><br><span class="line">b.func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类对象.类属性的值: 100</span></span><br><span class="line"><span class="comment"># self.类属性的值 100</span></span><br><span class="line"><span class="comment"># self.实例属性的值 100</span></span><br><span class="line"></span><br><span class="line">Test.class_attr = <span class="number">300</span></span><br><span class="line">a.func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类对象.类属性的值: 300</span></span><br><span class="line"><span class="comment"># self.类属性的值 200</span></span><br><span class="line"><span class="comment"># self.实例属性的值 200</span></span><br><span class="line"></span><br><span class="line">b.func()</span><br><span class="line"><span class="comment"># 类对象.类属性的值: 300</span></span><br><span class="line"><span class="comment"># self.类属性的值 300</span></span><br><span class="line"><span class="comment"># self.实例属性的值 100</span></span><br></pre></td></tr></table></figure>

<pre><code>类对象.类属性的值: 100
self.类属性的值 100
self.实例属性的值 100
类对象.类属性的值: 100
self.类属性的值 100
self.实例属性的值 100
类对象.类属性的值: 100
self.类属性的值 200
self.实例属性的值 200
类对象.类属性的值: 100
self.类属性的值 100
self.实例属性的值 100
类对象.类属性的值: 300
self.类属性的值 200
self.实例属性的值 200
类对象.类属性的值: 300
self.类属性的值 300
self.实例属性的值 100
</code></pre>
<p>注意：属性与方法名相同，属性会覆盖方法。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;x_man&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa = A()</span><br><span class="line">aa.x()  <span class="comment"># x_man</span></span><br><span class="line">aa.x = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(aa.x)  <span class="comment"># 1</span></span><br><span class="line">aa.x()</span><br><span class="line"><span class="comment"># TypeError: &#x27;int&#x27; object is not callable</span></span><br></pre></td></tr></table></figure>

<pre><code>x_man
1
</code></pre>
<h2 id="什么是绑定？"><a href="#什么是绑定？" class="headerlink" title="什么是绑定？"></a>什么是绑定？</h2><p>Python 严格要求方法需要有实例才能被调用，这种限制其实就是 Python 所谓的绑定概念。</p>
<p>Python 对象的数据属性通常存储在名为<code>.__ dict__</code>的字典中，我们可以直接访问<code>__dict__</code>，或利用 Python 的内置函数<code>vars()</code>获取<code>.__ dict__</code>。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setXY</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printXY</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.x, self.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dd = CC()</span><br><span class="line"><span class="built_in">print</span>(dd.__dict__)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">vars</span>(dd))</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(CC.__dict__)</span><br><span class="line"><span class="comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;setXY&#x27;: &lt;function CC.setXY at 0x000000C3473DA048&gt;, &#x27;printXY&#x27;: &lt;function CC.printXY at 0x000000C3473C4F28&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;CC&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;CC&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"></span><br><span class="line">dd.setXY(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(dd.__dict__)</span><br><span class="line"><span class="comment"># &#123;&#x27;x&#x27;: 4, &#x27;y&#x27;: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">vars</span>(CC))</span><br><span class="line"><span class="comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;setXY&#x27;: &lt;function CC.setXY at 0x000000632CA9B048&gt;, &#x27;printXY&#x27;: &lt;function CC.printXY at 0x000000632CA83048&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;CC&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;CC&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(CC.__dict__)</span><br><span class="line"><span class="comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;setXY&#x27;: &lt;function CC.setXY at 0x000000632CA9B048&gt;, &#x27;printXY&#x27;: &lt;function CC.printXY at 0x000000632CA83048&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;CC&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;CC&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#125;
&#123;&#125;
&#123;&#39;__module__&#39;: &#39;__main__&#39;, &#39;setXY&#39;: &lt;function CC.setXY at 0x000002200822BD08&gt;, &#39;printXY&#39;: &lt;function CC.printXY at 0x000002200822BF28&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;CC&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;CC&#39; objects&gt;, &#39;__doc__&#39;: None&#125;
&#123;&#39;x&#39;: 4, &#39;y&#39;: 5&#125;
&#123;&#39;__module__&#39;: &#39;__main__&#39;, &#39;setXY&#39;: &lt;function CC.setXY at 0x000002200822BD08&gt;, &#39;printXY&#39;: &lt;function CC.printXY at 0x000002200822BF28&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;CC&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;CC&#39; objects&gt;, &#39;__doc__&#39;: None&#125;
&#123;&#39;__module__&#39;: &#39;__main__&#39;, &#39;setXY&#39;: &lt;function CC.setXY at 0x000002200822BD08&gt;, &#39;printXY&#39;: &lt;function CC.printXY at 0x000002200822BF28&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;CC&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;CC&#39; objects&gt;, &#39;__doc__&#39;: None&#125;
</code></pre>
<h2 id="一些相关的内置函数（BIF）"><a href="#一些相关的内置函数（BIF）" class="headerlink" title="一些相关的内置函数（BIF）"></a>一些相关的内置函数（BIF）</h2><ul>
<li><code>issubclass(class, classinfo)</code> 方法用于判断参数 class 是否是类型参数 classinfo 的子类。</li>
<li>一个类被认为是其自身的子类。</li>
<li><code>classinfo</code>可以是类对象的元组，只要class是其中任何一个候选类的子类，则返回<code>True</code>。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(B, A))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(B, B))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(A, B))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(B, <span class="built_in">object</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<pre><code>True
True
False
True
</code></pre>
<ul>
<li><code>isinstance(object, classinfo)</code> 方法用于判断一个对象是否是一个已知的类型，类似<code>type()</code>。</li>
<li><code>type()</code>不会认为子类是一种父类类型，不考虑继承关系。</li>
<li><code>isinstance()</code>会认为子类是一种父类类型，考虑继承关系。</li>
<li>如果第一个参数不是对象，则永远返回<code>False</code>。</li>
<li>如果第二个参数不是类或者由类对象组成的元组，会抛出一个<code>TypeError</code>异常。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, <span class="built_in">int</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, <span class="built_in">str</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, (<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">list</span>)))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(A(), A))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(A()) == A)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(B(), A))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(B()) == A)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<pre><code>True
False
True
True
True
True
False
</code></pre>
<ul>
<li><code>hasattr(object, name)</code>用于判断对象是否包含对应的属性。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Coordinate</span>:</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = -<span class="number">5</span></span><br><span class="line">    z = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">point1 = Coordinate()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(point1, <span class="string">&#x27;x&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(point1, <span class="string">&#x27;y&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(point1, <span class="string">&#x27;z&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(point1, <span class="string">&#x27;no&#x27;</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<pre><code>True
True
True
False
</code></pre>
<ul>
<li><code>getattr(object, name[, default])</code>用于返回一个对象属性值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    bar = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(a, <span class="string">&#x27;bar&#x27;</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(a, <span class="string">&#x27;bar2&#x27;</span>, <span class="number">3</span>))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(a, <span class="string">&#x27;bar2&#x27;</span>))</span><br><span class="line"><span class="comment"># AttributeError: &#x27;A&#x27; object has no attribute &#x27;bar2&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>1
3
</code></pre>
<p>【例子】这个例子很酷！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        x = a</span><br><span class="line">        a = b</span><br><span class="line">        b = x</span><br><span class="line">        <span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">c = <span class="built_in">getattr</span>(a, <span class="string">&#x27;set&#x27;</span>)</span><br><span class="line">c(a=<span class="string">&#x27;1&#x27;</span>, b=<span class="string">&#x27;2&#x27;</span>)  <span class="comment"># 2 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>2 1
</code></pre>
<ul>
<li><code>setattr(object, name, value)</code>对应函数 <code>getattr()</code>，用于设置属性值，该属性不一定是存在的。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    bar = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(a, <span class="string">&#x27;bar&#x27;</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">setattr</span>(a, <span class="string">&#x27;bar&#x27;</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a.bar)  <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">setattr</span>(a, <span class="string">&quot;age&quot;</span>, <span class="number">28</span>)</span><br><span class="line"><span class="built_in">print</span>(a.age)  <span class="comment"># 28</span></span><br></pre></td></tr></table></figure>

<pre><code>1
5
28
</code></pre>
<ul>
<li><code>delattr(object, name)</code>用于删除属性。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Coordinate</span>:</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = -<span class="number">5</span></span><br><span class="line">    z = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">point1 = Coordinate()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x = &#x27;</span>, point1.x)  <span class="comment"># x =  10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y = &#x27;</span>, point1.y)  <span class="comment"># y =  -5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;z = &#x27;</span>, point1.z)  <span class="comment"># z =  0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delattr</span>(Coordinate, <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--删除 z 属性后--&#x27;</span>)  <span class="comment"># --删除 z 属性后--</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x = &#x27;</span>, point1.x)  <span class="comment"># x =  10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y = &#x27;</span>, point1.y)  <span class="comment"># y =  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发错误</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;z = &#x27;</span>, point1.z)</span><br><span class="line"><span class="comment"># AttributeError: &#x27;Coordinate&#x27; object has no attribute &#x27;z&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>x =  10
y =  -5
z =  0
--删除 z 属性后--
x =  10
y =  -5
</code></pre>
<ul>
<li><code>class property([fget[, fset[, fdel[, doc]]]])</code>用于在新式类中返回属性值。<ul>
<li><code>fget</code> – 获取属性值的函数</li>
<li><code>fset</code> – 设置属性值的函数</li>
<li><code>fdel</code> – 删除属性值函数</li>
<li><code>doc</code> – 属性描述信息</li>
</ul>
</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__x = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getx</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setx</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.__x = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delx</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">del</span> self.__x</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">property</span>(getx, setx, delx, <span class="string">&quot;I&#x27;m the &#x27;x&#x27; property.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cc = C()</span><br><span class="line">cc.x = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(cc.x)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> cc.x</span><br><span class="line"><span class="built_in">print</span>(cc.x)</span><br><span class="line"><span class="comment"># AttributeError: &#x27;C&#x27; object has no attribute &#x27;_C__x&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>2
</code></pre>
<h1 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h1><p>魔法方法总是被双下划线包围，例如<code>__init__</code>。</p>
<p>魔法方法是面向对象的 Python 的一切，如果你不知道魔法方法，说明你还没能意识到面向对象的 Python 的强大。</p>
<p>魔法方法的“魔力”体现在它们总能够在适当的时候被自动调用。</p>
<p>魔法方法的第一个参数应为<code>cls</code>（类方法） 或者<code>self</code>（实例方法）。</p>
<ul>
<li><code>cls</code>：代表一个类的名称</li>
<li><code>self</code>：代表一个实例对象的名称</li>
</ul>
<h2 id="基本的魔法方法"><a href="#基本的魔法方法" class="headerlink" title="基本的魔法方法"></a>基本的魔法方法</h2><ul>
<li><code>__init__(self[, ...])</code> 构造器，当一个实例被创建的时候调用的初始化方法</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPeri</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.x + self.y) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getArea</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x * self.y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rect = Rectangle(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(rect.getPeri())  <span class="comment"># 18</span></span><br><span class="line"><span class="built_in">print</span>(rect.getArea())  <span class="comment"># 20</span></span><br></pre></td></tr></table></figure>

<pre><code>18
20
</code></pre>
<ul>
<li><code>__new__(cls[, ...])</code> 在一个对象实例化的时候所调用的第一个方法，在调用<code>__init__</code>初始化前，先调用<code>__new__</code>。<ul>
<li><code>__new__</code>至少要有一个参数<code>cls</code>，代表要实例化的类，此参数在实例化时由 Python 解释器自动提供，后面的参数直接传递给<code>__init__</code>。</li>
<li><code>__new__</code>对当前类进行了实例化，并将实例返回，传给<code>__init__</code>的<code>self</code>。但是，执行了<code>__new__</code>，并不一定会进入<code>__init__</code>，只有<code>__new__</code>返回了，当前类<code>cls</code>的实例，当前类的<code>__init__</code>才会进入。</li>
</ul>
</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;into A __init__&quot;</span>)</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;into A __new__&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;into B __init__&quot;</span>)</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;into B __new__&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># into B __new__</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.B&#x27;&gt;</span></span><br><span class="line"><span class="comment"># into A __new__</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.B&#x27;&gt;</span></span><br><span class="line"><span class="comment"># into B __init__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;into A __init__&quot;</span>)</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;into A __new__&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;into B __init__&quot;</span>)</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;into B __new__&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(A, *args, **kwargs)  <span class="comment"># 改动了cls变为A</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># into B __new__</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.B&#x27;&gt;</span></span><br><span class="line"><span class="comment"># into A __new__</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.A&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>into B __new__
&lt;class &#39;__main__.B&#39;&gt;
into A __new__
&lt;class &#39;__main__.B&#39;&gt;
into B __init__
into B __new__
&lt;class &#39;__main__.B&#39;&gt;
into A __new__
&lt;class &#39;__main__.A&#39;&gt;
</code></pre>
<ul>
<li>若<code>__new__</code>没有正确返回当前类<code>cls</code>的实例，那<code>__init__</code>是不会被调用的，即使是父类的实例也不行，将没有<code>__init__</code>被调用。</li>
</ul>
<p>【例子】利用<code>__new__</code>实现单例模式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Earth</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Earth()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 260728291456</span></span><br><span class="line">b = Earth()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 260728291624</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Earth</span>:</span><br><span class="line">    __instance = <span class="literal">None</span>  <span class="comment"># 定义一个类属性做判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Earth()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 512320401648</span></span><br><span class="line">b = Earth()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 512320401648</span></span><br></pre></td></tr></table></figure>

<pre><code>2336598724336
2336598528464
2336598467752
2336598467752
</code></pre>
<ul>
<li><code>__new__</code>方法主要是当你继承一些不可变的 class 时（比如<code>int, str, tuple</code>）， 提供给你一个自定义这些类的实例化过程的途径。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CapStr</span>(<span class="title class_ inherited__">str</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, string</span>):</span><br><span class="line">        string = string.upper()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>.__new__(cls, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = CapStr(<span class="string">&quot;i love lsgogroup&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># I LOVE LSGOGROUP</span></span><br></pre></td></tr></table></figure>

<pre><code>I LOVE LSGOGROUP
</code></pre>
<ul>
<li><code>__del__(self)</code> 析构器，当一个对象将要被系统回收之时调用的方法。</li>
</ul>
<blockquote>
<p>Python 采用自动引用计数（ARC）方式来回收对象所占用的空间，当程序中有一个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 1；当程序中有两个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 2，依此类推，如果一个对象的引用计数变成了 0，则说明程序中不再有变量引用该对象，表明程序不再需要该对象，因此 Python 就会回收该对象。</p>
<p>大部分时候，Python 的 ARC 都能准确、高效地回收系统中的每个对象。但如果系统中出现循环引用的情况，比如对象 a 持有一个实例变量引用对象 b，而对象 b 又持有一个实例变量引用对象 a，此时两个对象的引用计数都是 1，而实际上程序已经不再有变量引用它们，系统应该回收它们，此时 Python 的垃圾回收器就可能没那么快，要等专门的循环垃圾回收器（Cyclic Garbage Collector）来检测并回收这种引用循环。</p>
</blockquote>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;into C __init__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;into C __del__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = C()</span><br><span class="line"><span class="comment"># into C __init__</span></span><br><span class="line">c2 = c1</span><br><span class="line">c3 = c2</span><br><span class="line"><span class="keyword">del</span> c3</span><br><span class="line"><span class="keyword">del</span> c2</span><br><span class="line"><span class="keyword">del</span> c1</span><br><span class="line"><span class="comment"># into C __del__</span></span><br></pre></td></tr></table></figure>

<pre><code>into C __init__
into C __del__
</code></pre>
<ul>
<li><p><code>__str__(self)</code>:</p>
<ul>
<li>当你打印一个对象的时候，触发<code>__str__</code></li>
<li>当你使用<code>%s</code>格式化的时候，触发<code>__str__</code></li>
<li><code>str</code>强转数据类型的时候，触发<code>__str__</code></li>
</ul>
</li>
<li><p><code>__repr__(self)</code>：</p>
<ul>
<li><code>repr</code>是<code>str</code>的备胎</li>
<li>有<code>__str__</code>的时候执行<code>__str__</code>,没有实现<code>__str__</code>的时候，执行<code>__repr__</code></li>
<li><code>repr(obj)</code>内置函数对应的结果是<code>__repr__</code>的返回值</li>
<li>当你使用<code>%r</code>格式化的时候 触发<code>__repr__</code></li>
</ul>
</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义一个猫类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, new_name, new_age</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在创建完对象之后 会自动调用, 它完成对象的初始化的功能&quot;&quot;&quot;</span></span><br><span class="line">        self.name = new_name</span><br><span class="line">        self.age = new_age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回一个对象的描述信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字是:%s , 年龄是:%d&quot;</span> % (self.name, self.age)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回一个对象的描述信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat:(%s,%d)&quot;</span> % (self.name, self.age)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s在吃鱼....&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s在喝可乐...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;名字是:%s, 年龄是:%d&quot;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了一个对象</span></span><br><span class="line">tom = Cat(<span class="string">&quot;汤姆&quot;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(tom)  <span class="comment"># 名字是:汤姆 , 年龄是:30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(tom)) <span class="comment"># 名字是:汤姆 , 年龄是:30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(tom))  <span class="comment"># Cat:(汤姆,30)</span></span><br><span class="line">tom.eat()  <span class="comment"># 汤姆在吃鱼....</span></span><br><span class="line">tom.introduce()  <span class="comment"># 名字是:汤姆, 年龄是:30</span></span><br></pre></td></tr></table></figure>

<pre><code>名字是:汤姆 , 年龄是:30
名字是:汤姆 , 年龄是:30
Cat:(汤姆,30)
汤姆在吃鱼....
名字是:汤姆, 年龄是:30
</code></pre>
<p><code>__str__(self)</code> 的返回结果可读性强。也就是说，<code>__str__</code> 的意义是得到便于人们阅读的信息，就像下面的 ‘2019-10-11’ 一样。</p>
<p><code>__repr__(self)</code> 的返回结果应更准确。怎么说，<code>__repr__</code> 存在的目的在于调试，便于开发者使用。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(today))  <span class="comment"># 2019-10-11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(today))  <span class="comment"># datetime.date(2019, 10, 11)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s&#x27;</span> %today)  <span class="comment"># 2019-10-11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%r&#x27;</span> %today)  <span class="comment"># datetime.date(2019, 10, 11)</span></span><br></pre></td></tr></table></figure>

<pre><code>2020-08-01
datetime.date(2020, 8, 1)
2020-08-01
datetime.date(2020, 8, 1)
</code></pre>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>类型工厂函数，指的是“不通过类而是通过函数来创建对象”。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">len</span>))  <span class="comment"># &lt;class &#x27;builtin_function_or_method&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">dir</span>))  <span class="comment"># &lt;class &#x27;builtin_function_or_method&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>))  <span class="comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>))  <span class="comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>))  <span class="comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(C))  <span class="comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;123&#x27;</span>))  <span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个例子中list工厂函数把一个元祖对象加工成了一个列表对象。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)))  <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;builtin_function_or_method&#39;&gt;
&lt;class &#39;builtin_function_or_method&#39;&gt;
&lt;class &#39;type&#39;&gt;
&lt;class &#39;type&#39;&gt;
&lt;class &#39;type&#39;&gt;
&lt;class &#39;type&#39;&gt;
123
[1, 2, 3]
</code></pre>
<ul>
<li><code>__add__(self, other)</code>定义加法的行为：<code>+</code></li>
<li><code>__sub__(self, other)</code>定义减法的行为：<code>-</code></li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, height, weight</span>):</span><br><span class="line">        self.height = height</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两个对象的长相加，宽不变.返回一个新的类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, others</span>):</span><br><span class="line">        <span class="keyword">return</span> MyClass(self.height + others.height, self.weight + others.weight)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两个对象的宽相减，长不变.返回一个新的类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, others</span>):</span><br><span class="line">        <span class="keyword">return</span> MyClass(self.height - others.height, self.weight - others.weight)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 说一下自己的参数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intro</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;高为&quot;</span>, self.height, <span class="string">&quot; 重为&quot;</span>, self.weight)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = MyClass(height=<span class="number">10</span>, weight=<span class="number">5</span>)</span><br><span class="line">    a.intro()</span><br><span class="line"></span><br><span class="line">    b = MyClass(height=<span class="number">20</span>, weight=<span class="number">10</span>)</span><br><span class="line">    b.intro()</span><br><span class="line"></span><br><span class="line">    c = b - a</span><br><span class="line">    c.intro()</span><br><span class="line"></span><br><span class="line">    d = a + b</span><br><span class="line">    d.intro()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高为 10  重为 5</span></span><br><span class="line"><span class="comment"># 高为 20  重为 10</span></span><br><span class="line"><span class="comment"># 高为 10  重为 5</span></span><br><span class="line"><span class="comment"># 高为 30  重为 15</span></span><br></pre></td></tr></table></figure>

<pre><code>高为 10  重为 5
高为 20  重为 10
高为 10  重为 5
高为 30  重为 15
</code></pre>
<ul>
<li><code>__mul__(self, other)</code>定义乘法的行为：<code>*</code></li>
<li><code>__truediv__(self, other)</code>定义真除法的行为：<code>/</code></li>
<li><code>__floordiv__(self, other)</code>定义整数除法的行为：<code>//</code></li>
<li><code>__mod__(self, other)</code> 定义取模算法的行为：<code>%</code></li>
<li><code>__divmod__(self, other)</code>定义当被 <code>divmod()</code> 调用时的行为</li>
<li><code>divmod(a, b)</code>把除数和余数运算结果结合起来，返回一个包含商和余数的元组<code>(a // b, a % b)</code>。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">divmod</span>(<span class="number">7</span>, <span class="number">2</span>))  <span class="comment"># (3, 1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">divmod</span>(<span class="number">8</span>, <span class="number">2</span>))  <span class="comment"># (4, 0)</span></span><br></pre></td></tr></table></figure>

<pre><code>(3, 1)
(4, 0)
</code></pre>
<ul>
<li><code>__pow__(self, other[, module])</code>定义当被 <code>power()</code> 调用或 <code>**</code> 运算时的行为</li>
<li><code>__lshift__(self, other)</code>定义按位左移位的行为：<code>&lt;&lt;</code></li>
<li><code>__rshift__(self, other)</code>定义按位右移位的行为：<code>&gt;&gt;</code></li>
<li><code>__and__(self, other)</code>定义按位与操作的行为：<code>&amp;</code></li>
<li><code>__xor__(self, other)</code>定义按位异或操作的行为：<code>^</code></li>
<li><code>__or__(self, other)</code>定义按位或操作的行为：<code>|</code></li>
</ul>
<h2 id="反算术运算符"><a href="#反算术运算符" class="headerlink" title="反算术运算符"></a>反算术运算符</h2><p>反运算魔方方法，与算术运算符保持一一对应，不同之处就是反运算的魔法方法多了一个“r”。当文件左操作不支持相应的操作时被调用。</p>
<ul>
<li><code>__radd__(self, other)</code>定义加法的行为：<code>+</code></li>
<li><code>__rsub__(self, other)</code>定义减法的行为：<code>-</code></li>
<li><code>__rmul__(self, other)</code>定义乘法的行为：<code>*</code></li>
<li><code>__rtruediv__(self, other)</code>定义真除法的行为：<code>/</code></li>
<li><code>__rfloordiv__(self, other)</code>定义整数除法的行为：<code>//</code></li>
<li><code>__rmod__(self, other)</code> 定义取模算法的行为：<code>%</code></li>
<li><code>__rdivmod__(self, other)</code>定义当被 divmod() 调用时的行为</li>
<li><code>__rpow__(self, other[, module])</code>定义当被 power() 调用或 <code>**</code> 运算时的行为</li>
<li><code>__rlshift__(self, other)</code>定义按位左移位的行为：<code>&lt;&lt;</code></li>
<li><code>__rrshift__(self, other)</code>定义按位右移位的行为：<code>&gt;&gt;</code></li>
<li><code>__rand__(self, other)</code>定义按位与操作的行为：<code>&amp;</code></li>
<li><code>__rxor__(self, other)</code>定义按位异或操作的行为：<code>^</code></li>
<li><code>__ror__(self, other)</code>定义按位或操作的行为：<code>|</code></li>
</ul>
<p><code>a + b</code></p>
<p>这里加数是<code>a</code>，被加数是<code>b</code>，因此是<code>a</code>主动，反运算就是如果<code>a</code>对象的<code>__add__()</code>方法没有实现或者不支持相应的操作，那么 Python 就会调用<code>b</code>的<code>__radd__()</code>方法。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Nint</span>(<span class="title class_ inherited__">int</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__radd__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>.__sub__(other, self) <span class="comment"># 注意 self 在后面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Nint(<span class="number">5</span>)</span><br><span class="line">b = Nint(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + b)  <span class="comment"># -2</span></span><br></pre></td></tr></table></figure>

<pre><code>8
-2
</code></pre>
<h2 id="增量赋值运算符"><a href="#增量赋值运算符" class="headerlink" title="增量赋值运算符"></a>增量赋值运算符</h2><ul>
<li><code>__iadd__(self, other)</code>定义赋值加法的行为：<code>+=</code></li>
<li><code>__isub__(self, other)</code>定义赋值减法的行为：<code>-=</code></li>
<li><code>__imul__(self, other)</code>定义赋值乘法的行为：<code>*=</code></li>
<li><code>__itruediv__(self, other)</code>定义赋值真除法的行为：<code>/=</code></li>
<li><code>__ifloordiv__(self, other)</code>定义赋值整数除法的行为：<code>//=</code></li>
<li><code>__imod__(self, other)</code>定义赋值取模算法的行为：<code>%=</code></li>
<li><code>__ipow__(self, other[, modulo])</code>定义赋值幂运算的行为：<code>**=</code></li>
<li><code>__ilshift__(self, other)</code>定义赋值按位左移位的行为：<code>&lt;&lt;=</code></li>
<li><code>__irshift__(self, other)</code>定义赋值按位右移位的行为：<code>&gt;&gt;=</code></li>
<li><code>__iand__(self, other)</code>定义赋值按位与操作的行为：<code>&amp;=</code></li>
<li><code>__ixor__(self, other)</code>定义赋值按位异或操作的行为：<code>^=</code></li>
<li><code>__ior__(self, other)</code>定义赋值按位或操作的行为：<code>|=</code></li>
</ul>
<h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><ul>
<li><code>__neg__(self)</code>定义正号的行为：<code>+x</code></li>
<li><code>__pos__(self)</code>定义负号的行为：<code>-x</code></li>
<li><code>__abs__(self)</code>定义当被<code>abs()</code>调用时的行为</li>
<li><code>__invert__(self)</code>定义按位求反的行为：<code>~x</code></li>
</ul>
<h2 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h2><ul>
<li><code>__getattr__(self, name)</code>: 定义当用户试图获取一个不存在的属性时的行为。</li>
<li><code>__getattribute__(self, name)</code>：定义当该类的属性被访问时的行为（先调用该方法，查看是否存在该属性，若不存在，接着去调用<code>__getattr__</code>）。</li>
<li><code>__setattr__(self, name, value)</code>：定义当一个属性被设置时的行为。</li>
<li><code>__delattr__(self, name)</code>：定义当一个属性被删除时的行为。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattribute__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__getattribute__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__getattribute__(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__getattr__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__setattr__&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__setattr__(key, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__delattr__&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__delattr__(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.x</span><br><span class="line"><span class="comment"># __getattribute__</span></span><br><span class="line"><span class="comment"># __getattr__</span></span><br><span class="line"></span><br><span class="line">c.x = <span class="number">1</span></span><br><span class="line"><span class="comment"># __setattr__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> c.x</span><br><span class="line"><span class="comment"># __delattr__</span></span><br></pre></td></tr></table></figure>

<pre><code>__getattribute__
__getattr__
__setattr__
__delattr__
</code></pre>
<h2 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h2><p>描述符就是将某种特殊类型的类的实例指派给另一个类的属性。</p>
<ul>
<li><code>__get__(self, instance, owner)</code>用于访问属性，它返回属性的值。</li>
<li><code>__set__(self, instance, value)</code>将在属性分配操作中调用，不返回任何内容。</li>
<li><code>__del__(self, instance)</code>控制删除操作，不返回任何内容。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDecriptor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__get__&#x27;</span>, self, instance, owner)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__set__&#x27;</span>, self, instance, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__delete__&#x27;</span>, self, instance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    x = MyDecriptor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.x</span><br><span class="line"><span class="comment"># __get__ &lt;__main__.MyDecriptor object at 0x000000CEAAEB6B00&gt; &lt;__main__.Test object at 0x000000CEABDC0898&gt; &lt;class &#x27;__main__.Test&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t.x = <span class="string">&#x27;x-man&#x27;</span></span><br><span class="line"><span class="comment"># __set__ &lt;__main__.MyDecriptor object at 0x00000023687C6B00&gt; &lt;__main__.Test object at 0x00000023696B0940&gt; x-man</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> t.x</span><br><span class="line"><span class="comment"># __delete__ &lt;__main__.MyDecriptor object at 0x000000EC9B160A90&gt; &lt;__main__.Test object at 0x000000EC9B160B38&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>__get__ &lt;__main__.MyDecriptor object at 0x0000022008242668&gt; &lt;__main__.Test object at 0x00000220082427B8&gt; &lt;class &#39;__main__.Test&#39;&gt;
__set__ &lt;__main__.MyDecriptor object at 0x0000022008242668&gt; &lt;__main__.Test object at 0x00000220082427B8&gt; x-man
__delete__ &lt;__main__.MyDecriptor object at 0x0000022008242668&gt; &lt;__main__.Test object at 0x00000220082427B8&gt;
</code></pre>
<h2 id="定制序列"><a href="#定制序列" class="headerlink" title="定制序列"></a>定制序列</h2><p>协议（Protocols）与其它编程语言中的接口很相似，它规定你哪些方法必须要定义。然而，在 Python 中的协议就显得不那么正式。事实上，在 Python 中，协议更像是一种指南。</p>
<p><strong>容器类型的协议</strong></p>
<ul>
<li>如果说你希望定制的容器是不可变的话，你只需要定义<code>__len__()</code>和<code>__getitem__()</code>方法。</li>
<li>如果你希望定制的容器是可变的话，除了<code>__len__()</code>和<code>__getitem__()</code>方法，你还需要定义<code>__setitem__()</code>和<code>__delitem__()</code>两个方法。</li>
</ul>
<p>【例子】编写一个不可改变的自定义列表，要求记录列表中每个元素被访问的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        self.values = [x <span class="keyword">for</span> x <span class="keyword">in</span> args]</span><br><span class="line">        self.count = &#123;&#125;.fromkeys(<span class="built_in">range</span>(<span class="built_in">len</span>(self.values)), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.values)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.count[item] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.values[item]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = CountList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">c2 = CountList(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(c1[<span class="number">1</span>])  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(c2[<span class="number">2</span>])  <span class="comment"># 6</span></span><br><span class="line"><span class="built_in">print</span>(c1[<span class="number">1</span>] + c2[<span class="number">1</span>])  <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1.count)</span><br><span class="line"><span class="comment"># &#123;0: 0, 1: 2, 2: 0, 3: 0, 4: 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c2.count)</span><br><span class="line"><span class="comment"># &#123;0: 0, 1: 1, 2: 1, 3: 0, 4: 0&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>3
6
7
&#123;0: 0, 1: 2, 2: 0, 3: 0, 4: 0&#125;
&#123;0: 0, 1: 1, 2: 1, 3: 0, 4: 0&#125;
</code></pre>
<ul>
<li><code>__len__(self)</code>定义当被<code>len()</code>调用时的行为（返回容器中元素的个数）。</li>
<li><code>__getitem__(self, key)</code>定义获取容器中元素的行为，相当于<code>self[key]</code>。</li>
<li><code>__setitem__(self, key, value)</code>定义设置容器中指定元素的行为，相当于<code>self[key] = value</code>。</li>
<li><code>__delitem__(self, key)</code>定义删除容器中指定元素的行为，相当于<code>del self[key]</code>。</li>
</ul>
<p>【例子】编写一个可改变的自定义列表，要求记录列表中每个元素被访问的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        self.values = [x <span class="keyword">for</span> x <span class="keyword">in</span> args]</span><br><span class="line">        self.count = &#123;&#125;.fromkeys(<span class="built_in">range</span>(<span class="built_in">len</span>(self.values)), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.values)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.count[item] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.values[item]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        self.values[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">del</span> self.values[key]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(self.values)):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= key:</span><br><span class="line">                self.count[i] = self.count[i + <span class="number">1</span>]</span><br><span class="line">        self.count.pop(<span class="built_in">len</span>(self.values))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = CountList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">c2 = CountList(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(c1[<span class="number">1</span>])  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(c2[<span class="number">2</span>])  <span class="comment"># 6</span></span><br><span class="line">c2[<span class="number">2</span>] = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(c1[<span class="number">1</span>] + c2[<span class="number">2</span>])  <span class="comment"># 15</span></span><br><span class="line"><span class="built_in">print</span>(c1.count)</span><br><span class="line"><span class="comment"># &#123;0: 0, 1: 2, 2: 0, 3: 0, 4: 0&#125;</span></span><br><span class="line"><span class="built_in">print</span>(c2.count)</span><br><span class="line"><span class="comment"># &#123;0: 0, 1: 0, 2: 2, 3: 0, 4: 0&#125;</span></span><br><span class="line"><span class="keyword">del</span> c1[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(c1.count)</span><br><span class="line"><span class="comment"># &#123;0: 0, 1: 0, 2: 0, 3: 0&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>3
6
15
&#123;0: 0, 1: 2, 2: 0, 3: 0, 4: 0&#125;
&#123;0: 0, 1: 0, 2: 2, 3: 0, 4: 0&#125;
&#123;0: 0, 1: 0, 2: 0, 3: 0&#125;
</code></pre>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul>
<li>迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。</li>
<li>迭代器是一个可以记住遍历的位置的对象。</li>
<li>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。</li>
<li>迭代器只能往前不会后退。</li>
<li>字符串，列表或元组对象都可用于创建迭代器：</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&#x27;lsgogroup&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">l</span></span><br><span class="line"><span class="string">s</span></span><br><span class="line"><span class="string">g</span></span><br><span class="line"><span class="string">o</span></span><br><span class="line"><span class="string">g</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">o</span></span><br><span class="line"><span class="string">u</span></span><br><span class="line"><span class="string">p</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">iter</span>(string):</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<pre><code>l
s
g
o
g
r
o
u
p
l
s
g
o
g
r
o
u
p
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">links = &#123;<span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;百度&#x27;</span>, <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;阿里&#x27;</span>, <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;腾讯&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> links:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s -&gt; %s&#x27;</span> % (each, links[each]))</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">B -&gt; 百度</span></span><br><span class="line"><span class="string">A -&gt; 阿里</span></span><br><span class="line"><span class="string">T -&gt; 腾讯</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">iter</span>(links):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s -&gt; %s&#x27;</span> % (each, links[each]))</span><br></pre></td></tr></table></figure>

<pre><code>B -&gt; 百度
A -&gt; 阿里
T -&gt; 腾讯
B -&gt; 百度
A -&gt; 阿里
T -&gt; 腾讯
</code></pre>
<ul>
<li>迭代器有两个基本的方法：<code>iter()</code> 和 <code>next()</code>。</li>
<li><code>iter(object)</code> 函数用来生成迭代器。</li>
<li><code>next(iterator[, default])</code> 返回迭代器的下一个项目。</li>
<li><code>iterator</code> – 可迭代对象</li>
<li><code>default</code> – 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 <code>StopIteration</code> 异常。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">links = &#123;<span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;百度&#x27;</span>, <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;阿里&#x27;</span>, <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;腾讯&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">it = <span class="built_in">iter</span>(links)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        each = <span class="built_in">next</span>(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(each)</span><br><span class="line"></span><br><span class="line"><span class="comment"># B</span></span><br><span class="line"><span class="comment"># A</span></span><br><span class="line"><span class="comment"># T</span></span><br><span class="line"></span><br><span class="line">it = <span class="built_in">iter</span>(links)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># B</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># A</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># T</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure>

<pre><code>B
A
T
B
A
T



---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-2-682f811edce7&gt; in &lt;module&gt;()
     17 print(next(it))  # A
     18 print(next(it))  # T
---&gt; 19 print(next(it))  # StopIteration


StopIteration: 
</code></pre>
<p>把一个类作为一个迭代器使用需要在类中实现两个魔法方法 <code>__iter__()</code> 与 <code>__next__()</code> 。</p>
<ul>
<li><code>__iter__(self)</code>定义当迭代容器中的元素的行为，返回一个特殊的迭代器对象， 这个迭代器对象实现了 <code>__next__()</code> 方法并通过 <code>StopIteration</code> 异常标识迭代的完成。</li>
<li><code>__next__()</code> 返回下一个迭代器对象。</li>
<li><code>StopIteration</code> 异常用于标识迭代的完成，防止出现无限循环的情况，在 <code>__next__()</code> 方法中我们可以设置在完成指定循环次数后触发 <code>StopIteration</code> 异常来结束迭代。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fibs</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n=<span class="number">10</span></span>):</span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.a &gt; self.n:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fibs = Fibs(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> fibs:</span><br><span class="line">    <span class="built_in">print</span>(each, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34 55 89</span></span><br></pre></td></tr></table></figure>

<pre><code>1 1 2 3 5 8 13 21 34 55 89 
</code></pre>
<p><b>4.10 生成器</b></p>
<ul>
<li>在 Python 中，使用了 <code>yield</code> 的函数被称为生成器（generator）。</li>
<li>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</li>
<li>在调用生成器运行的过程中，每次遇到 <code>yield</code> 时函数会暂停并保存当前所有的运行信息，返回 <code>yield</code> 的值, 并在下一次执行 <code>next()</code> 方法时从当前位置继续运行。</li>
<li>调用一个生成器函数，返回的是一个迭代器对象。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myGen</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;生成器执行！&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">myG = myGen()</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> myG:</span><br><span class="line">    <span class="built_in">print</span>(each)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">生成器执行！</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">myG = myGen()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myG))  </span><br><span class="line"><span class="comment"># 生成器执行！</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myG))  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myG))  <span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure>

<pre><code>生成器执行！
1
2
生成器执行！
1
2



---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-6-56bfa60ce8de&gt; in &lt;module&gt;()
     14 
     15 print(next(myG))  # 2
---&gt; 16 print(next(myG))  # StopIteration


StopIteration: 
</code></pre>
<p>【例子】用生成器实现斐波那契数列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">libs</span>(<span class="params">n</span>):</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">if</span> a &gt; n:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> libs(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">print</span>(each, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34 55 89</span></span><br></pre></td></tr></table></figure>

<pre><code>1 1 2 3 5 8 13 21 34 55 89 
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础（中）</title>
    <url>/2022/11/19/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<h1>Python基础(中)</h1>

<ol>
<li><p><a href="#%E7%AE%80%E4%BB%8B">简介</a></p>
</li>
<li><p><a href="#%E5%88%97%E8%A1%A8">列表</a><br><br><a href="#1.-%E5%88%97%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89">1. 列表的定义</a><br><br><a href="#2.-%E5%88%97%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA">2. 列表的创建</a><br><br><a href="#3.-%E5%90%91%E5%88%97%E8%A1%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">3. 向列表中添加元素</a><br><br><a href="#4.-%E5%88%A0%E9%99%A4%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0">4. 删除列表中的元素</a><br><br><a href="#5.-%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0">5. 获取列表中的元素</a><br><br><a href="#6.-%E5%88%97%E8%A1%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6">6. 列表的常用操作符</a><br><br><a href="#7.-%E5%88%97%E8%A1%A8%E7%9A%84%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95">7. 列表的其它方法</a><br>    </p>
</li>
<li><p><a href="#%E5%85%83%E7%BB%84">元组</a><br><br><a href="#1.-%E5%88%9B%E5%BB%BA%E5%92%8C%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%AA%E5%85%83%E7%BB%84">1. 创建和访问一个元组</a><br><br><a href="#2.-%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E5%85%83%E7%BB%84">2. 更新和删除一个元组</a><br><br><a href="#3.-%E5%85%83%E7%BB%84%E7%9B%B8%E5%85%B3%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6">3. 元组相关的操作符</a><br><br><a href="#4.-%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95">4. 内置方法</a><br><br><a href="#5.-%E8%A7%A3%E5%8E%8B%E5%85%83%E7%BB%84">5. 解压元组</a><br></p>
</li>
<li><p><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a><br><br><a href="#1.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AE%9A%E4%B9%89">1. 字符串的定义</a><br><br><a href="#2.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%87%E7%89%87%E4%B8%8E%E6%8B%BC%E6%8E%A5">2. 字符串的切片与拼接</a><br><br><a href="#3.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95">3. 字符串的常用内置方法</a><br><br><a href="#4.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96">4. 字符串格式化</a><br></p>
</li>
<li><p><a href="#%E5%AD%97%E5%85%B8">字典</a><br><br><a href="#1.-%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B">1. 可变类型与不可变类型</a><br><br><a href="#2.-%E5%AD%97%E5%85%B8%E7%9A%84%E5%AE%9A%E4%B9%89">2. 字典的定义</a><br><br><a href="#3.-%E5%88%9B%E5%BB%BA%E5%92%8C%E8%AE%BF%E9%97%AE%E5%AD%97%E5%85%B8">3. 创建和访问字典</a><br><br><a href="#4.-%E5%AD%97%E5%85%B8%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95">4. 字典的内置方法</a><br></p>
</li>
<li><p><a href="#%E9%9B%86%E5%90%88">集合</a><br><br><a href="#1.-%E9%9B%86%E5%90%88%E7%9A%84%E5%88%9B%E5%BB%BA">1. 集合的创建</a><br><br><a href="#2.-%E8%AE%BF%E9%97%AE%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%80%BC">2. 访问集合中的值</a><br><br><a href="#3.-%E9%9B%86%E5%90%88%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95">3. 集合的内置方法</a><br><br><a href="#4.-%E9%9B%86%E5%90%88%E7%9A%84%E8%BD%AC%E6%8D%A2">4. 集合的转换</a><br><br><a href="#5.-%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88">5. 不可变集合</a><br></p>
</li>
<li><p><a href="#%E5%BA%8F%E5%88%97">序列</a><br><br><a href="#1.-%E9%92%88%E5%AF%B9%E5%BA%8F%E5%88%97%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0">1. 针对序列的内置函数</a><br></p>
</li>
</ol>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>
<p><strong>本实验包括以下内容</strong>：</p>
<ol>
<li>列表<ul>
<li>列表的定义</li>
<li>列表的创建</li>
<li>向列表中添加元素</li>
<li>删除列表中的元素</li>
<li>获取列表中的元素</li>
<li>列表的常用操作符</li>
<li>列表的其他方法</li>
</ul>
</li>
<li>元组<ul>
<li>创建和访问一个元组</li>
<li>更新和删除一个元组</li>
<li>元组相关的操作符</li>
<li>内置方法</li>
<li>解压元组</li>
</ul>
</li>
<li>字符串<ul>
<li>字符串的定义</li>
<li>字符串的切片与拼接</li>
<li>字符串的常用内置方法</li>
<li>字符串格式化</li>
</ul>
</li>
<li>字典<ul>
<li>可变类型与不可变类型</li>
<li>字典的定义</li>
<li>创建和访问字典</li>
<li>字典的内置方法</li>
</ul>
</li>
<li>集合<ul>
<li>集合的创建</li>
<li>访问集合中的值</li>
<li>集合的内置方法</li>
<li>集合的转换</li>
<li>不可变集合</li>
</ul>
</li>
<li>序列<ul>
<li>针对序列的内置函数</li>
</ul>
</li>
</ol>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>简单数据类型</p>
<ul>
<li>整型<code>&lt;class &#39;int&#39;&gt;</code></li>
<li>浮点型<code>&lt;class &#39;float&#39;&gt;</code></li>
<li>布尔型<code>&lt;class &#39;bool&#39;&gt;</code></li>
</ul>
<p>容器数据类型</p>
<ul>
<li>列表<code>&lt;class &#39;list&#39;&gt;</code></li>
<li>元组<code>&lt;class &#39;tuple&#39;&gt;</code></li>
<li>字典<code>&lt;class &#39;dict&#39;&gt;</code></li>
<li>集合<code>&lt;class &#39;set&#39;&gt;</code></li>
<li>字符串<code>&lt;class &#39;str&#39;&gt;</code></li>
</ul>
<h2 id="1-列表的定义"><a href="#1-列表的定义" class="headerlink" title="1. 列表的定义"></a>1. 列表的定义</h2><p>列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为 <code>[元素1, 元素2, ..., 元素n]</code>。</p>
<ul>
<li>关键点是「中括号 []」和「逗号 ,」</li>
<li>中括号 把所有元素绑在一起</li>
<li>逗号 将每个元素一一分开</li>
</ul>
<h2 id="2-列表的创建"><a href="#2-列表的创建" class="headerlink" title="2. 列表的创建"></a>2. 列表的创建</h2><ul>
<li>创建一个普通列表</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [&#x27;Monday&#x27;, &#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [2, 3, 4, 5, 6, 7] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;
[2, 3, 4, 5, 6, 7] &lt;class &#39;list&#39;&gt;
</code></pre>
<ul>
<li>利用<code>range()</code>创建列表</li>
</ul>
<p>【例子】 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [1, 3, 5, 7, 9] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">1</span>, -<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [10, 8, 6, 4, 2] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;
[1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;
[10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;
</code></pre>
<ul>
<li>利用推导式创建列表</li>
</ul>
<p>【例子】 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [0, 0, 0, 0, 0] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [0, 0, 0, 0, 0] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [1, 3, 5, 7, 9] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">1</span>, -<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [10, 8, 6, 4, 2] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>) <span class="keyword">if</span> (i % <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">and</span> (i % <span class="number">3</span>) == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [3, 9, 15, 21, 27, 33, 39,</span></span><br></pre></td></tr></table></figure>

<pre><code>[0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;
[0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;
[1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;
[10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;
[1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class &#39;list&#39;&gt;
[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99] &lt;class &#39;list&#39;&gt;
</code></pre>
<p>注意：</p>
<p>由于list的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的<code>[1,2,3]</code>，也有3个指针和3个整数对象。</p>
<p><code>x = [a] * 4</code>操作中，只是创建4个指向list的引用，所以一旦<code>a</code>改变，<code>x</code>中4个<code>a</code>也会随之改变。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [[<span class="number">0</span>] * <span class="number">3</span>] * <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line">x = [a] * <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;
[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;
[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;
</code></pre>
<ul>
<li>创建一个混合列表</li>
</ul>
<p>【例子】 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mix = [<span class="number">1</span>, <span class="string">&#x27;lsgo&#x27;</span>, <span class="number">3.14</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(mix, <span class="built_in">type</span>(mix))  </span><br><span class="line"><span class="comment"># [1, &#x27;lsgo&#x27;, 3.14, [1, 2, 3]] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &lt;class &#39;list&#39;&gt;
</code></pre>
<ul>
<li>创建一个空列表</li>
</ul>
<p>【例子】 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty = []</span><br><span class="line"><span class="built_in">print</span>(empty, <span class="built_in">type</span>(empty))  <span class="comment"># [] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>[] &lt;class &#39;list&#39;&gt;
</code></pre>
<p>列表不像元组，列表内容可更改 (mutable)，因此附加 (<code>append</code>, <code>extend</code>)、插入 (<code>insert</code>)、删除 (<code>remove</code>, <code>pop</code>) 这些操作都可以用在它身上。</p>
<h2 id="3-向列表中添加元素"><a href="#3-向列表中添加元素" class="headerlink" title="3. 向列表中添加元素"></a>3. 向列表中添加元素</h2><ul>
<li><code>list.append(obj)</code> 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line">x.append(<span class="string">&#x27;Thursday&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)  </span><br><span class="line"><span class="comment"># [&#x27;Monday&#x27;, &#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;, &#x27;Thursday&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x))  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]
6
</code></pre>
<p>此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意<code>append()</code>和<code>extend()</code>的区别。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line">x.append([<span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Sunday&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(x)  </span><br><span class="line"><span class="comment"># [&#x27;Monday&#x27;, &#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;, [&#x27;Thursday&#x27;, &#x27;Sunday&#x27;]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x))  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]
6
</code></pre>
<ul>
<li><code>list.extend(seq)</code> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line">x.extend([<span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Sunday&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(x)  </span><br><span class="line"><span class="comment"># [&#x27;Monday&#x27;, &#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;, &#x27;Thursday&#x27;, &#x27;Sunday&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x))  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]
7
</code></pre>
<p>严格来说 <code>append</code> 是追加，把一个东西整体添加在列表后，而 <code>extend</code> 是扩展，把一个东西里的所有元素添加在列表后。</p>
<ul>
<li><code>list.insert(index, obj)</code> 在编号 <code>index</code> 位置插入 <code>obj</code>。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line">x.insert(<span class="number">2</span>, <span class="string">&#x27;Sunday&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [&#x27;Monday&#x27;, &#x27;Tuesday&#x27;, &#x27;Sunday&#x27;, &#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x))  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
6
</code></pre>
<h2 id="4-删除列表中的元素"><a href="#4-删除列表中的元素" class="headerlink" title="4. 删除列表中的元素"></a>4. 删除列表中的元素</h2><ul>
<li><code>list.remove(obj)</code> 移除列表中某个值的第一个匹配项</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line">x.remove(<span class="string">&#x27;Monday&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># [&#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
</code></pre>
<ul>
<li><code>list.pop([index=-1])</code> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line">y = x.pop()</span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># Friday</span></span><br><span class="line"></span><br><span class="line">y = x.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># Monday</span></span><br><span class="line"></span><br><span class="line">y = x.pop(-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># Wednesday</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># [&#x27;Tuesday&#x27;, &#x27;Thursday&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>Friday
Monday
Wednesday
[&#39;Tuesday&#39;, &#39;Thursday&#39;]
</code></pre>
<p><code>remove</code> 和 <code>pop</code> 都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。</p>
<ul>
<li><code>del var1[, var2 ……]</code> 删除单个或多个对象。</li>
</ul>
<p>【例子】</p>
<p>如果知道要删除的元素在列表中的位置，可使用<code>del</code>语句。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> x[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># [&#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
</code></pre>
<p>如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用<code>del</code>语句；如果你要在删除元素后还能继续使用它，就使用方法<code>pop()</code>。</p>
<h2 id="5-获取列表中的元素"><a href="#5-获取列表中的元素" class="headerlink" title="5. 获取列表中的元素"></a>5. 获取列表中的元素</h2><ul>
<li>通过元素的索引值，从列表获取单个元素，注意，列表索引值是从0开始的。</li>
<li>通过将索引指定为-1，可让Python返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, [<span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]]</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>], <span class="built_in">type</span>(x[<span class="number">0</span>]))  <span class="comment"># Monday &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">1</span>], <span class="built_in">type</span>(x[-<span class="number">1</span>]))  <span class="comment"># [&#x27;Thursday&#x27;, &#x27;Friday&#x27;] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">2</span>], <span class="built_in">type</span>(x[-<span class="number">2</span>]))  <span class="comment"># Wednesday &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>Monday &lt;class &#39;str&#39;&gt;
[&#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;
Wednesday &lt;class &#39;str&#39;&gt;
</code></pre>
<p>切片的通用写法是 <code>start : stop : step</code></p>
<ul>
<li>情况 1 - “start :” </li>
<li>以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往列表尾部切片。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">3</span>:])  <span class="comment"># [&#x27;Thursday&#x27;, &#x27;Friday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">3</span>:])  <span class="comment"># [&#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Thursday&#39;, &#39;Friday&#39;]
[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
</code></pre>
<ul>
<li>情况 2 - “: stop”</li>
<li>以 <code>step</code> 为 1 (默认) 从列表头部往编号 <code>stop</code> 切片。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">week = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(week[:<span class="number">3</span>])  <span class="comment"># [&#x27;Monday&#x27;, &#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(week[:-<span class="number">3</span>])  <span class="comment"># [&#x27;Monday&#x27;, &#x27;Tuesday&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]
[&#39;Monday&#39;, &#39;Tuesday&#39;]
</code></pre>
<ul>
<li>情况 3 - “start : stop”</li>
<li>以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往编号 <code>stop</code> 切片。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">week = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(week[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># [&#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(week[-<span class="number">3</span>:-<span class="number">1</span>])  <span class="comment"># [&#x27;Wednesday&#x27;, &#x27;Thursday&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Tuesday&#39;, &#39;Wednesday&#39;]
[&#39;Wednesday&#39;, &#39;Thursday&#39;]
</code></pre>
<ul>
<li>情况 4 - “start : stop : step”</li>
<li>以具体的 <code>step</code> 从编号 <code>start</code> 往编号 <code>stop</code> 切片。注意最后把 <code>step</code> 设为 -1，相当于将列表反向排列。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">week = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(week[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment"># [&#x27;Tuesday&#x27;, &#x27;Thursday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(week[:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment"># [&#x27;Monday&#x27;, &#x27;Wednesday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(week[<span class="number">1</span>::<span class="number">2</span>])  <span class="comment"># [&#x27;Tuesday&#x27;, &#x27;Thursday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(week[::-<span class="number">1</span>])  </span><br><span class="line"><span class="comment"># [&#x27;Friday&#x27;, &#x27;Thursday&#x27;, &#x27;Wednesday&#x27;, &#x27;Tuesday&#x27;, &#x27;Monday&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Tuesday&#39;, &#39;Thursday&#39;]
[&#39;Monday&#39;, &#39;Wednesday&#39;]
[&#39;Tuesday&#39;, &#39;Thursday&#39;]
[&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]
</code></pre>
<ul>
<li>情况 5 - “ : “</li>
<li>复制列表中的所有元素（浅拷贝）。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eek = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(week[:])  </span><br><span class="line"><span class="comment"># [&#x27;Monday&#x27;, &#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
</code></pre>
<p>【例子】浅拷贝与深拷贝</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>, <span class="number">213</span>]</span><br><span class="line">list2 = list1</span><br><span class="line">list3 = list1[:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># [123, 456, 789, 213]</span></span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [123, 456, 789, 213]</span></span><br><span class="line">list1.sort()</span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># [123, 213, 456, 789] </span></span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [123, 456, 789, 213]</span></span><br><span class="line"></span><br><span class="line">list1 = [[<span class="number">123</span>, <span class="number">456</span>], [<span class="number">789</span>, <span class="number">213</span>]]</span><br><span class="line">list2 = list1</span><br><span class="line">list3 = list1[:]</span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># [[123, 456], [789, 213]]</span></span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [[123, 456], [789, 213]]</span></span><br><span class="line">list1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># [[111, 456], [789, 213]]</span></span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [[111, 456], [789, 213]]</span></span><br></pre></td></tr></table></figure>

<pre><code>[123, 456, 789, 213]
[123, 456, 789, 213]
[123, 213, 456, 789]
[123, 456, 789, 213]
[[123, 456], [789, 213]]
[[123, 456], [789, 213]]
[[111, 456], [789, 213]]
[[111, 456], [789, 213]]
</code></pre>
<h2 id="6-列表的常用操作符"><a href="#6-列表的常用操作符" class="headerlink" title="6. 列表的常用操作符"></a>6. 列表的常用操作符</h2><ul>
<li>等号操作符：<code>==</code></li>
<li>连接操作符 <code>+</code></li>
<li>重复操作符 <code>*</code></li>
<li>成员关系操作符 <code>in</code>、<code>not in</code></li>
</ul>
<p>「等号 &#x3D;&#x3D;」，只有成员、成员位置都相同时才返回True。</p>
<p>列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line">list2 = [<span class="number">456</span>, <span class="number">123</span>]</span><br><span class="line">list3 = [<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1 == list2)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(list1 == list3)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">list4 = list1 + list2  <span class="comment"># extend()</span></span><br><span class="line"><span class="built_in">print</span>(list4)  <span class="comment"># [123, 456, 456, 123]</span></span><br><span class="line"></span><br><span class="line">list5 = list3 * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(list5)  <span class="comment"># [123, 456, 123, 456, 123, 456]</span></span><br><span class="line"></span><br><span class="line">list3 *= <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [123, 456, 123, 456, 123, 456]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span> <span class="keyword">in</span> list3)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">456</span> <span class="keyword">not</span> <span class="keyword">in</span> list3)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<pre><code>False
True
[123, 456, 456, 123]
[123, 456, 123, 456, 123, 456]
[123, 456, 123, 456, 123, 456]
True
False
</code></pre>
<p>前面三种方法（<code>append</code>, <code>extend</code>, <code>insert</code>）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。<br>而将两个list相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加list。</p>
<h2 id="7-列表的其它方法"><a href="#7-列表的其它方法" class="headerlink" title="7. 列表的其它方法"></a>7. 列表的其它方法</h2><p><code>list.count(obj)</code> 统计某个元素在列表中出现的次数</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>, <span class="number">456</span>] * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment"># [123, 456, 123, 456, 123, 456]</span></span><br><span class="line">num = list1.count(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<pre><code>[123, 456, 123, 456, 123, 456]
3
</code></pre>
<p><code>list.index(x[, start[, end]])</code> 从列表中找出某个值第一个匹配项的索引位置</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>, <span class="number">456</span>] * <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(list1.index(<span class="number">123</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(list1.index(<span class="number">123</span>, <span class="number">1</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(list1.index(<span class="number">123</span>, <span class="number">3</span>, <span class="number">7</span>))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<pre><code>0
2
4
</code></pre>
<p><code>list.reverse()</code> 反向列表中元素</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>]</span><br><span class="line">x.reverse()</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># [789, 456, 123]</span></span><br></pre></td></tr></table></figure>

<pre><code>[789, 456, 123]
</code></pre>
<p><code>list.sort(key=None, reverse=False)</code> 对原列表进行排序。</p>
<ul>
<li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>
<li><code>reverse</code> – 排序规则，<code>reverse = True</code> 降序， <code>reverse = False</code> 升序（默认）。</li>
<li>该方法没有返回值，但是会对列表的对象进行排序。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>, <span class="number">213</span>]</span><br><span class="line">x.sort()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [123, 213, 456, 789]</span></span><br><span class="line"></span><br><span class="line">x.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [789, 456, 213, 123]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表的第二个元素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">takeSecond</span>(<span class="params">elem</span>):</span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">x.sort(key=takeSecond)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [(4, 1), (2, 2), (1, 3), (3, 4)]</span></span><br><span class="line"></span><br><span class="line">x.sort(key=<span class="keyword">lambda</span> a: a[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [(1, 3), (2, 2), (3, 4), (4, 1)]</span></span><br></pre></td></tr></table></figure>

<pre><code>[123, 213, 456, 789]
[789, 456, 213, 123]
[(4, 1), (2, 2), (1, 3), (3, 4)]
[(1, 3), (2, 2), (3, 4), (4, 1)]
</code></pre>
<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>「元组」定义语法为：<code>(元素1, 元素2, ..., 元素n)</code></p>
<ul>
<li>小括号把所有元素绑在一起</li>
<li>逗号将每个元素一一分开</li>
</ul>
<h2 id="1-创建和访问一个元组"><a href="#1-创建和访问一个元组" class="headerlink" title="1. 创建和访问一个元组"></a>1. 创建和访问一个元组</h2><ul>
<li>Python 的元组与列表类似，不同之处在于tuple被创建后就不能对其进行修改，类似字符串。</li>
<li>元组使用小括号，列表使用方括号。</li>
<li>元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">10.31</span>, <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">t2 = <span class="number">1</span>, <span class="number">10.31</span>, <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t1, <span class="built_in">type</span>(t1))</span><br><span class="line"><span class="comment"># (1, 10.31, &#x27;python&#x27;) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t2, <span class="built_in">type</span>(t2))</span><br><span class="line"><span class="comment"># (1, 10.31, &#x27;python&#x27;) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">1</span>])  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">5</span>:])  <span class="comment"># (6, 7, 8)</span></span><br><span class="line"><span class="built_in">print</span>(tuple1[:<span class="number">5</span>])  <span class="comment"># (1, 2, 3, 4, 5)</span></span><br><span class="line">tuple2 = tuple1[:]</span><br><span class="line"><span class="built_in">print</span>(tuple2)  <span class="comment"># (1, 2, 3, 4, 5, 6, 7, 8)</span></span><br></pre></td></tr></table></figure>

<pre><code>(1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;
(1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;
2
(6, 7, 8)
(1, 2, 3, 4, 5)
(1, 2, 3, 4, 5, 6, 7, 8)
</code></pre>
<ul>
<li>创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。</li>
<li>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">x = <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">x = []</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">x = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">x = (<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;int&#39;&gt;
&lt;class &#39;tuple&#39;&gt;
&lt;class &#39;list&#39;&gt;
&lt;class &#39;tuple&#39;&gt;
&lt;class &#39;tuple&#39;&gt;
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">8</span> * (<span class="number">8</span>))  <span class="comment"># 64</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">8</span> * (<span class="number">8</span>,))  <span class="comment"># (8, 8, 8, 8, 8, 8, 8, 8)</span></span><br></pre></td></tr></table></figure>

<pre><code>64
(8, 8, 8, 8, 8, 8, 8, 8)
</code></pre>
<p>【例子】创建二维元组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = (<span class="number">1</span>, <span class="number">10.31</span>, <span class="string">&#x27;python&#x27;</span>), (<span class="string">&#x27;data&#x27;</span>, <span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># ((1, 10.31, &#x27;python&#x27;), (&#x27;data&#x27;, 11))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># (1, 10.31, &#x27;python&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>][<span class="number">0</span>], x[<span class="number">0</span>][<span class="number">1</span>], x[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 1 10.31 python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>][<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># (1, 10.31)</span></span><br></pre></td></tr></table></figure>

<pre><code>((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))
(1, 10.31, &#39;python&#39;)
1 10.31 python
(1, 10.31)
</code></pre>
<h2 id="2-更新和删除一个元组"><a href="#2-更新和删除一个元组" class="headerlink" title="2. 更新和删除一个元组"></a>2. 更新和删除一个元组</h2><p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">week = (<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>)</span><br><span class="line">week = week[:<span class="number">2</span>] + (<span class="string">&#x27;Wednesday&#x27;</span>,) + week[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(week)  <span class="comment"># (&#x27;Monday&#x27;, &#x27;Tuesday&#x27;, &#x27;Wednesday&#x27;, &#x27;Thursday&#x27;, &#x27;Friday&#x27;)</span></span><br></pre></td></tr></table></figure>

<pre><code>(&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)
</code></pre>
<p>【例子】元组有不可更改 (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(t1)  <span class="comment"># (1, 2, 3, [4, 5, 6])</span></span><br><span class="line"></span><br><span class="line">t1[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(t1)  <span class="comment"># (1, 2, 3, [9, 5, 6])</span></span><br></pre></td></tr></table></figure>

<pre><code>(1, 2, 3, [4, 5, 6])
(1, 2, 3, [9, 5, 6])
</code></pre>
<h2 id="3-元组相关的操作符"><a href="#3-元组相关的操作符" class="headerlink" title="3. 元组相关的操作符"></a>3. 元组相关的操作符</h2><ul>
<li>等号操作符：<code>==</code></li>
<li>连接操作符 <code>+</code></li>
<li>重复操作符 <code>*</code></li>
<li>成员关系操作符 <code>in</code>、<code>not in</code></li>
</ul>
<p>「等号 &#x3D;&#x3D;」，只有成员、成员位置都相同时才返回True。</p>
<p>元组拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="number">123</span>, <span class="number">456</span>)</span><br><span class="line">t2 = (<span class="number">456</span>, <span class="number">123</span>)</span><br><span class="line">t3 = (<span class="number">123</span>, <span class="number">456</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t1 == t2)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(t1 == t3)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">t4 = t1 + t2</span><br><span class="line"><span class="built_in">print</span>(t4)  <span class="comment"># (123, 456, 456, 123)</span></span><br><span class="line"></span><br><span class="line">t5 = t3 * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(t5)  <span class="comment"># (123, 456, 123, 456, 123, 456)</span></span><br><span class="line"></span><br><span class="line">t3 *= <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(t3)  <span class="comment"># (123, 456, 123, 456, 123, 456)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span> <span class="keyword">in</span> t3)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">456</span> <span class="keyword">not</span> <span class="keyword">in</span> t3)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<pre><code>False
True
(123, 456, 456, 123)
(123, 456, 123, 456, 123, 456)
(123, 456, 123, 456, 123, 456)
True
False
</code></pre>
<h2 id="4-内置方法"><a href="#4-内置方法" class="headerlink" title="4. 内置方法"></a>4. 内置方法</h2><p>元组大小和内容都不可更改，因此只有 <code>count</code> 和 <code>index</code> 两种方法。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">10.31</span>, <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.count(<span class="string">&#x27;python&#x27;</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="number">10.31</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<pre><code>1
1
</code></pre>
<ul>
<li><code>count(&#39;python&#39;)</code> 是记录在元组 <code>t</code> 中该元素出现几次，显然是 1 次</li>
<li><code>index(10.31)</code> 是找到该元素在元组 <code>t</code> 的索引，显然是 1</li>
</ul>
<h2 id="5-解压元组"><a href="#5-解压元组" class="headerlink" title="5. 解压元组"></a>5. 解压元组</h2><p>【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">10.31</span>, <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">(a, b, c) = t</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"><span class="comment"># 1 10.31 python</span></span><br></pre></td></tr></table></figure>

<pre><code>1 10.31 python
</code></pre>
<p>【例子】解压二维元组（按照元组里的元组结构来定义变量）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">10.31</span>, (<span class="string">&#x27;OK&#x27;</span>, <span class="string">&#x27;python&#x27;</span>))</span><br><span class="line">(a, b, (c, d)) = t</span><br><span class="line"><span class="built_in">print</span>(a, b, c, d)</span><br><span class="line"><span class="comment"># 1 10.31 OK python</span></span><br></pre></td></tr></table></figure>

<pre><code>1 10.31 OK python
</code></pre>
<p>【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 <code>rest</code> 变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">a, b, *rest, c = t</span><br><span class="line"><span class="built_in">print</span>(a, b, c)  <span class="comment"># 1 2 5</span></span><br><span class="line"><span class="built_in">print</span>(rest)  <span class="comment"># [3, 4]</span></span><br></pre></td></tr></table></figure>

<pre><code>1 2 5
[3, 4]
</code></pre>
<p>【例子】如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">a, b, *_ = t</span><br><span class="line"><span class="built_in">print</span>(a, b)  <span class="comment"># 1 2</span></span><br></pre></td></tr></table></figure>

<pre><code>1 2
</code></pre>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="1-字符串的定义"><a href="#1-字符串的定义" class="headerlink" title="1. 字符串的定义"></a>1. 字符串的定义</h2><ul>
<li>Python 中字符串被定义为引号之间的字符集合。</li>
<li>Python 支持使用成对的 单引号 或 双引号。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = <span class="string">&#x27;i love Python!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t1, <span class="built_in">type</span>(t1))</span><br><span class="line"><span class="comment"># i love Python! &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t2 = <span class="string">&quot;I love Python!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(t2, <span class="built_in">type</span>(t2))</span><br><span class="line"><span class="comment"># I love Python! &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> + <span class="number">8</span>)  <span class="comment"># 13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;5&#x27;</span> + <span class="string">&#x27;8&#x27;</span>)  <span class="comment"># 58</span></span><br></pre></td></tr></table></figure>

<pre><code>i love Python! &lt;class &#39;str&#39;&gt;
I love Python! &lt;class &#39;str&#39;&gt;
13
58
</code></pre>
<ul>
<li>Python 的常用转义字符</li>
</ul>
<table>
<thead>
<tr>
<th align="center">转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\\</code></td>
<td>反斜杠符号</td>
</tr>
<tr>
<td align="center"><code>\&#39;</code></td>
<td>单引号</td>
</tr>
<tr>
<td align="center"><code>\&quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td align="center"><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td align="center"><code>\t</code></td>
<td>横向制表符(TAB)</td>
</tr>
<tr>
<td align="center"><code>\r</code></td>
<td>回车</td>
</tr>
</tbody></table>
<p>【例子】如果字符串中需要出现单引号或双引号，可以使用转义符号<code>\</code>对字符串中的符号进行转义。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;let\&#x27;s go&#x27;</span>)  <span class="comment"># let&#x27;s go</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;let&#x27;s go&quot;</span>)  <span class="comment"># let&#x27;s go</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C:\\now&#x27;</span>)  <span class="comment"># C:\now</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;C:\\Program Files\\Intel\\Wifi\\Help&quot;</span>)</span><br><span class="line"><span class="comment"># C:\Program Files\Intel\Wifi\Help</span></span><br></pre></td></tr></table></figure>

<pre><code>let&#39;s go
let&#39;s go
C:\now
C:\Program Files\Intel\Wifi\Help
</code></pre>
<p>【例子】原始字符串只需要在字符串前边加一个英文字母 r 即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;C:\Program Files\Intel\Wifi\Help&#x27;</span>)  </span><br><span class="line"><span class="comment"># C:\Program Files\Intel\Wifi\Help</span></span><br></pre></td></tr></table></figure>

<pre><code>C:\Program Files\Intel\Wifi\Help
</code></pre>
<p>【例子】三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">para_str = <span class="string">&quot;&quot;&quot;这是一个多行字符串的实例</span></span><br><span class="line"><span class="string">多行字符串可以使用制表符</span></span><br><span class="line"><span class="string">TAB ( \t )。</span></span><br><span class="line"><span class="string">也可以使用换行符 [ \n ]。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(para_str)</span><br><span class="line"><span class="comment"># 这是一个多行字符串的实例</span></span><br><span class="line"><span class="comment"># 多行字符串可以使用制表符</span></span><br><span class="line"><span class="comment"># TAB (    )。</span></span><br><span class="line"><span class="comment"># 也可以使用换行符 [</span></span><br><span class="line"><span class="comment">#  ]。</span></span><br><span class="line"></span><br><span class="line">para_str = <span class="string">&#x27;&#x27;&#x27;这是一个多行字符串的实例</span></span><br><span class="line"><span class="string">多行字符串可以使用制表符</span></span><br><span class="line"><span class="string">TAB ( \t )。</span></span><br><span class="line"><span class="string">也可以使用换行符 [ \n ]。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(para_str)</span><br><span class="line"><span class="comment"># 这是一个多行字符串的实例</span></span><br><span class="line"><span class="comment"># 多行字符串可以使用制表符</span></span><br><span class="line"><span class="comment"># TAB ( 	 )。</span></span><br><span class="line"><span class="comment"># 也可以使用换行符 [ </span></span><br><span class="line"><span class="comment">#  ]。</span></span><br></pre></td></tr></table></figure>

<pre><code>这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( 	 )。
也可以使用换行符 [ 
 ]。

这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( 	 )。
也可以使用换行符 [ 
 ]。
</code></pre>
<h2 id="2-字符串的切片与拼接"><a href="#2-字符串的切片与拼接" class="headerlink" title="2. 字符串的切片与拼接"></a>2. 字符串的切片与拼接</h2><ul>
<li>类似于元组具有不可修改性</li>
<li>从 0 开始 (和 Java 一样)</li>
<li>切片通常写成 <code>start:end</code> 这种形式，包括「<code>start</code> 索引」对应的元素，不包括「<code>end</code>索引」对应的元素。</li>
<li>索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;I Love LsgoGroup&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str1[:<span class="number">6</span>])  <span class="comment"># I Love</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">5</span>])  <span class="comment"># e</span></span><br><span class="line"><span class="built_in">print</span>(str1[:<span class="number">6</span>] + <span class="string">&quot; 插入的字符串 &quot;</span> + str1[<span class="number">6</span>:])  </span><br><span class="line"><span class="comment"># I Love 插入的字符串  LsgoGroup</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># Python</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>:<span class="number">4</span>])  <span class="comment"># th</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">5</span>:-<span class="number">2</span>])  <span class="comment"># yth</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>])  <span class="comment"># t</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>])  <span class="comment"># n</span></span><br></pre></td></tr></table></figure>

<pre><code>I Love
e
I Love 插入的字符串  LsgoGroup
Python
th
yth
t
n
</code></pre>
<h2 id="3-字符串的常用内置方法"><a href="#3-字符串的常用内置方法" class="headerlink" title="3. 字符串的常用内置方法"></a>3. 字符串的常用内置方法</h2><ul>
<li><code>capitalize()</code> 将字符串的第一个字符转换为大写。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2 = <span class="string">&#x27;xiaoxie&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str2.capitalize())  <span class="comment"># Xiaoxie</span></span><br></pre></td></tr></table></figure>

<pre><code>Xiaoxie
</code></pre>
<ul>
<li><code>lower()</code> 转换字符串中所有大写字符为小写。</li>
<li><code>upper()</code> 转换字符串中的小写字母为大写。</li>
<li><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2 = <span class="string">&quot;DAXIExiaoxie&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str2.lower())  <span class="comment"># daxiexiaoxie</span></span><br><span class="line"><span class="built_in">print</span>(str2.upper())  <span class="comment"># DAXIEXIAOXIE</span></span><br><span class="line"><span class="built_in">print</span>(str2.swapcase())  <span class="comment"># daxieXIAOXIE</span></span><br></pre></td></tr></table></figure>

<pre><code>daxiexiaoxie
DAXIEXIAOXIE
daxieXIAOXIE
</code></pre>
<ul>
<li><code>count(str, beg= 0,end=len(string))</code> 返回<code>str</code>在 string 里面出现的次数，如果<code>beg</code>或者<code>end</code>指定则返回指定范围内<code>str</code>出现的次数。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2 = <span class="string">&quot;DAXIExiaoxie&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str2.count(<span class="string">&#x27;xi&#x27;</span>))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<pre><code>2
</code></pre>
<ul>
<li><code>endswith(suffix, beg=0, end=len(string))</code> 检查字符串是否以指定子字符串 <code>suffix</code> 结束，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li>
<li><code>startswith(substr, beg=0,end=len(string))</code> 检查字符串是否以指定子字符串 <code>substr</code> 开头，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2 = <span class="string">&quot;DAXIExiaoxie&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str2.endswith(<span class="string">&#x27;ie&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(str2.endswith(<span class="string">&#x27;xi&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str2.startswith(<span class="string">&#x27;Da&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str2.startswith(<span class="string">&#x27;DA&#x27;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<pre><code>True
False
False
True
</code></pre>
<ul>
<li><code>find(str, beg=0, end=len(string))</code> 检测 <code>str</code> 是否包含在字符串中，如果指定范围 <code>beg</code> 和 <code>end</code>，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。</li>
<li><code>rfind(str, beg=0,end=len(string))</code> 类似于 <code>find()</code> 函数，不过是从右边开始查找。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2 = <span class="string">&quot;DAXIExiaoxie&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str2.find(<span class="string">&#x27;xi&#x27;</span>))  <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(str2.find(<span class="string">&#x27;ix&#x27;</span>))  <span class="comment"># -1</span></span><br><span class="line"><span class="built_in">print</span>(str2.rfind(<span class="string">&#x27;xi&#x27;</span>))  <span class="comment"># 9</span></span><br></pre></td></tr></table></figure>

<pre><code>5
-1
9
</code></pre>
<ul>
<li><code>isnumeric()</code> 如果字符串中只包含数字字符，则返回 True，否则返回 False。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str3 = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3.isnumeric())  <span class="comment"># True</span></span><br><span class="line">str3 += <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3.isnumeric())  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<pre><code>True
False
</code></pre>
<ul>
<li><code>ljust(width[, fillchar])</code>返回一个原字符串左对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li>
<li><code>rjust(width[, fillchar])</code>返回一个原字符串右对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str4 = <span class="string">&#x27;1101&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str4.ljust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>))  <span class="comment"># 11010000</span></span><br><span class="line"><span class="built_in">print</span>(str4.rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>))  <span class="comment"># 00001101</span></span><br></pre></td></tr></table></figure>

<pre><code>11010000
00001101
</code></pre>
<ul>
<li><code>lstrip([chars])</code> 截掉字符串左边的空格或指定字符。</li>
<li><code>rstrip([chars])</code> 删除字符串末尾的空格或指定字符。</li>
<li><code>strip([chars])</code> 在字符串上执行<code>lstrip()</code>和<code>rstrip()</code>。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str5 = <span class="string">&#x27; I Love LsgoGroup &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str5.lstrip())  <span class="comment"># &#x27;I Love LsgoGroup &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str5.lstrip().strip(<span class="string">&#x27;I&#x27;</span>))  <span class="comment"># &#x27; Love LsgoGroup &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str5.rstrip())  <span class="comment"># &#x27; I Love LsgoGroup&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str5.strip())  <span class="comment"># &#x27;I Love LsgoGroup&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str5.strip().strip(<span class="string">&#x27;p&#x27;</span>))  <span class="comment"># &#x27;I Love LsgoGrou&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>I Love LsgoGroup 
 Love LsgoGroup 
 I Love LsgoGroup
I Love LsgoGroup
I Love LsgoGrou
</code></pre>
<ul>
<li><code>partition(sub)</code> 找到子字符串sub，把字符串分为一个三元组<code>(pre_sub,sub,fol_sub)</code>，如果字符串中不包含sub则返回<code>(&#39;原字符串&#39;,&#39;&#39;,&#39;&#39;)</code>。</li>
<li><code>rpartition(sub)</code>类似于<code>partition()</code>方法，不过是从右边开始查找。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str5 = <span class="string">&#x27; I Love LsgoGroup &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str5.strip().partition(<span class="string">&#x27;o&#x27;</span>))  <span class="comment"># (&#x27;I L&#x27;, &#x27;o&#x27;, &#x27;ve LsgoGroup&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(str5.strip().partition(<span class="string">&#x27;m&#x27;</span>))  <span class="comment"># (&#x27;I Love LsgoGroup&#x27;, &#x27;&#x27;, &#x27;&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(str5.strip().rpartition(<span class="string">&#x27;o&#x27;</span>))  <span class="comment"># (&#x27;I Love LsgoGr&#x27;, &#x27;o&#x27;, &#x27;up&#x27;)</span></span><br></pre></td></tr></table></figure>

<pre><code>(&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)
(&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)
(&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)
</code></pre>
<ul>
<li><code>replace(old, new [, max])</code> 把 将字符串中的<code>old</code>替换成<code>new</code>，如果<code>max</code>指定，则替换不超过<code>max</code>次。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str5 = <span class="string">&#x27; I Love LsgoGroup &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str5.strip().replace(<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;We&#x27;</span>))  <span class="comment"># We Love LsgoGroup</span></span><br></pre></td></tr></table></figure>

<pre><code>We Love LsgoGroup
</code></pre>
<ul>
<li><code>split(str=&quot;&quot;, num)</code> 不带参数默认是以空格为分隔符切片字符串，如果<code>num</code>参数有设置，则仅分隔<code>num</code>个子字符串，返回切片后的子字符串拼接的列表。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str5 = <span class="string">&#x27; I Love LsgoGroup &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str5.strip().split())  <span class="comment"># [&#x27;I&#x27;, &#x27;Love&#x27;, &#x27;LsgoGroup&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(str5.strip().split(<span class="string">&#x27;o&#x27;</span>))  <span class="comment"># [&#x27;I L&#x27;, &#x27;ve Lsg&#x27;, &#x27;Gr&#x27;, &#x27;up&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]
[&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u = <span class="string">&quot;www.baidu.com.cn&quot;</span></span><br><span class="line"><span class="comment"># 使用默认分隔符</span></span><br><span class="line"><span class="built_in">print</span>(u.split())  <span class="comment"># [&#x27;www.baidu.com.cn&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以&quot;.&quot;为分隔符</span></span><br><span class="line"><span class="built_in">print</span>((u.split(<span class="string">&#x27;.&#x27;</span>)))  <span class="comment"># [&#x27;www&#x27;, &#x27;baidu&#x27;, &#x27;com&#x27;, &#x27;cn&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割0次</span></span><br><span class="line"><span class="built_in">print</span>((u.split(<span class="string">&quot;.&quot;</span>, <span class="number">0</span>)))  <span class="comment"># [&#x27;www.baidu.com.cn&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割一次</span></span><br><span class="line"><span class="built_in">print</span>((u.split(<span class="string">&quot;.&quot;</span>, <span class="number">1</span>)))  <span class="comment"># [&#x27;www&#x27;, &#x27;baidu.com.cn&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割两次</span></span><br><span class="line"><span class="built_in">print</span>(u.split(<span class="string">&quot;.&quot;</span>, <span class="number">2</span>))  <span class="comment"># [&#x27;www&#x27;, &#x27;baidu&#x27;, &#x27;com.cn&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割两次，并取序列为1的项</span></span><br><span class="line"><span class="built_in">print</span>((u.split(<span class="string">&quot;.&quot;</span>, <span class="number">2</span>)[<span class="number">1</span>]))  <span class="comment"># baidu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割两次，并把分割后的三个部分保存到三个变量</span></span><br><span class="line">u1, u2, u3 = u.split(<span class="string">&quot;.&quot;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(u1)  <span class="comment"># www</span></span><br><span class="line"><span class="built_in">print</span>(u2)  <span class="comment"># baidu</span></span><br><span class="line"><span class="built_in">print</span>(u3)  <span class="comment"># com.cn</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;www.baidu.com.cn&#39;]
[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]
[&#39;www.baidu.com.cn&#39;]
[&#39;www&#39;, &#39;baidu.com.cn&#39;]
[&#39;www&#39;, &#39;baidu&#39;, &#39;com.cn&#39;]
baidu
www
baidu
com.cn
</code></pre>
<p>【例子】去掉换行符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;&#x27;&#x27;say</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">baby&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># say</span></span><br><span class="line"><span class="comment"># hello</span></span><br><span class="line"><span class="comment"># baby</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.split(<span class="string">&#x27;\n&#x27;</span>))  <span class="comment"># [&#x27;say&#x27;, &#x27;hello&#x27;, &#x27;baby&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>say
hello
baby
[&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]
</code></pre>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;hello boy&lt;[www.baidu.com]&gt;byebye&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string.split(<span class="string">&#x27;[&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;]&#x27;</span>)[<span class="number">0</span>])  <span class="comment"># www.baidu.com</span></span><br><span class="line"><span class="built_in">print</span>(string.split(<span class="string">&#x27;[&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;]&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;.&#x27;</span>))  <span class="comment"># [&#x27;www&#x27;, &#x27;baidu&#x27;, &#x27;com&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>www.baidu.com
[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]
</code></pre>
<ul>
<li><code>splitlines([keepends])</code> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数<code>keepends</code>为 False，不包含换行符，如果为 True，则保留换行符。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str6 = <span class="string">&#x27;I \n Love \n LsgoGroup&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str6.splitlines())  <span class="comment"># [&#x27;I &#x27;, &#x27; Love &#x27;, &#x27; LsgoGroup&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(str6.splitlines(<span class="literal">True</span>))  <span class="comment"># [&#x27;I \n&#x27;, &#x27; Love \n&#x27;, &#x27; LsgoGroup&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]
[&#39;I \n&#39;, &#39; Love \n&#39;, &#39; LsgoGroup&#39;]
</code></pre>
<ul>
<li><code>maketrans(intab, outtab)</code> 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</li>
<li><code>translate(table, deletechars=&quot;&quot;)</code> 根据参数<code>table</code>给出的表，转换字符串的字符，要过滤掉的字符放到<code>deletechars</code>参数中。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str7 = <span class="string">&#x27;this is string example....wow!!!&#x27;</span></span><br><span class="line">intab = <span class="string">&#x27;aeiou&#x27;</span></span><br><span class="line">outtab = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">trantab = str7.maketrans(intab, outtab)</span><br><span class="line"><span class="built_in">print</span>(trantab)  <span class="comment"># &#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&#125;</span></span><br><span class="line"><span class="built_in">print</span>(str7.translate(trantab))  <span class="comment"># th3s 3s str3ng 2x1mpl2....w4w!!!</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;97: 49, 101: 50, 105: 51, 111: 52, 117: 53&#125;
th3s 3s str3ng 2x1mpl2....w4w!!!
</code></pre>
<h2 id="4-字符串格式化"><a href="#4-字符串格式化" class="headerlink" title="4. 字符串格式化"></a>4. 字符串格式化</h2><ul>
<li><code>format</code> 格式化函数</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str8 = <span class="string">&quot;&#123;0&#125; Love &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;Lsgogroup&#x27;</span>)  <span class="comment"># 位置参数</span></span><br><span class="line"><span class="built_in">print</span>(str8)  <span class="comment"># I Love Lsgogroup</span></span><br><span class="line"></span><br><span class="line">str8 = <span class="string">&quot;&#123;a&#125; Love &#123;b&#125;&quot;</span>.<span class="built_in">format</span>(a=<span class="string">&#x27;I&#x27;</span>, b=<span class="string">&#x27;Lsgogroup&#x27;</span>)  <span class="comment"># 关键字参数</span></span><br><span class="line"><span class="built_in">print</span>(str8)  <span class="comment"># I Love Lsgogroup</span></span><br><span class="line"></span><br><span class="line">str8 = <span class="string">&quot;&#123;0&#125; Love &#123;b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;I&#x27;</span>, b=<span class="string">&#x27;Lsgogroup&#x27;</span>)  <span class="comment"># 位置参数要在关键字参数之前</span></span><br><span class="line"><span class="built_in">print</span>(str8)  <span class="comment"># I Love Lsgogroup</span></span><br><span class="line"></span><br><span class="line">str8 = <span class="string">&#x27;&#123;0:.2f&#125;&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">27.658</span>, <span class="string">&#x27;GB&#x27;</span>)  <span class="comment"># 保留小数点后两位</span></span><br><span class="line"><span class="built_in">print</span>(str8)  <span class="comment"># 27.66GB</span></span><br></pre></td></tr></table></figure>

<pre><code>I Love Lsgogroup
I Love Lsgogroup
I Love Lsgogroup
27.66GB
</code></pre>
<ul>
<li>Python 字符串格式化符号</li>
</ul>
<table>
<thead>
<tr>
<th align="center">符   号</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%c</td>
<td align="left">格式化字符及其ASCII码</td>
</tr>
<tr>
<td align="center">%s</td>
<td align="left">格式化字符串，用str()方法处理对象</td>
</tr>
<tr>
<td align="center">%r</td>
<td align="left">格式化字符串，用rper()方法处理对象</td>
</tr>
<tr>
<td align="center">%d</td>
<td align="left">格式化整数</td>
</tr>
<tr>
<td align="center">%o</td>
<td align="left">格式化无符号八进制数</td>
</tr>
<tr>
<td align="center">%x</td>
<td align="left">格式化无符号十六进制数</td>
</tr>
<tr>
<td align="center">%X</td>
<td align="left">格式化无符号十六进制数（大写）</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="left">格式化浮点数字，可指定小数点后的精度</td>
</tr>
<tr>
<td align="center">%e</td>
<td align="left">用科学计数法格式化浮点数</td>
</tr>
<tr>
<td align="center">%E</td>
<td align="left">作用同%e，用科学计数法格式化浮点数</td>
</tr>
<tr>
<td align="center">%g</td>
<td align="left">根据值的大小决定使用%f或%e</td>
</tr>
<tr>
<td align="center">%G</td>
<td align="left">作用同%g，根据值的大小决定使用%f或%E</td>
</tr>
</tbody></table>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c&#x27;</span> % <span class="number">97</span>)  <span class="comment"># a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c %c %c&#x27;</span> % (<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>))  <span class="comment"># a b c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d + %d = %d&#x27;</span> % (<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>))  <span class="comment"># 4 + 5 = 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我叫 %s 今年 %d 岁!&quot;</span> % (<span class="string">&#x27;小明&#x27;</span>, <span class="number">10</span>))  <span class="comment"># 我叫 小明 今年 10 岁!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%o&#x27;</span> % <span class="number">10</span>)  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%x&#x27;</span> % <span class="number">10</span>)  <span class="comment"># a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%X&#x27;</span> % <span class="number">10</span>)  <span class="comment"># A</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%f&#x27;</span> % <span class="number">27.658</span>)  <span class="comment"># 27.658000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%e&#x27;</span> % <span class="number">27.658</span>)  <span class="comment"># 2.765800e+01</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%E&#x27;</span> % <span class="number">27.658</span>)  <span class="comment"># 2.765800E+01</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%g&#x27;</span> % <span class="number">27.658</span>)  <span class="comment"># 27.658</span></span><br><span class="line">text = <span class="string">&quot;I am %d years old.&quot;</span> % <span class="number">22</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I said: %s.&quot;</span> % text)  <span class="comment"># I said: I am 22 years old..</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I said: %r.&quot;</span> % text)  <span class="comment"># I said: &#x27;I am 22 years old.&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>a
a b c
4 + 5 = 9
我叫 小明 今年 10 岁!
12
a
A
27.658000
2.765800e+01
2.765800E+01
27.658
I said: I am 22 years old..
I said: &#39;I am 22 years old.&#39;.
</code></pre>
<ul>
<li>格式化操作符辅助指令</li>
</ul>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>m.n</code></td>
<td align="left">m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）</td>
</tr>
<tr>
<td align="center"><code>-</code></td>
<td align="left">用作左对齐</td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td align="left">在正数前面显示加号( + )</td>
</tr>
<tr>
<td align="center"><code>#</code></td>
<td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>
</tr>
<tr>
<td align="center"><code>0</code></td>
<td align="left">显示的数字前面填充’0’而不是默认的空格</td>
</tr>
</tbody></table>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%5.1f&#x27;</span> % <span class="number">27.658</span>)  <span class="comment"># &#x27; 27.7&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.2e&#x27;</span> % <span class="number">27.658</span>)  <span class="comment"># 2.77e+01</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%10d&#x27;</span> % <span class="number">10</span>)  <span class="comment"># &#x27;        10&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%-10d&#x27;</span> % <span class="number">10</span>)  <span class="comment"># &#x27;10        &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%+d&#x27;</span> % <span class="number">10</span>)  <span class="comment"># +10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%#o&#x27;</span> % <span class="number">10</span>)  <span class="comment"># 0o12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%#x&#x27;</span> % <span class="number">108</span>)  <span class="comment"># 0x6c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%010d&#x27;</span> % <span class="number">5</span>)  <span class="comment"># 0000000005</span></span><br></pre></td></tr></table></figure>

<pre><code> 27.7
2.77e+01
        10
10        
+10
0o12
0x6c
0000000005
</code></pre>
<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="1-可变类型与不可变类型"><a href="#1-可变类型与不可变类型" class="headerlink" title="1. 可变类型与不可变类型"></a>1. 可变类型与不可变类型</h2><ul>
<li>序列是以连续的整数为索引，与此不同的是，字典以”关键字”为索引，关键字可以是任意不可变类型，通常用字符串或数值。</li>
<li>字典是 Python 唯一的一个 <u>映射类型</u>，字符串、元组、列表属于<u>序列类型</u>。</li>
</ul>
<p>那么如何快速判断一个数据类型 <code>X</code> 是不是可变类型的呢？两种方法：</p>
<ul>
<li>麻烦方法：用 <code>id(X)</code> 函数，对 X 进行某种操作，比较操作前后的 <code>id</code>，如果不一样，则 <code>X</code> 不可变，如果一样，则 <code>X</code> 可变。</li>
<li>便捷方法：用 <code>hash(X)</code>，只要不报错，证明 <code>X</code> 可被哈希，即不可变，反过来不可被哈希，即可变。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(i))  <span class="comment"># 140732167000896</span></span><br><span class="line">i = i + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(i))  <span class="comment"># 140732167000960</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l))  <span class="comment"># 4300825160</span></span><br><span class="line">l.append(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l))  <span class="comment"># 4300825160</span></span><br></pre></td></tr></table></figure>

<pre><code>140731832701760
140731832701824
2131670369800
2131670369800
</code></pre>
<ul>
<li>整数 <code>i</code> 在加 1 之后的 <code>id</code> 和之前不一样，因此加完之后的这个 <code>i</code> (虽然名字没变)，但不是加之前的那个 <code>i</code> 了，因此整数是不可变类型。</li>
<li>列表 <code>l</code> 在附加 <code>&#39;Python&#39;</code> 之后的 <code>id</code> 和之前一样，因此列表是可变类型。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hash</span>(<span class="string">&#x27;Name&#x27;</span>))  <span class="comment"># 7047218704141848153</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hash</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;Python&#x27;</span>)))  <span class="comment"># 1704535747474881831</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hash</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;Python&#x27;</span>]))</span><br><span class="line"><span class="comment"># TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>-6668157630988609386
-1857436431894091236



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-1-6416367464f8&gt; in &lt;module&gt;()
      3 print(hash((1, 2, &#39;Python&#39;)))  # 1704535747474881831
      4 
----&gt; 5 print(hash([1, 2, &#39;Python&#39;]))
      6 # TypeError: unhashable type: &#39;list&#39;


TypeError: unhashable type: &#39;list&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hash</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;))</span><br><span class="line"><span class="comment"># TypeError: unhashable type: &#x27;set&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数值、字符和元组 都能被哈希，因此它们是不可变类型。</li>
<li>列表、集合、字典不能被哈希，因此它是可变类型。</li>
</ul>
<h2 id="2-字典的定义"><a href="#2-字典的定义" class="headerlink" title="2. 字典的定义"></a>2. 字典的定义</h2><p>字典 是无序的 键:值（<code>key:value</code>）对集合，键必须是互不相同的（在同一个字典之内）。</p>
<ul>
<li><code>dict</code> 内部存放的顺序和 <code>key</code> 放入的顺序是没有关系的。</li>
<li><code>dict</code> 查找和插入的速度极快，不会随着 <code>key</code> 的增加而增加，但是需要占用大量的内存。</li>
</ul>
<p>字典 定义语法为 <code>&#123;元素1, 元素2, ..., 元素n&#125;</code></p>
<ul>
<li>其中每一个元素是一个「键值对」– 键:值 (<code>key:value</code>)</li>
<li>关键点是「大括号 {}」,「逗号 ,」和「冒号 :」</li>
<li>大括号 – 把所有元素绑在一起</li>
<li>逗号 – 将每个键值对分开</li>
<li>冒号 – 将键和值分开</li>
</ul>
<h2 id="3-创建和访问字典"><a href="#3-创建和访问字典" class="headerlink" title="3. 创建和访问字典"></a>3. 创建和访问字典</h2><p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">brand = [<span class="string">&#x27;李宁&#x27;</span>, <span class="string">&#x27;耐克&#x27;</span>, <span class="string">&#x27;阿迪达斯&#x27;</span>]</span><br><span class="line">slogan = [<span class="string">&#x27;一切皆有可能&#x27;</span>, <span class="string">&#x27;Just do it&#x27;</span>, <span class="string">&#x27;Impossible is nothing&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;耐克的口号是:&#x27;</span>, slogan[brand.index(<span class="string">&#x27;耐克&#x27;</span>)])  </span><br><span class="line"><span class="comment"># 耐克的口号是: Just do it</span></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;李宁&#x27;</span>: <span class="string">&#x27;一切皆有可能&#x27;</span>, <span class="string">&#x27;耐克&#x27;</span>: <span class="string">&#x27;Just do it&#x27;</span>, <span class="string">&#x27;阿迪达斯&#x27;</span>: <span class="string">&#x27;Impossible is nothing&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;耐克的口号是:&#x27;</span>, dic[<span class="string">&#x27;耐克&#x27;</span>])  </span><br><span class="line"><span class="comment"># 耐克的口号是: Just do it</span></span><br></pre></td></tr></table></figure>

<pre><code>耐克的口号是: Just do it
耐克的口号是: Just do it
</code></pre>
<p>【例子】通过字符串或数值作为<code>key</code>来创建字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="number">1</span>: <span class="string">&#x27;one&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;two&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;three&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic1)  <span class="comment"># &#123;1: &#x27;one&#x27;, 2: &#x27;two&#x27;, 3: &#x27;three&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dic1[<span class="number">1</span>])  <span class="comment"># one</span></span><br><span class="line"><span class="built_in">print</span>(dic1[<span class="number">4</span>])  <span class="comment"># KeyError: 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>&#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;
one



---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-2-bb8d02bd63a3&gt; in &lt;module&gt;()
      2 print(dic1)  # &#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;
      3 print(dic1[1])  # one
----&gt; 4 print(dic1[4])  # KeyError: 4


KeyError: 4
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic2 = &#123;<span class="string">&#x27;rice&#x27;</span>: <span class="number">35</span>, <span class="string">&#x27;wheat&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;corn&#x27;</span>: <span class="number">67</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic2)  <span class="comment"># &#123;&#x27;wheat&#x27;: 101, &#x27;corn&#x27;: 67, &#x27;rice&#x27;: 35&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dic2[<span class="string">&#x27;rice&#x27;</span>])  <span class="comment"># 35</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67&#125;
35
</code></pre>
<p>注意：如果我们取的键在字典中不存在，会直接报错<code>KeyError</code>。</p>
<p>【例子】通过元组作为<code>key</code>来创建字典，但一般不这样使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>): <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">12</span>, <span class="number">3</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;(1, 2, 3): &#x27;Tom&#x27;, &#x27;Age&#x27;: 12, 3: [3, 5, 7]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dic))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]&#125;
&lt;class &#39;dict&#39;&gt;
</code></pre>
<p>通过构造函数<code>dict</code>来创建字典。</p>
<ul>
<li><code>dict()</code> 创建一个空的字典。</li>
</ul>
<p>【例子】通过<code>key</code>直接把数据放入字典中，但一个<code>key</code>只能对应一个<code>value</code>，多次对一个<code>key</code>放入 <code>value</code>，后面的值会把前面的值冲掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>()</span><br><span class="line">dic[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line">dic[<span class="string">&#x27;b&#x27;</span>] = <span class="number">2</span></span><br><span class="line">dic[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br><span class="line"></span><br><span class="line">dic[<span class="string">&#x27;a&#x27;</span>] = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br><span class="line"></span><br><span class="line">dic[<span class="string">&#x27;d&#x27;</span>] = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;
&#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;
&#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;
</code></pre>
<ul>
<li><code>dict(mapping)</code> new dictionary initialized from a mapping object’s (key, value) pairs</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = <span class="built_in">dict</span>([(<span class="string">&#x27;apple&#x27;</span>, <span class="number">4139</span>), (<span class="string">&#x27;peach&#x27;</span>, <span class="number">4127</span>), (<span class="string">&#x27;cherry&#x27;</span>, <span class="number">4098</span>)])</span><br><span class="line"><span class="built_in">print</span>(dic1)  <span class="comment"># &#123;&#x27;cherry&#x27;: 4098, &#x27;apple&#x27;: 4139, &#x27;peach&#x27;: 4127&#125;</span></span><br><span class="line"></span><br><span class="line">dic2 = <span class="built_in">dict</span>(((<span class="string">&#x27;apple&#x27;</span>, <span class="number">4139</span>), (<span class="string">&#x27;peach&#x27;</span>, <span class="number">4127</span>), (<span class="string">&#x27;cherry&#x27;</span>, <span class="number">4098</span>)))</span><br><span class="line"><span class="built_in">print</span>(dic2)  <span class="comment"># &#123;&#x27;peach&#x27;: 4127, &#x27;cherry&#x27;: 4098, &#x27;apple&#x27;: 4139&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098&#125;
&#123;&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098&#125;
</code></pre>
<ul>
<li><code>dict(**kwargs)</code> -&gt; new dictionary initialized with the name&#x3D;value pairs in the keyword argument list.  For example:  dict(one&#x3D;1, two&#x3D;2)</li>
</ul>
<p>【例子】这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>(name=<span class="string">&#x27;Tom&#x27;</span>, age=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 10&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dic))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10&#125;
&lt;class &#39;dict&#39;&gt;
</code></pre>
<h2 id="4-字典的内置方法"><a href="#4-字典的内置方法" class="headerlink" title="4. 字典的内置方法"></a>4. 字典的内置方法</h2><ul>
<li><code>dict.fromkeys(seq[, value])</code> 用于创建一个新字典，以序列 <code>seq</code> 中元素做字典的键，<code>value</code> 为字典所有键对应的初始值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seq = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>)</span><br><span class="line">dic1 = <span class="built_in">dict</span>.fromkeys(seq)</span><br><span class="line"><span class="built_in">print</span>(dic1)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: None, &#x27;age&#x27;: None, &#x27;sex&#x27;: None&#125;</span></span><br><span class="line"></span><br><span class="line">dic2 = <span class="built_in">dict</span>.fromkeys(seq, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(dic2)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: 10, &#x27;age&#x27;: 10, &#x27;sex&#x27;: 10&#125;</span></span><br><span class="line"></span><br><span class="line">dic3 = <span class="built_in">dict</span>.fromkeys(seq, (<span class="string">&#x27;小马&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;男&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dic3)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: (&#x27;小马&#x27;, &#x27;8&#x27;, &#x27;男&#x27;), &#x27;age&#x27;: (&#x27;小马&#x27;, &#x27;8&#x27;, &#x27;男&#x27;), &#x27;sex&#x27;: (&#x27;小马&#x27;, &#x27;8&#x27;, &#x27;男&#x27;)&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;name&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None&#125;
&#123;&#39;name&#39;: 10, &#39;age&#39;: 10, &#39;sex&#39;: 10&#125;
&#123;&#39;name&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;age&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;sex&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;)&#125;
</code></pre>
<ul>
<li><code>dict.keys()</code>返回一个可迭代对象，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有键。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;lsgogroup&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic.keys())  <span class="comment"># dict_keys([&#x27;Name&#x27;, &#x27;Age&#x27;])</span></span><br><span class="line">lst = <span class="built_in">list</span>(dic.keys())  <span class="comment"># 转换为列表</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [&#x27;Name&#x27;, &#x27;Age&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>dict_keys([&#39;Name&#39;, &#39;Age&#39;])
[&#39;Name&#39;, &#39;Age&#39;]
</code></pre>
<ul>
<li><code>dict.values()</code>返回一个迭代器，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;Sex&#x27;</span>: <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic.values())</span><br><span class="line"><span class="comment"># dict_values([&#x27;female&#x27;, 7, &#x27;Zara&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dic.values()))</span><br><span class="line"><span class="comment"># [7, &#x27;female&#x27;, &#x27;Zara&#x27;]</span></span><br></pre></td></tr></table></figure>

<pre><code>dict_values([&#39;female&#39;, 7, &#39;Zara&#39;])
[&#39;female&#39;, 7, &#39;Zara&#39;]
</code></pre>
<ul>
<li><code>dict.items()</code>以列表返回可遍历的 (键, 值) 元组数组。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Lsgogroup&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic.items())</span><br><span class="line"><span class="comment"># dict_items([(&#x27;Name&#x27;, &#x27;Lsgogroup&#x27;), (&#x27;Age&#x27;, 7)])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(dic.items()))</span><br><span class="line"><span class="comment"># ((&#x27;Name&#x27;, &#x27;Lsgogroup&#x27;), (&#x27;Age&#x27;, 7))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dic.items()))</span><br><span class="line"><span class="comment"># [(&#x27;Name&#x27;, &#x27;Lsgogroup&#x27;), (&#x27;Age&#x27;, 7)]</span></span><br></pre></td></tr></table></figure>

<pre><code>dict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])
((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))
[(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]
</code></pre>
<ul>
<li><code>dict.get(key, default=None)</code> 返回指定键的值，如果值不在字典中返回默认值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Lsgogroup&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">27</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Age 值为 : %s&quot;</span> % dic.get(<span class="string">&#x27;Age&#x27;</span>))  <span class="comment"># Age 值为 : 27</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sex 值为 : %s&quot;</span> % dic.get(<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&quot;NA&quot;</span>))  <span class="comment"># Sex 值为 : NA</span></span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;Name&#x27;: &#x27;Lsgogroup&#x27;, &#x27;Age&#x27;: 27&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>Age 值为 : 27
Sex 值为 : NA
&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&#125;
</code></pre>
<ul>
<li><code>dict.setdefault(key, default=None)</code>和<code>get()</code>方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Lsgogroup&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Age 键的值为 : %s&quot;</span> % dic.setdefault(<span class="string">&#x27;Age&#x27;</span>, <span class="literal">None</span>))  <span class="comment"># Age 键的值为 : 7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sex 键的值为 : %s&quot;</span> % dic.setdefault(<span class="string">&#x27;Sex&#x27;</span>, <span class="literal">None</span>))  <span class="comment"># Sex 键的值为 : None</span></span><br><span class="line"><span class="built_in">print</span>(dic)  </span><br><span class="line"><span class="comment"># &#123;&#x27;Age&#x27;: 7, &#x27;Name&#x27;: &#x27;Lsgogroup&#x27;, &#x27;Sex&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>Age 键的值为 : 7
Sex 键的值为 : None
&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Sex&#39;: None&#125;
</code></pre>
<ul>
<li><code>key in dict</code> <code>in</code> 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回<code>true</code>，否则返回<code>false</code>。而<code>not in</code>操作符刚好相反，如果键在字典 dict 里返回<code>false</code>，否则返回<code>true</code>。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Lsgogroup&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># in 检测键 Age 是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Age&#x27;</span> <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;键 Age 存在&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;键 Age 不存在&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测键 Sex 是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;键 Sex 存在&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;键 Sex 不存在&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># not in 检测键 Age 是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Age&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;键 Age 不存在&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;键 Age 存在&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键 Age 存在</span></span><br><span class="line"><span class="comment"># 键 Sex 不存在</span></span><br><span class="line"><span class="comment"># 键 Age 存在</span></span><br></pre></td></tr></table></figure>

<pre><code>键 Age 存在
键 Sex 不存在
键 Age 存在
</code></pre>
<ul>
<li><code>dict.pop(key[,default])</code>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值。<code>key</code> 值必须给出。若<code>key</code>不存在，则返回 <code>default</code> 值。</li>
<li><code>del dict[key]</code> 删除字典给定键 <code>key</code> 所对应的值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="number">1</span>: <span class="string">&quot;a&quot;</span>, <span class="number">2</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dic1.pop(<span class="number">1</span>), dic1)  <span class="comment"># a &#123;2: [1, 2]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认值，必须添加，否则报错</span></span><br><span class="line"><span class="built_in">print</span>(dic1.pop(<span class="number">3</span>, <span class="string">&quot;nokey&quot;</span>), dic1)  <span class="comment"># nokey &#123;2: [1, 2]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> dic1[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(dic1)  <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>a &#123;2: [1, 2]&#125;
nokey &#123;2: [1, 2]&#125;
&#123;&#125;
</code></pre>
<ul>
<li><code>dict.popitem()</code>随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="number">1</span>: <span class="string">&quot;a&quot;</span>, <span class="number">2</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dic1.popitem())  <span class="comment"># &#123;2: [1, 2]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dic1)  <span class="comment"># (1, &#x27;a&#x27;)</span></span><br></pre></td></tr></table></figure>

<pre><code>(2, [1, 2])
&#123;1: &#39;a&#39;&#125;
</code></pre>
<ul>
<li><code>dict.clear()</code>用于删除字典内所有元素。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典长度 : %d&quot;</span> % <span class="built_in">len</span>(dic))  <span class="comment"># 字典长度 : 2</span></span><br><span class="line">dic.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典删除后长度 : %d&quot;</span> % <span class="built_in">len</span>(dic))  </span><br><span class="line"><span class="comment"># 字典删除后长度 : 0</span></span><br></pre></td></tr></table></figure>

<pre><code>字典长度 : 2
字典删除后长度 : 0
</code></pre>
<ul>
<li><code>dict.copy()</code>返回一个字典的浅复制。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Lsgogroup&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">dic2 = dic1.copy()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dic2&quot;</span>)  </span><br><span class="line"><span class="comment"># &#123;&#x27;Age&#x27;: 7, &#x27;Name&#x27;: &#x27;Lsgogroup&#x27;, &#x27;Class&#x27;: &#x27;First&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>dic2
</code></pre>
<p>【例子】直接赋值和 copy 的区别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;lsgogroup&#x27;</span>, <span class="string">&#x27;num&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用对象</span></span><br><span class="line">dic2 = dic1  </span><br><span class="line"><span class="comment"># 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span></span><br><span class="line">dic3 = dic1.copy()  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dic1))  <span class="comment"># 148635574728</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dic2))  <span class="comment"># 148635574728</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dic3))  <span class="comment"># 148635574344</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 data 数据</span></span><br><span class="line">dic1[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">dic1[<span class="string">&#x27;num&#x27;</span>].remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(dic1)  <span class="comment"># &#123;&#x27;user&#x27;: &#x27;root&#x27;, &#x27;num&#x27;: [2, 3]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dic2)  <span class="comment"># &#123;&#x27;user&#x27;: &#x27;root&#x27;, &#x27;num&#x27;: [2, 3]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dic3)  <span class="comment"># &#123;&#x27;user&#x27;: &#x27;runoob&#x27;, &#x27;num&#x27;: [2, 3]&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>2131669221448
2131669221448
2131669225120
&#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;
&#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;
&#123;&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [2, 3]&#125;
</code></pre>
<ul>
<li><code>dict.update(dict2)</code>把字典参数 <code>dict2</code> 的 <code>key:value</code>对 更新到字典 <code>dict</code> 里。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Lsgogroup&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line">dic2 = &#123;<span class="string">&#x27;Sex&#x27;</span>: <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">8</span>&#125;</span><br><span class="line">dic.update(dic2)</span><br><span class="line"><span class="built_in">print</span>(dic)  </span><br><span class="line"><span class="comment"># &#123;&#x27;Sex&#x27;: &#x27;female&#x27;, &#x27;Age&#x27;: 8, &#x27;Name&#x27;: &#x27;Lsgogroup&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 8, &#39;Sex&#39;: &#39;female&#39;&#125;
</code></pre>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>Python 中<code>set</code>与<code>dict</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>set</code>中，没有重复的<code>key</code>。</p>
<p>注意，<code>key</code>为不可变类型，即可哈希的值。</p>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">num = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))  <span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;dict&#39;&gt;
&lt;class &#39;set&#39;&gt;
</code></pre>
<h2 id="1-集合的创建"><a href="#1-集合的创建" class="headerlink" title="1. 集合的创建"></a>1. 集合的创建</h2><ul>
<li>先创建对象再加入元素。</li>
<li>在创建空集合的时候只能使用<code>s = set()</code>，因为<code>s = &#123;&#125;</code>创建的是空字典。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = <span class="built_in">set</span>()</span><br><span class="line">basket.add(<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line">basket.add(<span class="string">&#x27;banana&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(basket)  <span class="comment"># &#123;&#x27;banana&#x27;, &#x27;apple&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;banana&#39;, &#39;apple&#39;&#125;
</code></pre>
<ul>
<li>直接把一堆元素用花括号括起来<code>&#123;元素1, 元素2, ..., 元素n&#125;</code>。</li>
<li>重复元素在<code>set</code>中会被自动被过滤。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(basket)  <span class="comment"># &#123;&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;orange&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;
</code></pre>
<ul>
<li>使用<code>set(value)</code>工厂函数，把列表或元组转换成集合。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  </span><br><span class="line"><span class="comment"># &#123;&#x27;r&#x27;, &#x27;b&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">b = <span class="built_in">set</span>((<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Lsgogroup&quot;</span>, <span class="string">&quot;Taobao&quot;</span>, <span class="string">&quot;Taobao&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(b)  </span><br><span class="line"><span class="comment"># &#123;&#x27;Taobao&#x27;, &#x27;Lsgogroup&#x27;, &#x27;Google&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">set</span>([<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Lsgogroup&quot;</span>, <span class="string">&quot;Taobao&quot;</span>, <span class="string">&quot;Google&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(c)  </span><br><span class="line"><span class="comment"># &#123;&#x27;Taobao&#x27;, &#x27;Lsgogroup&#x27;, &#x27;Google&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;
&#123;&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;&#125;
&#123;&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;&#125;
</code></pre>
<p>【例子】去掉列表中重复的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">        temp.append(item)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(temp)  <span class="comment"># [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))  <span class="comment"># [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<pre><code>[0, 1, 2, 3, 4, 5]
[0, 1, 2, 3, 4, 5]
</code></pre>
<p>从结果发现集合的两个特点：无序 (unordered) 和唯一 (unique)。</p>
<p>由于 <code>set</code> 存储的是无序集合，所以我们不可以为集合创建索引或执行切片(slice)操作，也没有键(keys)可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。</p>
<h2 id="2-访问集合中的值"><a href="#2-访问集合中的值" class="headerlink" title="2. 访问集合中的值"></a>2. 访问集合中的值</h2><ul>
<li>可以使用<code>len()</code>內建函数得到集合的大小。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<pre><code>3
</code></pre>
<ul>
<li>可以使用<code>for</code>把集合中的数据一个个读取出来。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Baidu</span></span><br><span class="line"><span class="comment"># Google</span></span><br><span class="line"><span class="comment"># Taobao</span></span><br></pre></td></tr></table></figure>

<pre><code>Baidu
Taobao
Google
</code></pre>
<ul>
<li>可以通过<code>in</code>或<code>not in</code>判断一个元素是否在集合中已经存在</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Taobao&#x27;</span> <span class="keyword">in</span> s)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Facebook&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> s)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<pre><code>True
True
</code></pre>
<h2 id="3-集合的内置方法"><a href="#3-集合的内置方法" class="headerlink" title="3. 集合的内置方法"></a>3. 集合的内置方法</h2><ul>
<li><code>set.add(elmnt)</code>用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">fruits.add(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  </span><br><span class="line"><span class="comment"># &#123;&#x27;orange&#x27;, &#x27;cherry&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">fruits.add(<span class="string">&quot;apple&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  </span><br><span class="line"><span class="comment"># &#123;&#x27;orange&#x27;, &#x27;cherry&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;
&#123;&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;
</code></pre>
<ul>
<li><code>set.update(set)</code>用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;google&quot;</span>, <span class="string">&quot;baidu&quot;</span>, <span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line">x.update(y)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># &#123;&#x27;cherry&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;google&#x27;, &#x27;baidu&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">y.update([<span class="string">&quot;lsgo&quot;</span>, <span class="string">&quot;dreamtech&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># &#123;&#x27;lsgo&#x27;, &#x27;baidu&#x27;, &#x27;dreamtech&#x27;, &#x27;apple&#x27;, &#x27;google&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;google&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;apple&#39;, &#39;baidu&#39;&#125;
&#123;&#39;apple&#39;, &#39;dreamtech&#39;, &#39;lsgo&#39;, &#39;google&#39;, &#39;baidu&#39;&#125;
</code></pre>
<ul>
<li><code>set.remove(item)</code> 用于移除集合中的指定元素。如果元素不存在，则会发生错误。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">fruits.remove(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># &#123;&#x27;apple&#x27;, &#x27;cherry&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;cherry&#39;, &#39;apple&#39;&#125;
</code></pre>
<ul>
<li><code>set.discard(value)</code> 用于移除指定的集合元素。<code>remove()</code> 方法在移除一个不存在的元素时会发生错误，而 <code>discard()</code> 方法不会。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">fruits.discard(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># &#123;&#x27;apple&#x27;, &#x27;cherry&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;cherry&#39;, &#39;apple&#39;&#125;
</code></pre>
<ul>
<li><code>set.pop()</code> 用于随机移除一个元素。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">x = fruits.pop()</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># &#123;&#x27;cherry&#x27;, &#x27;apple&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># banana</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;banana&#39;, &#39;apple&#39;&#125;
cherry
</code></pre>
<p>由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。</p>
<ul>
<li><code>set.intersection(set1, set2)</code> 返回两个集合的交集。</li>
<li><code>set1 &amp; set2</code> 返回两个集合的交集。</li>
<li><code>set.intersection_update(set1, set2)</code> 交集，在原始的集合上移除不重叠的元素。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;r&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># &#123;&#x27;c&#x27;, &#x27;a&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;z&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">c = a.intersection(b)</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;c&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)  <span class="comment"># &#123;&#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;r&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">a.intersection_update(b)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;c&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;
&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;
&#123;&#39;a&#39;, &#39;c&#39;&#125;
&#123;&#39;a&#39;, &#39;c&#39;&#125;
&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;
&#123;&#39;a&#39;, &#39;c&#39;&#125;
</code></pre>
<ul>
<li><code>set.union(set1, set2)</code> 返回两个集合的并集。</li>
<li><code>set1 | set2</code> 返回两个集合的并集。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;r&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># &#123;&#x27;c&#x27;, &#x27;a&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;z&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)  </span><br><span class="line"><span class="comment"># &#123;&#x27;l&#x27;, &#x27;d&#x27;, &#x27;m&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;z&#x27;, &#x27;c&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">c = a.union(b)</span><br><span class="line"><span class="built_in">print</span>(c)  </span><br><span class="line"><span class="comment"># &#123;&#x27;c&#x27;, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;b&#x27;, &#x27;z&#x27;, &#x27;l&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;
&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;
&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;
&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;
</code></pre>
<ul>
<li><code>set.difference(set)</code> 返回集合的差集。</li>
<li><code>set1 - set2</code> 返回集合的差集。</li>
<li><code>set.difference_update(set)</code> 集合的差集，直接在原来的集合中移除元素，没有返回值。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;r&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># &#123;&#x27;c&#x27;, &#x27;a&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;z&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">c = a.difference(b)</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># &#123;&#x27;b&#x27;, &#x27;d&#x27;, &#x27;r&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a - b)  <span class="comment"># &#123;&#x27;d&#x27;, &#x27;b&#x27;, &#x27;r&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;r&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;&#125;</span></span><br><span class="line">a.difference_update(b)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;d&#x27;, &#x27;r&#x27;, &#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;
&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;
&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;
&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;
&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;
&#123;&#39;b&#39;, &#39;r&#39;, &#39;d&#39;&#125;
</code></pre>
<ul>
<li><code>set.symmetric_difference(set)</code>返回集合的异或。</li>
<li><code>set1 ^ set2</code> 返回集合的异或。</li>
<li><code>set.symmetric_difference_update(set)</code>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;r&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># &#123;&#x27;c&#x27;, &#x27;a&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;z&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">c = a.symmetric_difference(b)</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># &#123;&#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;b&#x27;, &#x27;z&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)  <span class="comment"># &#123;&#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;b&#x27;, &#x27;z&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;r&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;&#125;</span></span><br><span class="line">a.symmetric_difference_update(b)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;&#x27;r&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;l&#x27;, &#x27;z&#x27;, &#x27;d&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;
&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;
&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&#125;
&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&#125;
&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;
&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;
</code></pre>
<ul>
<li><code>set.issubset(set)</code>判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li>
<li><code>set1 &lt;= set2</code> 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;f&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line">z = x.issubset(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(x &lt;= y)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">x = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;f&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">z = x.issubset(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(x &lt;= y)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<pre><code>True
True
False
False
</code></pre>
<ul>
<li><code>set.issuperset(set)</code>用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li>
<li><code>set1 &gt;= set2</code> 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="string">&quot;f&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">z = x.issuperset(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(x &gt;= y)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">x = &#123;<span class="string">&quot;f&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">z = x.issuperset(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(x &gt;= y)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<pre><code>True
True
False
False
</code></pre>
<ul>
<li><code>set.isdisjoint(set)</code> 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="string">&quot;f&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">z = x.isdisjoint(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">x = &#123;<span class="string">&quot;f&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;g&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">z = x.isdisjoint(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<pre><code>False
True
</code></pre>
<h2 id="4-集合的转换"><a href="#4-集合的转换" class="headerlink" title="4. 集合的转换"></a>4. 集合的转换</h2><p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">se = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line">li = <span class="built_in">list</span>(se)</span><br><span class="line">tu = <span class="built_in">tuple</span>(se)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(se, <span class="built_in">type</span>(se))  <span class="comment"># &#123;0, 1, 2, 3&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(li, <span class="built_in">type</span>(li))  <span class="comment"># [0, 1, 2, 3] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(tu, <span class="built_in">type</span>(tu))  <span class="comment"># (0, 1, 2, 3) &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>&#123;0, 1, 2, 3&#125; &lt;class &#39;set&#39;&gt;
[0, 1, 2, 3] &lt;class &#39;list&#39;&gt;
(0, 1, 2, 3) &lt;class &#39;tuple&#39;&gt;
</code></pre>
<h2 id="5-不可变集合"><a href="#5-不可变集合" class="headerlink" title="5. 不可变集合"></a>5. 不可变集合</h2><p>Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫<code>frozenset</code>。需要注意的是<code>frozenset</code>仍然可以进行集合操作，只是不能用带有<code>update</code>的方法。</p>
<ul>
<li><code>frozenset([iterable])</code> 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">frozenset</span>(<span class="built_in">range</span>(<span class="number">10</span>))  <span class="comment"># 生成一个新的不可变集合</span></span><br><span class="line"><span class="built_in">print</span>(a)  </span><br><span class="line"><span class="comment"># frozenset(&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;)</span></span><br><span class="line"></span><br><span class="line">b = <span class="built_in">frozenset</span>(<span class="string">&#x27;lsgogroup&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)  </span><br><span class="line"><span class="comment"># frozenset(&#123;&#x27;g&#x27;, &#x27;s&#x27;, &#x27;p&#x27;, &#x27;r&#x27;, &#x27;u&#x27;, &#x27;o&#x27;, &#x27;l&#x27;&#125;)</span></span><br></pre></td></tr></table></figure>

<pre><code>frozenset(&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;)
frozenset(&#123;&#39;l&#39;, &#39;g&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;s&#39;, &#39;p&#39;&#125;)
</code></pre>
<h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><p>在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持一些通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。</p>
<h2 id="1-针对序列的内置函数"><a href="#1-针对序列的内置函数" class="headerlink" title="1. 针对序列的内置函数"></a>1. 针对序列的内置函数</h2><ul>
<li><code>list(sub)</code> 把一个可迭代对象转换为列表。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">list</span>()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># []</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;I Love LsgoGroup&#x27;</span></span><br><span class="line">b = <span class="built_in">list</span>(b)</span><br><span class="line"><span class="built_in">print</span>(b)  </span><br><span class="line"><span class="comment"># [&#x27;I&#x27;, &#x27; &#x27;, &#x27;L&#x27;, &#x27;o&#x27;, &#x27;v&#x27;, &#x27;e&#x27;, &#x27; &#x27;, &#x27;L&#x27;, &#x27;s&#x27;, &#x27;g&#x27;, &#x27;o&#x27;, &#x27;G&#x27;, &#x27;r&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;p&#x27;]</span></span><br><span class="line"></span><br><span class="line">c = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>)</span><br><span class="line">c = <span class="built_in">list</span>(c)</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># [1, 1, 2, 3, 5, 8]</span></span><br></pre></td></tr></table></figure>

<pre><code>[]
[&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]
[1, 1, 2, 3, 5, 8]
</code></pre>
<ul>
<li><code>tuple(sub)</code> 把一个可迭代对象转换为元组。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># ()</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;I Love LsgoGroup&#x27;</span></span><br><span class="line">b = <span class="built_in">tuple</span>(b)</span><br><span class="line"><span class="built_in">print</span>(b)  </span><br><span class="line"><span class="comment"># (&#x27;I&#x27;, &#x27; &#x27;, &#x27;L&#x27;, &#x27;o&#x27;, &#x27;v&#x27;, &#x27;e&#x27;, &#x27; &#x27;, &#x27;L&#x27;, &#x27;s&#x27;, &#x27;g&#x27;, &#x27;o&#x27;, &#x27;G&#x27;, &#x27;r&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;p&#x27;)</span></span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">c = <span class="built_in">tuple</span>(c)</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># (1, 1, 2, 3, 5, 8)</span></span><br></pre></td></tr></table></figure>

<pre><code>()
(&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)
(1, 1, 2, 3, 5, 8)
</code></pre>
<ul>
<li><code>str(obj)</code> 把obj对象转换为字符串</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line">a = <span class="built_in">str</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 123</span></span><br></pre></td></tr></table></figure>

<pre><code>123
</code></pre>
<ul>
<li><code>len(s)</code> 返回对象（字符、列表、元组等）长度或元素个数。<ul>
<li><code>s</code> – 对象。</li>
</ul>
</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">list</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">b = (<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(b))  <span class="comment"># 16</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;I Love LsgoGroup&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(c))  <span class="comment"># 16</span></span><br></pre></td></tr></table></figure>

<pre><code>0
16
16
</code></pre>
<ul>
<li><code>max(sub)</code>返回序列或者参数集合中的最大值</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>([-<span class="number">8</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">83</span>]))  <span class="comment"># 99</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="string">&#x27;IloveLsgoGroup&#x27;</span>))  <span class="comment"># v</span></span><br></pre></td></tr></table></figure>

<pre><code>5
99
v
</code></pre>
<ul>
<li><code>min(sub)</code>返回序列或参数集合中的最小值</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>([-<span class="number">8</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">83</span>]))  <span class="comment"># -8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="string">&#x27;IloveLsgoGroup&#x27;</span>))  <span class="comment"># G</span></span><br></pre></td></tr></table></figure>

<pre><code>1
-8
G
</code></pre>
<ul>
<li><code>sum(iterable[, start=0])</code> 返回序列<code>iterable</code>与可选参数<code>start</code>的总和。</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))  <span class="comment"># 25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], <span class="number">10</span>))  <span class="comment"># 35</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)))  <span class="comment"># 25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>), <span class="number">20</span>))  <span class="comment"># 45</span></span><br></pre></td></tr></table></figure>

<pre><code>25
35
25
45
</code></pre>
<ul>
<li><code>sorted(iterable, key=None, reverse=False) </code> 对所有可迭代的对象进行排序操作。<ul>
<li><code>iterable</code> – 可迭代对象。</li>
<li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>
<li><code>reverse</code> – 排序规则，<code>reverse = True</code> 降序 ， <code>reverse = False</code> 升序（默认）。</li>
<li>返回重新排序的列表。</li>
</ul>
</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [-<span class="number">8</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">83</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(x))  <span class="comment"># [-8, 3, 7, 83, 99]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(x, reverse=<span class="literal">True</span>))  <span class="comment"># [99, 83, 7, 3, -8]</span></span><br><span class="line"></span><br><span class="line">t = (&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;a&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;b&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">10</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;c&quot;</span>&#125;)</span><br><span class="line">x = <span class="built_in">sorted</span>(t, key=<span class="keyword">lambda</span> a: a[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [&#123;&#x27;age&#x27;: 10, &#x27;name&#x27;: &#x27;c&#x27;&#125;, &#123;&#x27;age&#x27;: 20, &#x27;name&#x27;: &#x27;a&#x27;&#125;, &#123;&#x27;age&#x27;: 25, &#x27;name&#x27;: &#x27;b&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<pre><code>[-8, 3, 7, 83, 99]
[99, 83, 7, 3, -8]
[&#123;&#39;age&#39;: 10, &#39;name&#39;: &#39;c&#39;&#125;, &#123;&#39;age&#39;: 20, &#39;name&#39;: &#39;a&#39;&#125;, &#123;&#39;age&#39;: 25, &#39;name&#39;: &#39;b&#39;&#125;]
</code></pre>
<ul>
<li><code>reversed(seq)</code> 函数返回一个反转的迭代器。<ul>
<li><code>seq</code> – 要转换的序列，可以是 tuple, string, list 或 range。</li>
</ul>
</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;lsgogroup&#x27;</span></span><br><span class="line">x = <span class="built_in">reversed</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;reversed&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># &lt;reversed object at 0x000002507E8EC2C8&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(x))</span><br><span class="line"><span class="comment"># [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;g&#x27;, &#x27;o&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;l&#x27;]</span></span><br><span class="line"></span><br><span class="line">t = (<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(t)))</span><br><span class="line"><span class="comment"># [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;g&#x27;, &#x27;o&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;l&#x27;]</span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(r)))</span><br><span class="line"><span class="comment"># [8, 7, 6, 5]</span></span><br><span class="line"></span><br><span class="line">x = [-<span class="number">8</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">83</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(x)))</span><br><span class="line"><span class="comment"># [83, 7, 3, 99, -8]</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;reversed&#39;&gt;
&lt;reversed object at 0x000001F0517DFD68&gt;
[&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]
[&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]
[8, 7, 6, 5]
[83, 7, 3, 99, -8]
</code></pre>
<ul>
<li><code>enumerate(sequence, [start=0])</code></li>
</ul>
<p>【例子】用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seasons = [<span class="string">&#x27;Spring&#x27;</span>, <span class="string">&#x27;Summer&#x27;</span>, <span class="string">&#x27;Fall&#x27;</span>, <span class="string">&#x27;Winter&#x27;</span>]</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons))</span><br><span class="line"><span class="built_in">print</span>(a)  </span><br><span class="line"><span class="comment"># [(0, &#x27;Spring&#x27;), (1, &#x27;Summer&#x27;), (2, &#x27;Fall&#x27;), (3, &#x27;Winter&#x27;)]</span></span><br><span class="line"></span><br><span class="line">b = <span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(b)  </span><br><span class="line"><span class="comment"># [(1, &#x27;Spring&#x27;), (2, &#x27;Summer&#x27;), (3, &#x27;Fall&#x27;), (4, &#x27;Winter&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;,&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(i, element))</span><br><span class="line"><span class="comment"># 0,Spring</span></span><br><span class="line"><span class="comment"># 1,Summer</span></span><br><span class="line"><span class="comment"># 2,Fall</span></span><br><span class="line"><span class="comment"># 3,Winter</span></span><br></pre></td></tr></table></figure>

<pre><code>[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]
[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]
0,Spring
1,Summer
2,Fall
3,Winter
</code></pre>
<ul>
<li><code>zip(iter1 [,iter2 [...]])</code><ul>
<li>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</li>
<li>我们可以使用 <code>list()</code> 转换来输出列表。</li>
<li>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 <code>*</code> 号操作符，可以将元组解压为列表。</li>
</ul>
</li>
</ul>
<p>【例子】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">zipped = <span class="built_in">zip</span>(a, b)</span><br><span class="line"><span class="built_in">print</span>(zipped)  <span class="comment"># &lt;zip object at 0x000000C5D89EDD88&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zipped))  <span class="comment"># [(1, 4), (2, 5), (3, 6)]</span></span><br><span class="line">zipped = <span class="built_in">zip</span>(a, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zipped))  <span class="comment"># [(1, 4), (2, 5), (3, 6)]</span></span><br><span class="line"></span><br><span class="line">a1, a2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(a, b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a1))  <span class="comment"># [1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a2))  <span class="comment"># [4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;zip object at 0x000001F0517E38C8&gt;
[(1, 4), (2, 5), (3, 6)]
[(1, 4), (2, 5), (3, 6)]
[1, 2, 3]
[4, 5, 6]
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云AI学习（二）用Pandas揭秘美国选民的总统喜好</title>
    <url>/2022/11/13/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%A8Pandas%E6%8F%AD%E7%A7%98%E7%BE%8E%E5%9B%BD%E9%80%89%E6%B0%91%E7%9A%84%E6%80%BB%E7%BB%9F%E5%96%9C%E5%A5%BD/</url>
    <content><![CDATA[<h3 id="赛前准备"><a href="#赛前准备" class="headerlink" title="赛前准备"></a>赛前准备</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本次赛事由开源学习组织Datawhale主办，主要带领学习者利用Python进行数据分析以及数据可视化，包含数据集的处理、数据探索与清晰、数据分析、数据可视化四部分，利用pandas、matplotlib、wordcloud等第三方库带大家玩转数据分析～还有丰富礼品等你来领取哦～<br></br>学习赛事地址：<a href="https://tianchi.aliyun.com/competition/entrance/531837/introduction">https://tianchi.aliyun.com/competition/entrance/531837/introduction</a></p>
<h4 id="数据集来源介绍"><a href="#数据集来源介绍" class="headerlink" title="数据集来源介绍"></a>数据集来源介绍</h4><p><strong>所有候选人信息</strong><br></br>该文件为每个候选人提供一份记录，并显示候选人的信息、总收入、从授权委员会收到的转账、付款总额、给授权委员会的转账、库存现金总额、贷款和债务以及其他财务汇总信息。<br></br>数据字段描述详细:<a href="https://www.fec.gov/campaign-finance-data/all-candidates-file-description/">https://www.fec.gov/campaign-finance-data/all-candidates-file-description/</a><br></br>关键字段说明</p>
<ul>
<li>CAND_ID 候选人ID</li>
<li>CAND_NAME 候选人姓名</li>
<li>CAND_PTY_AFFILIATION 候选人党派</li>
</ul>
<p></br>数据来源:<a href="https://www.fec.gov/files/bulk-downloads/2020/weball20.zip">https://www.fec.gov/files/bulk-downloads/2020/weball20.zip</a></p>
<p><strong>候选人委员会链接信息</strong><br></br>该文件显示候选人的身份证号码、候选人的选举年份、联邦选举委员会选举年份、委员会识别号、委员会类型、委员会名称和链接标识号。<br></br>信息描述详细:<a href="https://www.fec.gov/campaign-finance-data/candidate-committee-linkage-file-description/">https://www.fec.gov/campaign-finance-data/candidate-committee-linkage-file-description/</a><br></br>关键字段说明</p>
<ul>
<li>CAND_ID 候选人ID</li>
<li>CAND_ELECTION_YR 候选人选举年份</li>
<li>CMTE_ID 委员会ID</li>
</ul>
<p></br>数据来源:<a href="https://www.fec.gov/files/bulk-downloads/2020/ccl20.zip">https://www.fec.gov/files/bulk-downloads/2020/ccl20.zip</a></p>
<p><strong>个人捐款档案信息</strong><br>【注意】由于文件较大，本数据集只包含2020.7.22-2020.8.20的相关数据，如果需要更全数据可以通过数据来源中的地址下载。<br></br>该文件包含有关收到捐款的委员会、披露捐款的报告、提供捐款的个人、捐款日期、金额和有关捐款的其他信息。<br></br>信息描述详细:<a href="https://www.fec.gov/campaign-finance-data/contributions-individuals-file-description/">https://www.fec.gov/campaign-finance-data/contributions-individuals-file-description/</a><br></br>关键字段说明</p>
<ul>
<li>CMTE_ID  委员会ID</li>
<li>NAME 捐款人姓名</li>
<li>CITY 捐款人所在市</li>
<li>State 捐款人所在州</li>
<li>EMPLOYER 捐款人雇主&#x2F;公司</li>
<li>OCCUPATION 捐款人职业</li>
</ul>
<p></br>数据来源:<a href="https://www.fec.gov/files/bulk-downloads/2020/indiv20.zip">https://www.fec.gov/files/bulk-downloads/2020/indiv20.zip</a></p>
<h4 id="需要提前安装的包"><a href="#需要提前安装的包" class="headerlink" title="需要提前安装的包"></a>需要提前安装的包</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装词云处理包wordcloud</span></span><br><span class="line">!pip install wordcloud --user</span><br></pre></td></tr></table></figure>

<pre><code>Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Requirement already satisfied: wordcloud in /Users/jackgan/.local/lib/python3.9/site-packages (1.8.2.2)
Requirement already satisfied: pillow in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from wordcloud) (9.0.1)
Requirement already satisfied: numpy&gt;=1.6.1 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from wordcloud) (1.21.5)
Requirement already satisfied: matplotlib in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from wordcloud) (3.5.1)
Requirement already satisfied: pyparsing&gt;=2.2.1 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from matplotlib-&gt;wordcloud) (3.0.4)
Requirement already satisfied: kiwisolver&gt;=1.0.1 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from matplotlib-&gt;wordcloud) (1.3.2)
Requirement already satisfied: cycler&gt;=0.10 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from matplotlib-&gt;wordcloud) (0.11.0)
Requirement already satisfied: fonttools&gt;=4.22.0 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from matplotlib-&gt;wordcloud) (4.25.0)
Requirement already satisfied: packaging&gt;=20.0 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from matplotlib-&gt;wordcloud) (21.3)
Requirement already satisfied: python-dateutil&gt;=2.7 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from matplotlib-&gt;wordcloud) (2.8.2)
Requirement already satisfied: six&gt;=1.5 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;wordcloud) (1.16.0)
</code></pre>
<h4 id="需要提前下载好数据集"><a href="#需要提前下载好数据集" class="headerlink" title="需要提前下载好数据集"></a>需要提前下载好数据集</h4><p>【注意】如果你只是在天池技术圈看到本文，你需要先查看<a href="https://tianchi.aliyun.com/competition/entrance/531837/tab/227">赛事指南</a>。<br></br>通过<a href="https://tianchi.aliyun.com/competition/entrance/531837/tab/227">赛事指南</a>提示操作你可以成功<code>Fork</code>赛事论坛的baseline到你的天池实验室，并点击<code>编辑</code>按钮成功跳转到了DSW在线编程。<br></br>在进行数据处理前，你需要点击DSW左侧<code>天池</code>tab，下载本案例数据集<code>2020_US_President_political_contributions</code>，后续步骤才能正确执行。<br></br><br><img src="https://img.alicdn.com/tfs/TB1lceDl5pE_u4jSZKbXXbCUVXa-969-466.png"></p>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>进行数据处理前，我们需要知道我们最终想要的数据是什么样的，因为我们是想分析候选人与捐赠人之间的关系，所以我们想要一张数据表中有捐赠人与候选人一一对应的关系，所以需要将目前的三张数据表进行一一关联，汇总到需要的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入相关处理包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取候选人信息，由于原始数据没有表头，需要添加表头</span></span><br><span class="line">candidates = pd.read_csv(<span class="string">&quot;weball20.txt&quot;</span>, sep = <span class="string">&#x27;|&#x27;</span>,names=[<span class="string">&#x27;CAND_ID&#x27;</span>,<span class="string">&#x27;CAND_NAME&#x27;</span>,<span class="string">&#x27;CAND_ICI&#x27;</span>,<span class="string">&#x27;PTY_CD&#x27;</span>,<span class="string">&#x27;CAND_PTY_AFFILIATION&#x27;</span>,<span class="string">&#x27;TTL_RECEIPTS&#x27;</span>,</span><br><span class="line">                                                          <span class="string">&#x27;TRANS_FROM_AUTH&#x27;</span>,<span class="string">&#x27;TTL_DISB&#x27;</span>,<span class="string">&#x27;TRANS_TO_AUTH&#x27;</span>,<span class="string">&#x27;COH_BOP&#x27;</span>,<span class="string">&#x27;COH_COP&#x27;</span>,<span class="string">&#x27;CAND_CONTRIB&#x27;</span>,</span><br><span class="line">                                                          <span class="string">&#x27;CAND_LOANS&#x27;</span>,<span class="string">&#x27;OTHER_LOANS&#x27;</span>,<span class="string">&#x27;CAND_LOAN_REPAY&#x27;</span>,<span class="string">&#x27;OTHER_LOAN_REPAY&#x27;</span>,<span class="string">&#x27;DEBTS_OWED_BY&#x27;</span>,</span><br><span class="line">                                                          <span class="string">&#x27;TTL_INDIV_CONTRIB&#x27;</span>,<span class="string">&#x27;CAND_OFFICE_ST&#x27;</span>,<span class="string">&#x27;CAND_OFFICE_DISTRICT&#x27;</span>,<span class="string">&#x27;SPEC_ELECTION&#x27;</span>,<span class="string">&#x27;PRIM_ELECTION&#x27;</span>,<span class="string">&#x27;RUN_ELECTION&#x27;</span></span><br><span class="line">                                                          ,<span class="string">&#x27;GEN_ELECTION&#x27;</span>,<span class="string">&#x27;GEN_ELECTION_PRECENT&#x27;</span>,<span class="string">&#x27;OTHER_POL_CMTE_CONTRIB&#x27;</span>,<span class="string">&#x27;POL_PTY_CONTRIB&#x27;</span>,</span><br><span class="line">                                                          <span class="string">&#x27;CVG_END_DT&#x27;</span>,<span class="string">&#x27;INDIV_REFUNDS&#x27;</span>,<span class="string">&#x27;CMTE_REFUNDS&#x27;</span>])</span><br><span class="line"><span class="comment"># 读取候选人和委员会的联系信息</span></span><br><span class="line">ccl = pd.read_csv(<span class="string">&quot;ccl.txt&quot;</span>, sep = <span class="string">&#x27;|&#x27;</span>,names=[<span class="string">&#x27;CAND_ID&#x27;</span>,<span class="string">&#x27;CAND_ELECTION_YR&#x27;</span>,<span class="string">&#x27;FEC_ELECTION_YR&#x27;</span>,<span class="string">&#x27;CMTE_ID&#x27;</span>,<span class="string">&#x27;CMTE_TP&#x27;</span>,<span class="string">&#x27;CMTE_DSGN&#x27;</span>,<span class="string">&#x27;LINKAGE_ID&#x27;</span>])</span><br><span class="line"><span class="comment"># 读取个人捐赠数据，由于原始数据没有表头，需要添加表头</span></span><br><span class="line"><span class="comment"># 提示：读取本文件大概需要5-10s</span></span><br><span class="line">itcont = pd.read_csv(<span class="string">&#x27;itcont_2020_20200722_20200820.txt&#x27;</span>, sep=<span class="string">&#x27;|&#x27;</span>,names=[<span class="string">&#x27;CMTE_ID&#x27;</span>,<span class="string">&#x27;AMNDT_IND&#x27;</span>,<span class="string">&#x27;RPT_TP&#x27;</span>,<span class="string">&#x27;TRANSACTION_PGI&#x27;</span>,</span><br><span class="line">                                                                                  <span class="string">&#x27;IMAGE_NUM&#x27;</span>,<span class="string">&#x27;TRANSACTION_TP&#x27;</span>,<span class="string">&#x27;ENTITY_TP&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>,<span class="string">&#x27;CITY&#x27;</span>,</span><br><span class="line">                                                                                  <span class="string">&#x27;STATE&#x27;</span>,<span class="string">&#x27;ZIP_CODE&#x27;</span>,<span class="string">&#x27;EMPLOYER&#x27;</span>,<span class="string">&#x27;OCCUPATION&#x27;</span>,<span class="string">&#x27;TRANSACTION_DT&#x27;</span>,</span><br><span class="line">                                                                                  <span class="string">&#x27;TRANSACTION_AMT&#x27;</span>,<span class="string">&#x27;OTHER_ID&#x27;</span>,<span class="string">&#x27;TRAN_ID&#x27;</span>,<span class="string">&#x27;FILE_NUM&#x27;</span>,<span class="string">&#x27;MEMO_CD&#x27;</span>,</span><br><span class="line">                                                                                  <span class="string">&#x27;MEMO_TEXT&#x27;</span>,<span class="string">&#x27;SUB_ID&#x27;</span>])</span><br></pre></td></tr></table></figure>

<pre><code>/var/folders/z4/ghsf3khj15d_3g4_v2t86_f00000gn/T/ipykernel_48460/3834039584.py:12: DtypeWarning: Columns (10,15,16,18) have mixed types. Specify dtype option on import or set low_memory=False.
  itcont = pd.read_csv(&#39;itcont_2020_20200722_20200820.txt&#39;, sep=&#39;|&#39;,names=[&#39;CMTE_ID&#39;,&#39;AMNDT_IND&#39;,&#39;RPT_TP&#39;,&#39;TRANSACTION_PGI&#39;,
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 候选人数据预览</span></span><br><span class="line">candidates.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 3982 entries, 0 to 3981
Data columns (total 30 columns):
 #   Column                  Non-Null Count  Dtype  
---  ------                  --------------  -----  
 0   CAND_ID                 3982 non-null   object 
 1   CAND_NAME               3982 non-null   object 
 2   CAND_ICI                3904 non-null   object 
 3   PTY_CD                  3982 non-null   int64  
 4   CAND_PTY_AFFILIATION    3981 non-null   object 
 5   TTL_RECEIPTS            3982 non-null   float64
 6   TRANS_FROM_AUTH         3982 non-null   float64
 7   TTL_DISB                3982 non-null   float64
 8   TRANS_TO_AUTH           3982 non-null   float64
 9   COH_BOP                 3982 non-null   float64
 10  COH_COP                 3982 non-null   float64
 11  CAND_CONTRIB            3982 non-null   float64
 12  CAND_LOANS              3982 non-null   float64
 13  OTHER_LOANS             3982 non-null   float64
 14  CAND_LOAN_REPAY         3982 non-null   float64
 15  OTHER_LOAN_REPAY        3982 non-null   float64
 16  DEBTS_OWED_BY           3982 non-null   float64
 17  TTL_INDIV_CONTRIB       3982 non-null   float64
 18  CAND_OFFICE_ST          3982 non-null   object 
 19  CAND_OFFICE_DISTRICT    3982 non-null   int64  
 20  SPEC_ELECTION           0 non-null      float64
 21  PRIM_ELECTION           0 non-null      float64
 22  RUN_ELECTION            0 non-null      float64
 23  GEN_ELECTION            0 non-null      float64
 24  GEN_ELECTION_PRECENT    0 non-null      float64
 25  OTHER_POL_CMTE_CONTRIB  3982 non-null   float64
 26  POL_PTY_CONTRIB         3982 non-null   float64
 27  CVG_END_DT              3982 non-null   object 
 28  INDIV_REFUNDS           3982 non-null   float64
 29  CMTE_REFUNDS            3982 non-null   float64
dtypes: float64(22), int64(2), object(6)
memory usage: 933.4+ KB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">candidates.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PTY_CD</th>
      <th>TTL_RECEIPTS</th>
      <th>TRANS_FROM_AUTH</th>
      <th>TTL_DISB</th>
      <th>TRANS_TO_AUTH</th>
      <th>COH_BOP</th>
      <th>COH_COP</th>
      <th>CAND_CONTRIB</th>
      <th>CAND_LOANS</th>
      <th>OTHER_LOANS</th>
      <th>...</th>
      <th>CAND_OFFICE_DISTRICT</th>
      <th>SPEC_ELECTION</th>
      <th>PRIM_ELECTION</th>
      <th>RUN_ELECTION</th>
      <th>GEN_ELECTION</th>
      <th>GEN_ELECTION_PRECENT</th>
      <th>OTHER_POL_CMTE_CONTRIB</th>
      <th>POL_PTY_CONTRIB</th>
      <th>INDIV_REFUNDS</th>
      <th>CMTE_REFUNDS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>3982.000000</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>...</td>
      <td>3982.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3.982000e+03</td>
      <td>3982.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>1.653943</td>
      <td>3.490027e+06</td>
      <td>1.991258e+05</td>
      <td>3.181663e+06</td>
      <td>2.156232e+04</td>
      <td>1.609336e+05</td>
      <td>2.695845e+06</td>
      <td>1.110336e+06</td>
      <td>8.445414e+04</td>
      <td>3.219767e+03</td>
      <td>...</td>
      <td>8.349824</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>6.139755e+05</td>
      <td>1.773010e+03</td>
      <td>5.106747e+05</td>
      <td>1287.255580</td>
    </tr>
    <tr>
      <th>std</th>
      <td>0.641669</td>
      <td>8.232322e+07</td>
      <td>5.848473e+06</td>
      <td>6.819119e+07</td>
      <td>3.260525e+05</td>
      <td>9.854338e+05</td>
      <td>1.546208e+08</td>
      <td>4.837297e+07</td>
      <td>1.151892e+06</td>
      <td>1.280533e+05</td>
      <td>...</td>
      <td>10.602281</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3.048211e+07</td>
      <td>4.936670e+04</td>
      <td>3.048332e+07</td>
      <td>8523.411822</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
      <td>-6.741325e+05</td>
      <td>0.000000e+00</td>
      <td>-6.741575e+05</td>
      <td>0.000000e+00</td>
      <td>-2.167346e+04</td>
      <td>-3.807660e+05</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>...</td>
      <td>0.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>-3.741000e+04</td>
      <td>-20400.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>1.000000</td>
      <td>2.500000e+02</td>
      <td>0.000000e+00</td>
      <td>1.850122e+03</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>...</td>
      <td>1.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>2.000000</td>
      <td>2.288796e+04</td>
      <td>0.000000e+00</td>
      <td>2.854883e+04</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>3.917100e+02</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>...</td>
      <td>5.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>2.000000</td>
      <td>4.180395e+05</td>
      <td>0.000000e+00</td>
      <td>4.037414e+05</td>
      <td>0.000000e+00</td>
      <td>7.673805e+03</td>
      <td>1.577177e+04</td>
      <td>1.317500e+02</td>
      <td>2.500000e+02</td>
      <td>0.000000e+00</td>
      <td>...</td>
      <td>11.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>6.775000e+03</td>
      <td>0.000000e+00</td>
      <td>3.000000e+03</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>3.000000</td>
      <td>4.824618e+09</td>
      <td>2.751765e+08</td>
      <td>3.848951e+09</td>
      <td>1.041500e+07</td>
      <td>3.000000e+07</td>
      <td>9.756669e+09</td>
      <td>2.831281e+09</td>
      <td>5.001902e+07</td>
      <td>7.300000e+06</td>
      <td>...</td>
      <td>53.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.923500e+09</td>
      <td>3.100000e+06</td>
      <td>1.923500e+09</td>
      <td>224100.000000</td>
    </tr>
  </tbody>
</table>
<p>8 rows × 24 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">candidates.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CAND_ID</th>
      <th>CAND_NAME</th>
      <th>CAND_ICI</th>
      <th>PTY_CD</th>
      <th>CAND_PTY_AFFILIATION</th>
      <th>TTL_RECEIPTS</th>
      <th>TRANS_FROM_AUTH</th>
      <th>TTL_DISB</th>
      <th>TRANS_TO_AUTH</th>
      <th>COH_BOP</th>
      <th>...</th>
      <th>SPEC_ELECTION</th>
      <th>PRIM_ELECTION</th>
      <th>RUN_ELECTION</th>
      <th>GEN_ELECTION</th>
      <th>GEN_ELECTION_PRECENT</th>
      <th>OTHER_POL_CMTE_CONTRIB</th>
      <th>POL_PTY_CONTRIB</th>
      <th>CVG_END_DT</th>
      <th>INDIV_REFUNDS</th>
      <th>CMTE_REFUNDS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>H8AK00132</td>
      <td>SHEIN, DIMITRI</td>
      <td>C</td>
      <td>1</td>
      <td>DEM</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>367.52</td>
      <td>0.0</td>
      <td>367.52</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>09/30/2019</td>
      <td>0.00</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>H6AK00045</td>
      <td>YOUNG, DONALD E</td>
      <td>I</td>
      <td>2</td>
      <td>REP</td>
      <td>1950289.86</td>
      <td>138304.94</td>
      <td>1817836.79</td>
      <td>0.0</td>
      <td>116720.12</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>839094.63</td>
      <td>500.0</td>
      <td>12/31/2020</td>
      <td>19609.67</td>
      <td>5500.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>H8AK01031</td>
      <td>NELSON, THOMAS JOHN</td>
      <td>C</td>
      <td>2</td>
      <td>REP</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>466.51</td>
      <td>0.0</td>
      <td>466.51</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>03/31/2019</td>
      <td>0.00</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>H8AK00140</td>
      <td>GALVIN, ALYSE</td>
      <td>C</td>
      <td>3</td>
      <td>IND</td>
      <td>5253251.54</td>
      <td>60024.76</td>
      <td>5162902.93</td>
      <td>0.0</td>
      <td>6245.09</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>340486.99</td>
      <td>10025.0</td>
      <td>12/31/2020</td>
      <td>32594.02</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>H0AL01097</td>
      <td>AVERHART, JAMES</td>
      <td>O</td>
      <td>1</td>
      <td>DEM</td>
      <td>80094.95</td>
      <td>0.00</td>
      <td>78973.24</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>12/31/2020</td>
      <td>0.00</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 30 columns</p>
</div>



<p>选取所需要的候选人信息<br>数据字段说明：</p>
<ul>
<li>CAND_ID：候选人ID</li>
<li>CAND_NAME：候选人姓名</li>
<li>CAND_PTY_AFFILIATION：候选人党派</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">candidates = pd.DataFrame(candidates,columns=[<span class="string">&#x27;CAND_ID&#x27;</span>,<span class="string">&#x27;CAND_NAME&#x27;</span>,<span class="string">&#x27;CAND_PTY_AFFILIATION&#x27;</span>])</span><br><span class="line">candidates.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CAND_ID</th>
      <th>CAND_NAME</th>
      <th>CAND_PTY_AFFILIATION</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>H8AK00132</td>
      <td>SHEIN, DIMITRI</td>
      <td>DEM</td>
    </tr>
    <tr>
      <th>1</th>
      <td>H6AK00045</td>
      <td>YOUNG, DONALD E</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>2</th>
      <td>H8AK01031</td>
      <td>NELSON, THOMAS JOHN</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>3</th>
      <td>H8AK00140</td>
      <td>GALVIN, ALYSE</td>
      <td>IND</td>
    </tr>
    <tr>
      <th>4</th>
      <td>H0AL01097</td>
      <td>AVERHART, JAMES</td>
      <td>DEM</td>
    </tr>
  </tbody>
</table>
</div>



<h4 id="将委员会和候选人一一对应，通过CAND-ID关联两个表"><a href="#将委员会和候选人一一对应，通过CAND-ID关联两个表" class="headerlink" title="将委员会和候选人一一对应，通过CAND_ID关联两个表"></a>将委员会和候选人一一对应，通过<code>CAND_ID</code>关联两个表</h4><p>由于候选人和委员会的联系表中无候选人姓名，只有候选人ID（<code>CAND_ID</code>），所以需要通过<code>CAND_ID</code>从候选人表中获取到候选人姓名，最终得到候选人与委员会联系表<code>ccl</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ccl.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CAND_ID</th>
      <th>CAND_ELECTION_YR</th>
      <th>FEC_ELECTION_YR</th>
      <th>CMTE_ID</th>
      <th>CMTE_TP</th>
      <th>CMTE_DSGN</th>
      <th>LINKAGE_ID</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>C00713602</td>
      <td>2019</td>
      <td>2020</td>
      <td>C00712851</td>
      <td>O</td>
      <td>U</td>
      <td>228963</td>
    </tr>
    <tr>
      <th>1</th>
      <td>H0AK00105</td>
      <td>2020</td>
      <td>2020</td>
      <td>C00607515</td>
      <td>H</td>
      <td>P</td>
      <td>229250</td>
    </tr>
    <tr>
      <th>2</th>
      <td>H0AL01055</td>
      <td>2020</td>
      <td>2020</td>
      <td>C00697789</td>
      <td>H</td>
      <td>P</td>
      <td>226125</td>
    </tr>
    <tr>
      <th>3</th>
      <td>H0AL01063</td>
      <td>2020</td>
      <td>2020</td>
      <td>C00701557</td>
      <td>H</td>
      <td>P</td>
      <td>227053</td>
    </tr>
    <tr>
      <th>4</th>
      <td>H0AL01071</td>
      <td>2020</td>
      <td>2020</td>
      <td>C00701409</td>
      <td>H</td>
      <td>P</td>
      <td>227054</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ccl.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 7061 entries, 0 to 7060
Data columns (total 7 columns):
 #   Column            Non-Null Count  Dtype 
---  ------            --------------  ----- 
 0   CAND_ID           7061 non-null   object
 1   CAND_ELECTION_YR  7061 non-null   int64 
 2   FEC_ELECTION_YR   7061 non-null   int64 
 3   CMTE_ID           7061 non-null   object
 4   CMTE_TP           7061 non-null   object
 5   CMTE_DSGN         7061 non-null   object
 6   LINKAGE_ID        7061 non-null   int64 
dtypes: int64(3), object(4)
memory usage: 386.3+ KB
</code></pre>
<p>选取所需要委员会的信息 数据字段说明：</p>
<ul>
<li>CAND_ID 候选人ID</li>
<li>CAND_ELECTION_YR 候选人选举年份</li>
<li>CMTE_ID 委员会ID</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ccl = pd.DataFrame(ccl,columns=[<span class="string">&#x27;CAND_ID&#x27;</span>,<span class="string">&#x27;CAND_ELECTION_YR&#x27;</span>,<span class="string">&#x27;CMTE_ID&#x27;</span>])</span><br><span class="line">ccl.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CAND_ID</th>
      <th>CAND_ELECTION_YR</th>
      <th>CMTE_ID</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>C00713602</td>
      <td>2019</td>
      <td>C00712851</td>
    </tr>
    <tr>
      <th>1</th>
      <td>H0AK00105</td>
      <td>2020</td>
      <td>C00607515</td>
    </tr>
    <tr>
      <th>2</th>
      <td>H0AL01055</td>
      <td>2020</td>
      <td>C00697789</td>
    </tr>
    <tr>
      <th>3</th>
      <td>H0AL01063</td>
      <td>2020</td>
      <td>C00701557</td>
    </tr>
    <tr>
      <th>4</th>
      <td>H0AL01071</td>
      <td>2020</td>
      <td>C00701409</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ccl.shape,candidates.shape</span><br></pre></td></tr></table></figure>




<pre><code>((7061, 3), (3982, 3))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关联两个表数据</span></span><br><span class="line">ccl = pd.merge(ccl,candidates,on=[<span class="string">&#x27;CAND_ID&#x27;</span>])</span><br><span class="line">ccl</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CAND_ID</th>
      <th>CAND_ELECTION_YR</th>
      <th>CMTE_ID</th>
      <th>CAND_NAME</th>
      <th>CAND_PTY_AFFILIATION</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>H0AL01055</td>
      <td>2020</td>
      <td>C00697789</td>
      <td>CARL, JERRY LEE, JR</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>1</th>
      <td>H0AL01063</td>
      <td>2020</td>
      <td>C00701557</td>
      <td>LAMBERT, DOUGLAS WESTLEY III</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>2</th>
      <td>H0AL01071</td>
      <td>2020</td>
      <td>C00701409</td>
      <td>PRINGLE, CHRISTOPHER PAUL</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>3</th>
      <td>H0AL01089</td>
      <td>2020</td>
      <td>C00703066</td>
      <td>HIGHTOWER, BILL</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>4</th>
      <td>H0AL01097</td>
      <td>2020</td>
      <td>C00708867</td>
      <td>AVERHART, JAMES</td>
      <td>DEM</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>4423</th>
      <td>S8WV00143</td>
      <td>2018</td>
      <td>C00681163</td>
      <td>MORRISEY, PATRICK MR</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>4424</th>
      <td>S8WV00143</td>
      <td>2018</td>
      <td>C00651075</td>
      <td>MORRISEY, PATRICK MR</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>4425</th>
      <td>S8WV00143</td>
      <td>2018</td>
      <td>C00689471</td>
      <td>MORRISEY, PATRICK MR</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>4426</th>
      <td>S8WV00143</td>
      <td>2018</td>
      <td>C00710889</td>
      <td>MORRISEY, PATRICK MR</td>
      <td>REP</td>
    </tr>
    <tr>
      <th>4427</th>
      <td>S8WV00143</td>
      <td>2018</td>
      <td>C00417063</td>
      <td>MORRISEY, PATRICK MR</td>
      <td>REP</td>
    </tr>
  </tbody>
</table>
<p>4428 rows × 5 columns</p>
</div>



<p>ccl数据字段说明：</p>
<ul>
<li>CAND_ID 候选人ID</li>
<li>CAND_ELECTION_YR 候选人选举年份</li>
<li>CMTE_ID 委员会ID</li>
<li>CAND_NAME：候选人姓名</li>
<li>CAND_PTY_AFFILIATION：候选人党派</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ccl.shape</span><br></pre></td></tr></table></figure>




<pre><code>(4428, 5)
</code></pre>
<h4 id="将候选人和捐赠人一一对应，通过CMTE-ID关联两个表"><a href="#将候选人和捐赠人一一对应，通过CMTE-ID关联两个表" class="headerlink" title="将候选人和捐赠人一一对应，通过CMTE_ID关联两个表"></a>将候选人和捐赠人一一对应，通过<code>CMTE_ID</code>关联两个表</h4><p>通过<code>CMTE_ID</code>将目前处理好的候选人和委员会关系表与人捐款档案表进行关联，得到候选人与捐赠人一一对应联系表<code>cil</code>。</p>
<p>捐款档案表所需字段</p>
<ul>
<li>CMTE_ID  委员会ID</li>
<li>NAME 捐款人姓名</li>
<li>CITY 捐款人所在市</li>
<li>STATE 捐款人所在州</li>
<li>EMPLOYER 捐款人雇主&#x2F;公司</li>
<li>OCCUPATION 捐款人职业</li>
<li>TRANSACTION_AMT – 捐赠数额（美元）</li>
<li>TRANSACTION_DT – 收到捐款的日期</li>
<li>CAND_PTY_AFFILIATION – 候选人党派</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">itcont = pd.DataFrame(itcont,columns=[<span class="string">&#x27;CMTE_ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>,<span class="string">&#x27;CITY&#x27;</span>,<span class="string">&#x27;STATE&#x27;</span>,<span class="string">&#x27;EMPLOYER&#x27;</span>,<span class="string">&#x27;OCCUPATION&#x27;</span>,<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>, <span class="string">&#x27;TRANSACTION_DT&#x27;</span>])</span><br><span class="line">itcont.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CMTE_ID</th>
      <th>NAME</th>
      <th>CITY</th>
      <th>STATE</th>
      <th>EMPLOYER</th>
      <th>OCCUPATION</th>
      <th>TRANSACTION_AMT</th>
      <th>TRANSACTION_DT</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>C00701888</td>
      <td>BAUMGART, STEPHEN</td>
      <td>LOS GATOS</td>
      <td>CA</td>
      <td>VARIAN MEDICAL SYSTEMS</td>
      <td>SYSTEMS ENGINEER PHYSICIST</td>
      <td>500</td>
      <td>7222020</td>
    </tr>
    <tr>
      <th>1</th>
      <td>C00701888</td>
      <td>HELBERG, JACOB</td>
      <td>SAN FRANCISCO</td>
      <td>CA</td>
      <td>STANFORD CYBER POLICY CENTER</td>
      <td>SENIOR ADVISOR</td>
      <td>250000</td>
      <td>7232020</td>
    </tr>
    <tr>
      <th>2</th>
      <td>C00701888</td>
      <td>CONSIGLI, ANTHONY</td>
      <td>MILFORD</td>
      <td>MA</td>
      <td>WHITEWOOD VENTURES, LLC</td>
      <td>CHIEF EXECUTIVE OFFICER</td>
      <td>25000</td>
      <td>7312020</td>
    </tr>
    <tr>
      <th>3</th>
      <td>C00701888</td>
      <td>POTASH, ANDREW</td>
      <td>MAMARONECK</td>
      <td>NY</td>
      <td>DISTINGUISHED PROGRAMS INSURANCE</td>
      <td>CHIEF EXECUTIVE OFFICER</td>
      <td>100000</td>
      <td>7282020</td>
    </tr>
    <tr>
      <th>4</th>
      <td>C00701888</td>
      <td>WEINER, STEPHEN R.</td>
      <td>BOSTON</td>
      <td>MA</td>
      <td>S.R. WEINER AND ASSOCIATES</td>
      <td>DEVELOPER</td>
      <td>25000</td>
      <td>7282020</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ccl.shape,itcont.shape</span><br></pre></td></tr></table></figure>




<pre><code>((4428, 5), (1955607, 8))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看目前数据前10行</span></span><br><span class="line">c_itcont = pd.merge(ccl,itcont)</span><br><span class="line">c_itcont.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CAND_ID</th>
      <th>CAND_ELECTION_YR</th>
      <th>CMTE_ID</th>
      <th>CAND_NAME</th>
      <th>CAND_PTY_AFFILIATION</th>
      <th>NAME</th>
      <th>CITY</th>
      <th>STATE</th>
      <th>EMPLOYER</th>
      <th>OCCUPATION</th>
      <th>TRANSACTION_AMT</th>
      <th>TRANSACTION_DT</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>H0AZ02182</td>
      <td>2020</td>
      <td>C00698084</td>
      <td>MORGAN, JOSEPH DAVID</td>
      <td>REP</td>
      <td>MARTIN, WILLIAM II</td>
      <td>TUCSON</td>
      <td>AZ</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>100</td>
      <td>7242020</td>
    </tr>
    <tr>
      <th>1</th>
      <td>H0AZ02182</td>
      <td>2020</td>
      <td>C00698084</td>
      <td>MORGAN, JOSEPH DAVID</td>
      <td>REP</td>
      <td>RODRIGUEZ, GERARDO</td>
      <td>TUCSON</td>
      <td>AZ</td>
      <td>VA HOSPITAL</td>
      <td>LAB TECH</td>
      <td>40</td>
      <td>7242020</td>
    </tr>
    <tr>
      <th>2</th>
      <td>H0AZ02182</td>
      <td>2020</td>
      <td>C00698084</td>
      <td>MORGAN, JOSEPH DAVID</td>
      <td>REP</td>
      <td>RODRIGUEZ, GERARDO</td>
      <td>TUCSON</td>
      <td>AZ</td>
      <td>VA HOSPITAL</td>
      <td>LAB TECH</td>
      <td>40</td>
      <td>7312020</td>
    </tr>
    <tr>
      <th>3</th>
      <td>H0AZ03461</td>
      <td>2020</td>
      <td>C00725697</td>
      <td>WOOD, DANIEL</td>
      <td>REP</td>
      <td>HOPKINS, RICHARD</td>
      <td>BUCKEYE</td>
      <td>AZ</td>
      <td>POWERS-LEAVITT</td>
      <td>INSURANCE AGENT</td>
      <td>300</td>
      <td>8102020</td>
    </tr>
    <tr>
      <th>4</th>
      <td>H0AZ03461</td>
      <td>2020</td>
      <td>C00725697</td>
      <td>WOOD, DANIEL</td>
      <td>REP</td>
      <td>PENDLETON, DIANE</td>
      <td>SCOTTSDALE</td>
      <td>AZ</td>
      <td>UNEMPLOYED</td>
      <td>NaN</td>
      <td>500</td>
      <td>8072020</td>
    </tr>
  </tbody>
</table>
</div>



<p>c_itcont表字段</p>
<ul>
<li>CAND_ID 候选人ID</li>
<li>CAND_ELECTION_YR 候选人选举年份</li>
<li>CMTE_ID 委员会ID</li>
<li>CAND_NAME：候选人姓名</li>
<li>CAND_PTY_AFFILIATION – 候选人党派</li>
<li>NAME 捐款人姓名</li>
<li>CITY 捐款人所在市</li>
<li>State 捐款人所在州</li>
<li>EMPLOYER 捐款人雇主&#x2F;公司</li>
<li>OCCUPATION 捐款人职业</li>
<li>TRANSACTION_AMT – 捐赠数额（美元）</li>
<li>TRANSACTION_DT – 收到捐款的日期</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c_itcont.shape</span><br></pre></td></tr></table></figure>




<pre><code>(674164, 12)
</code></pre>
<h3 id="数据探索与清洗"><a href="#数据探索与清洗" class="headerlink" title="数据探索与清洗"></a>数据探索与清洗</h3><p>进过数据处理部分，我们获得了可用的数据集，现在我们可以利用调用<code>shape</code>属性查看数据的规模，调用<code>info</code>函数查看数据信息，调用<code>describe</code>函数查看数据分布。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看数据规模 多少行 多少列</span></span><br><span class="line">c_itcont.shape</span><br></pre></td></tr></table></figure>




<pre><code>(674164, 12)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c_itcont.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 674164 entries, 0 to 674163
Data columns (total 12 columns):
 #   Column                Non-Null Count   Dtype 
---  ------                --------------   ----- 
 0   CAND_ID               674164 non-null  object
 1   CAND_ELECTION_YR      674164 non-null  int64 
 2   CMTE_ID               674164 non-null  object
 3   CAND_NAME             674164 non-null  object
 4   CAND_PTY_AFFILIATION  674164 non-null  object
 5   NAME                  674164 non-null  object
 6   CITY                  674131 non-null  object
 7   STATE                 674130 non-null  object
 8   EMPLOYER              657649 non-null  object
 9   OCCUPATION            661433 non-null  object
 10  TRANSACTION_AMT       674164 non-null  int64 
 11  TRANSACTION_DT        674164 non-null  int64 
dtypes: int64(3), object(9)
memory usage: 66.9+ MB
</code></pre>
<p>通过上面的探索我们知道目前数据集的一些基本情况，目前数据总共有674164行，12列，总占用内存66.9+ MB，<code>STATE</code>、<code>EMPLOYER</code>、<code>OCCUPATION</code>有缺失值，另外日期列目前为int64类型，需要进行转换为str类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对缺失值填充</span></span><br><span class="line">c_itcont[<span class="string">&#x27;CITY&#x27;</span>].fillna(<span class="string">&#x27;NOT PROVIDED&#x27;</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">c_itcont[<span class="string">&#x27;STATE&#x27;</span>].fillna(<span class="string">&#x27;NOT PROVIDED&#x27;</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">c_itcont[<span class="string">&#x27;EMPLOYER&#x27;</span>].fillna(<span class="string">&#x27;NOT PROVIDED&#x27;</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">c_itcont[<span class="string">&#x27;OCCUPATION&#x27;</span>].fillna(<span class="string">&#x27;NOT PROVIDED&#x27;</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式转换</span></span><br><span class="line">c_itcont[<span class="string">&#x27;CAND_ELECTION_YR&#x27;</span>] = c_itcont[<span class="string">&#x27;CAND_ELECTION_YR&#x27;</span>].astype(<span class="built_in">str</span>)</span><br><span class="line">c_itcont[<span class="string">&#x27;TRANSACTION_DT&#x27;</span>] = c_itcont[<span class="string">&#x27;TRANSACTION_DT&#x27;</span>].astype(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 日期格式改为年月日</span></span><br><span class="line">c_itcont[<span class="string">&#x27;TRANSACTION_DT&#x27;</span>] = [i[<span class="number">3</span>:]+i[:<span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> c_itcont[<span class="string">&#x27;TRANSACTION_DT&#x27;</span>]]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c_itcont.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CAND_ID</th>
      <th>CAND_ELECTION_YR</th>
      <th>CMTE_ID</th>
      <th>CAND_NAME</th>
      <th>CAND_PTY_AFFILIATION</th>
      <th>NAME</th>
      <th>CITY</th>
      <th>STATE</th>
      <th>EMPLOYER</th>
      <th>OCCUPATION</th>
      <th>TRANSACTION_AMT</th>
      <th>TRANSACTION_DT</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>H0AZ02182</td>
      <td>2020</td>
      <td>C00698084</td>
      <td>MORGAN, JOSEPH DAVID</td>
      <td>REP</td>
      <td>MARTIN, WILLIAM II</td>
      <td>TUCSON</td>
      <td>AZ</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>100</td>
      <td>2020724</td>
    </tr>
    <tr>
      <th>1</th>
      <td>H0AZ02182</td>
      <td>2020</td>
      <td>C00698084</td>
      <td>MORGAN, JOSEPH DAVID</td>
      <td>REP</td>
      <td>RODRIGUEZ, GERARDO</td>
      <td>TUCSON</td>
      <td>AZ</td>
      <td>VA HOSPITAL</td>
      <td>LAB TECH</td>
      <td>40</td>
      <td>2020724</td>
    </tr>
    <tr>
      <th>2</th>
      <td>H0AZ02182</td>
      <td>2020</td>
      <td>C00698084</td>
      <td>MORGAN, JOSEPH DAVID</td>
      <td>REP</td>
      <td>RODRIGUEZ, GERARDO</td>
      <td>TUCSON</td>
      <td>AZ</td>
      <td>VA HOSPITAL</td>
      <td>LAB TECH</td>
      <td>40</td>
      <td>2020731</td>
    </tr>
    <tr>
      <th>3</th>
      <td>H0AZ03461</td>
      <td>2020</td>
      <td>C00725697</td>
      <td>WOOD, DANIEL</td>
      <td>REP</td>
      <td>HOPKINS, RICHARD</td>
      <td>BUCKEYE</td>
      <td>AZ</td>
      <td>POWERS-LEAVITT</td>
      <td>INSURANCE AGENT</td>
      <td>300</td>
      <td>2020810</td>
    </tr>
    <tr>
      <th>4</th>
      <td>H0AZ03461</td>
      <td>2020</td>
      <td>C00725697</td>
      <td>WOOD, DANIEL</td>
      <td>REP</td>
      <td>PENDLETON, DIANE</td>
      <td>SCOTTSDALE</td>
      <td>AZ</td>
      <td>UNEMPLOYED</td>
      <td>NOT PROVIDED</td>
      <td>500</td>
      <td>2020807</td>
    </tr>
    <tr>
      <th>5</th>
      <td>H0AZ03461</td>
      <td>2020</td>
      <td>C00725697</td>
      <td>WOOD, DANIEL</td>
      <td>REP</td>
      <td>PREVATT, WILLIAM</td>
      <td>SCOTTSDALE</td>
      <td>AZ</td>
      <td>SELF-EMPLOYED</td>
      <td>DVM</td>
      <td>500</td>
      <td>2020731</td>
    </tr>
    <tr>
      <th>6</th>
      <td>H0AZ03461</td>
      <td>2020</td>
      <td>C00725697</td>
      <td>WOOD, DANIEL</td>
      <td>REP</td>
      <td>HARDING, DOUG</td>
      <td>TUCSON</td>
      <td>AZ</td>
      <td>MICROSURE</td>
      <td>OPERATIONS MANAGER</td>
      <td>2800</td>
      <td>2020810</td>
    </tr>
    <tr>
      <th>7</th>
      <td>H0AZ03461</td>
      <td>2020</td>
      <td>C00725697</td>
      <td>WOOD, DANIEL</td>
      <td>REP</td>
      <td>HARDING, MARI</td>
      <td>TUCSON</td>
      <td>AZ</td>
      <td>NOT PROVIDED</td>
      <td>NOT PROVIDED</td>
      <td>1400</td>
      <td>2020815</td>
    </tr>
    <tr>
      <th>8</th>
      <td>H0AZ03461</td>
      <td>2020</td>
      <td>C00725697</td>
      <td>WOOD, DANIEL</td>
      <td>REP</td>
      <td>HEDGER, CYNTHIA</td>
      <td>ENNIS</td>
      <td>TX</td>
      <td>NOT PROVIDED</td>
      <td>NOT PROVIDED</td>
      <td>200</td>
      <td>2020731</td>
    </tr>
    <tr>
      <th>9</th>
      <td>H0CA45095</td>
      <td>2020</td>
      <td>C00700807</td>
      <td>HUANG, PEGGY</td>
      <td>REP</td>
      <td>HUANG - PERSONAL FUNDS, PEGGY</td>
      <td>IRVINE</td>
      <td>CA</td>
      <td>OFFICE OF THE ATTORNEY GENERAL</td>
      <td>DEPUTY ATTORNEY GENERAL</td>
      <td>2600</td>
      <td>2020725</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看数据表中数据类型的列的数据分布情况</span></span><br><span class="line">c_itcont.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TRANSACTION_AMT</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>6.741640e+05</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>1.584124e+02</td>
    </tr>
    <tr>
      <th>std</th>
      <td>2.440007e+03</td>
    </tr>
    <tr>
      <th>min</th>
      <td>-5.600000e+03</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>2.000000e+01</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>3.500000e+01</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>1.000000e+02</td>
    </tr>
    <tr>
      <th>max</th>
      <td>1.500000e+06</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c_itcont.boxplot(column=[<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>],showmeans=<span class="literal">True</span>,showbox=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;AxesSubplot:&gt;
</code></pre>
<img src="/2022/11/13/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%A8Pandas%E6%8F%AD%E7%A7%98%E7%BE%8E%E5%9B%BD%E9%80%89%E6%B0%91%E7%9A%84%E6%80%BB%E7%BB%9F%E5%96%9C%E5%A5%BD/output_37_1.png" class="">
<h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算每个党派的所获得的捐款总额，然后排序，取前十位</span></span><br><span class="line">c_itcont.groupby(<span class="string">&quot;CAND_PTY_AFFILIATION&quot;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>,ascending=<span class="literal">False</span>).head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TRANSACTION_AMT</th>
    </tr>
    <tr>
      <th>CAND_PTY_AFFILIATION</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>DEM</th>
      <td>75961780</td>
    </tr>
    <tr>
      <th>REP</th>
      <td>30210416</td>
    </tr>
    <tr>
      <th>IND</th>
      <td>328802</td>
    </tr>
    <tr>
      <th>LIB</th>
      <td>169202</td>
    </tr>
    <tr>
      <th>DFL</th>
      <td>76825</td>
    </tr>
    <tr>
      <th>GRE</th>
      <td>18607</td>
    </tr>
    <tr>
      <th>NON</th>
      <td>11256</td>
    </tr>
    <tr>
      <th>UNK</th>
      <td>10195</td>
    </tr>
    <tr>
      <th>CON</th>
      <td>4117</td>
    </tr>
    <tr>
      <th>BDY</th>
      <td>3250</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算每个总统候选人所获得的捐款总额，然后排序，取前十位</span></span><br><span class="line">c_itcont.groupby(<span class="string">&quot;CAND_NAME&quot;</span>).<span class="built_in">sum</span>(<span class="string">&quot;TRANSACTION_AMT&quot;</span>).sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>,ascending=<span class="literal">False</span>).head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TRANSACTION_AMT</th>
    </tr>
    <tr>
      <th>CAND_NAME</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>BIDEN, JOSEPH R JR</th>
      <td>68111142</td>
    </tr>
    <tr>
      <th>TRUMP, DONALD J.</th>
      <td>16594982</td>
    </tr>
    <tr>
      <th>SULLIVAN, DAN</th>
      <td>9912465</td>
    </tr>
    <tr>
      <th>BLOOMBERG, MICHAEL R.</th>
      <td>3451916</td>
    </tr>
    <tr>
      <th>MARKEY, EDWARD J. SEN.</th>
      <td>606832</td>
    </tr>
    <tr>
      <th>SHAHEEN, JEANNE</th>
      <td>505446</td>
    </tr>
    <tr>
      <th>KENNEDY, JOSEPH P III</th>
      <td>467738</td>
    </tr>
    <tr>
      <th>CORNYN, JOHN SEN</th>
      <td>345959</td>
    </tr>
    <tr>
      <th>FIGLESTHALER, WILLIAM MATTHEW MD</th>
      <td>258221</td>
    </tr>
    <tr>
      <th>KOBACH, KRIS</th>
      <td>250427</td>
    </tr>
  </tbody>
</table>
</div>



<p>获得捐赠最多的党派有<code>DEM(民主党)</code>、<code>REP(共和党)</code>，分别对应<code>BIDEN, JOSEPH R JR(拜登)</code>和<code>TRUMP, DONALD J.(特朗普)</code>，从我们目前分析的2020.7.22-2020.8.20这一个月的数据来看，在选民的捐赠数据中拜登代表的民主党完胜特朗普代表的共和党，由于完整数据量过大，所以没有对所有数据进行汇总分析，因此也不能确定11月大选公布结果就一定是拜登当选</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看不同职业的人捐款的总额，然后排序，取前十位</span></span><br><span class="line">c_itcont.groupby(<span class="string">&quot;OCCUPATION&quot;</span>).<span class="built_in">sum</span>(<span class="string">&quot;TRANSACTION_AMT&quot;</span>).sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>,ascending=<span class="literal">False</span>).head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TRANSACTION_AMT</th>
    </tr>
    <tr>
      <th>OCCUPATION</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>NOT EMPLOYED</th>
      <td>24428910</td>
    </tr>
    <tr>
      <th>RETIRED</th>
      <td>15531441</td>
    </tr>
    <tr>
      <th>NOT PROVIDED</th>
      <td>4653679</td>
    </tr>
    <tr>
      <th>ATTORNEY</th>
      <td>4393670</td>
    </tr>
    <tr>
      <th>FOUNDER</th>
      <td>3517844</td>
    </tr>
    <tr>
      <th>PHYSICIAN</th>
      <td>3091631</td>
    </tr>
    <tr>
      <th>CONSULTANT</th>
      <td>1613669</td>
    </tr>
    <tr>
      <th>LAWYER</th>
      <td>1556579</td>
    </tr>
    <tr>
      <th>PROFESSOR</th>
      <td>1471324</td>
    </tr>
    <tr>
      <th>CEO</th>
      <td>1311635</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看每个职业捐款人的数量</span></span><br><span class="line">c_itcont[<span class="string">&#x27;OCCUPATION&#x27;</span>].value_counts().head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>NOT EMPLOYED    223969
RETIRED         102114
ATTORNEY         19155
PHYSICIAN        13112
NOT PROVIDED     12732
CONSULTANT        7976
PROFESSOR         7882
TEACHER           7667
ENGINEER          7260
LAWYER            6286
Name: OCCUPATION, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个州获捐款的总额，然后排序，取前五位</span></span><br><span class="line">c_itcont.groupby(<span class="string">&quot;STATE&quot;</span>).<span class="built_in">sum</span>(<span class="string">&quot;TRANSACTION_AMT&quot;</span>).sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>,ascending=<span class="literal">False</span>).head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TRANSACTION_AMT</th>
    </tr>
    <tr>
      <th>STATE</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>CA</th>
      <td>19222386</td>
    </tr>
    <tr>
      <th>NY</th>
      <td>11243839</td>
    </tr>
    <tr>
      <th>FL</th>
      <td>7418137</td>
    </tr>
    <tr>
      <th>TX</th>
      <td>7364516</td>
    </tr>
    <tr>
      <th>MA</th>
      <td>5128879</td>
    </tr>
    <tr>
      <th>WA</th>
      <td>4248597</td>
    </tr>
    <tr>
      <th>VA</th>
      <td>3465543</td>
    </tr>
    <tr>
      <th>IL</th>
      <td>3374161</td>
    </tr>
    <tr>
      <th>PA</th>
      <td>3195739</td>
    </tr>
    <tr>
      <th>MD</th>
      <td>2850272</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看每个州捐款人的数量</span></span><br><span class="line">c_itcont[<span class="string">&#x27;STATE&#x27;</span>].value_counts().head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>CA    116739
NY     46236
FL     46089
TX     45046
MA     28272
WA     26582
PA     24847
VA     22727
IL     21143
MD     19107
Name: STATE, dtype: int64
</code></pre>
<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>首先导入相关Python库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib中的pyplot</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 为了使matplotlib图形能够内联显示</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="comment"># 导入词云库</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud,ImageColorGenerator</span><br></pre></td></tr></table></figure>

<h4 id="按州总捐款数和总捐款人数柱状图"><a href="#按州总捐款数和总捐款人数柱状图" class="headerlink" title="按州总捐款数和总捐款人数柱状图"></a>按州总捐款数和总捐款人数柱状图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st_amt = c_itcont.groupby(<span class="string">&quot;STATE&quot;</span>).<span class="built_in">sum</span>(<span class="string">&quot;TRANSACTION_AMT&quot;</span>).sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>,ascending=<span class="literal">False</span>).head(<span class="number">10</span>)</span><br><span class="line">st_amt.plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;AxesSubplot:xlabel=&#39;STATE&#39;&gt;
</code></pre>
<img src="/2022/11/13/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%A8Pandas%E6%8F%AD%E7%A7%98%E7%BE%8E%E5%9B%BD%E9%80%89%E6%B0%91%E7%9A%84%E6%80%BB%E7%BB%9F%E5%96%9C%E5%A5%BD/output_49_1.png" class="">
<h4 id="各州捐款总人数可视化"><a href="#各州捐款总人数可视化" class="headerlink" title="各州捐款总人数可视化"></a>各州捐款总人数可视化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st_amt = c_itcont[<span class="string">&#x27;STATE&#x27;</span>].value_counts().head(<span class="number">10</span>)</span><br><span class="line">st_amt.plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;AxesSubplot:&gt;
</code></pre>
<img src="/2022/11/13/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%A8Pandas%E6%8F%AD%E7%A7%98%E7%BE%8E%E5%9B%BD%E9%80%89%E6%B0%91%E7%9A%84%E6%80%BB%E7%BB%9F%E5%96%9C%E5%A5%BD/output_51_1.png" class="">
<h4 id="热门候选人拜登在各州的获得的捐赠占比"><a href="#热门候选人拜登在各州的获得的捐赠占比" class="headerlink" title="热门候选人拜登在各州的获得的捐赠占比"></a>热门候选人拜登在各州的获得的捐赠占比</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从所有数据中取出支持拜登的数据</span></span><br><span class="line">biden = c_itcont[c_itcont[<span class="string">&quot;CAND_NAME&quot;</span>]==<span class="string">&#x27;BIDEN, JOSEPH R JR&#x27;</span>]</span><br><span class="line"><span class="comment"># 统计各州对拜登的捐款总数</span></span><br><span class="line">biden_state = biden.groupby(<span class="string">&#x27;STATE&#x27;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>, ascending=<span class="literal">False</span>).head(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 饼图可视化各州捐款数据占比</span></span><br><span class="line"><span class="comment">#biden_state.plot.pie(figsize=(10, 10),autopct=&#x27;%0.2f%%&#x27;,subplots=True)</span></span><br><span class="line">biden_state.plot.pie(figsize=(<span class="number">10</span>, <span class="number">10</span>),autopct=<span class="string">&#x27;%0.2f%%&#x27;</span>,subplots=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([&lt;AxesSubplot:ylabel=&#39;TRANSACTION_AMT&#39;&gt;], dtype=object)
</code></pre>
<img src="/2022/11/13/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%A8Pandas%E6%8F%AD%E7%A7%98%E7%BE%8E%E5%9B%BD%E9%80%89%E6%B0%91%E7%9A%84%E6%80%BB%E7%BB%9F%E5%96%9C%E5%A5%BD/output_53_1.png" class="">
<h4 id="总捐最多的候选人捐赠者词云图"><a href="#总捐最多的候选人捐赠者词云图" class="headerlink" title="总捐最多的候选人捐赠者词云图"></a>总捐最多的候选人捐赠者词云图</h4><p>通过数据分析中获得捐赠总额前三的候选人统计中可以看出拜登在2020.7.22-2020.8.20这期间获得捐赠的总额是最多的，所以我们以拜登为原模型，制作词云图。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = c_itcont.groupby(<span class="string">&quot;NAME&quot;</span>).<span class="built_in">sum</span>(<span class="string">&quot;TRANSACTION_AMT&quot;</span>).sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>,ascending=<span class="literal">False</span>).head(<span class="number">200</span>)</span><br><span class="line">name</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TRANSACTION_AMT</th>
    </tr>
    <tr>
      <th>NAME</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>BLOOMBERG, MICHAEL R.</th>
      <td>3451795</td>
    </tr>
    <tr>
      <th>COLBURN, RICHARD</th>
      <td>248527</td>
    </tr>
    <tr>
      <th>PEYKOFF, ANDREW II</th>
      <td>248500</td>
    </tr>
    <tr>
      <th>FIGLESTHALER, WILLIAM MATTHEW MD</th>
      <td>245821</td>
    </tr>
    <tr>
      <th>SHORT, ROBERT G</th>
      <td>101344</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
    </tr>
    <tr>
      <th>SMITH, JEFFREY E</th>
      <td>10000</td>
    </tr>
    <tr>
      <th>NEAL, REBECCA</th>
      <td>10000</td>
    </tr>
    <tr>
      <th>SHIRLEY, STEVE</th>
      <td>10000</td>
    </tr>
    <tr>
      <th>VIVIAN, GARY</th>
      <td>10000</td>
    </tr>
    <tr>
      <th>SMITH, FREDERICA</th>
      <td>10000</td>
    </tr>
  </tbody>
</table>
<p>200 rows × 1 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = name.to_dict()[<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>]</span><br><span class="line">w = wordcloud.WordCloud(width=<span class="number">800</span>,height=<span class="number">400</span>,background_color=<span class="string">&#x27;white&#x27;</span>,prefer_horizontal=<span class="number">1</span>)</span><br><span class="line">w.generate_from_frequencies(name)</span><br><span class="line">plt.rcParams[<span class="string">&quot;figure.figsize&quot;</span>] = (<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">plt.imshow(w)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.image.AxesImage at 0x7fef25d79460&gt;
</code></pre>
<img src="/2022/11/13/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%A8Pandas%E6%8F%AD%E7%A7%98%E7%BE%8E%E5%9B%BD%E9%80%89%E6%B0%91%E7%9A%84%E6%80%BB%E7%BB%9F%E5%96%9C%E5%A5%BD/output_57_1.png" class="">


<h4 id="按州总捐款热力地图"><a href="#按州总捐款热力地图" class="headerlink" title="按州总捐款热力地图"></a>按州总捐款热力地图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">!pip install pyecharts</span><br><span class="line">!pip install echarts-countries-pypkg</span><br></pre></td></tr></table></figure>

<pre><code>Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Requirement already satisfied: pyecharts in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (1.9.1)
Requirement already satisfied: jinja2 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from pyecharts) (2.11.3)
Requirement already satisfied: prettytable in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from pyecharts) (3.5.0)
Requirement already satisfied: simplejson in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from pyecharts) (3.17.6)
Requirement already satisfied: MarkupSafe&gt;=0.23 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from jinja2-&gt;pyecharts) (2.0.1)
Requirement already satisfied: wcwidth in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from prettytable-&gt;pyecharts) (0.2.5)
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Requirement already satisfied: echarts-countries-pypkg in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (0.1.6)
Requirement already satisfied: lml&gt;=0.0.2 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from echarts-countries-pypkg) (0.1.0)
Requirement already satisfied: pyecharts-jupyter-installer==0.0.3 in /Users/jackgan/opt/anaconda3/lib/python3.9/site-packages (from echarts-countries-pypkg) (0.0.3)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">states = c_itcont.groupby(<span class="string">&quot;STATE&quot;</span>).<span class="built_in">sum</span>(<span class="string">&quot;TRANSACTION_AMT&quot;</span>).sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">states </span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TRANSACTION_AMT</th>
    </tr>
    <tr>
      <th>STATE</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>CA</th>
      <td>19222386</td>
    </tr>
    <tr>
      <th>NY</th>
      <td>11243839</td>
    </tr>
    <tr>
      <th>FL</th>
      <td>7418137</td>
    </tr>
    <tr>
      <th>TX</th>
      <td>7364516</td>
    </tr>
    <tr>
      <th>MA</th>
      <td>5128879</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
    </tr>
    <tr>
      <th>AA</th>
      <td>4560</td>
    </tr>
    <tr>
      <th>MP</th>
      <td>609</td>
    </tr>
    <tr>
      <th>PW</th>
      <td>449</td>
    </tr>
    <tr>
      <th>AS</th>
      <td>232</td>
    </tr>
    <tr>
      <th>FM</th>
      <td>63</td>
    </tr>
  </tbody>
</table>
<p>63 rows × 1 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#美国各州简称与全称映射表</span></span><br><span class="line">state_data=&#123;<span class="string">&quot;AL&quot;</span>:<span class="string">&quot;Alabama&quot;</span>,<span class="string">&quot;AK&quot;</span>:<span class="string">&quot;Alaska&quot;</span>,<span class="string">&quot;AZ&quot;</span>:<span class="string">&quot;Arizona&quot;</span>,<span class="string">&quot;AR&quot;</span>:<span class="string">&quot;Arkansas&quot;</span>,<span class="string">&quot;CA&quot;</span>:<span class="string">&quot;California&quot;</span>,<span class="string">&quot;CO&quot;</span>:<span class="string">&quot;Colorado&quot;</span>,<span class="string">&quot;CT&quot;</span>:<span class="string">&quot;Connecticut&quot;</span>,</span><br><span class="line"> <span class="string">&quot;DE&quot;</span>:<span class="string">&quot;Delaware&quot;</span>,<span class="string">&quot;FL&quot;</span>:<span class="string">&quot;Florida&quot;</span>,<span class="string">&quot;GA&quot;</span>:<span class="string">&quot;Georgia&quot;</span>,<span class="string">&quot;HI&quot;</span>:<span class="string">&quot;Hawaii&quot;</span>,<span class="string">&quot;ID&quot;</span>:<span class="string">&quot;Idaho&quot;</span>,<span class="string">&quot;IL&quot;</span>:<span class="string">&quot;Illinois&quot;</span>,<span class="string">&quot;IN&quot;</span>:<span class="string">&quot;Indiana&quot;</span>,<span class="string">&quot;IA&quot;</span>:<span class="string">&quot;Iowa&quot;</span>,</span><br><span class="line"> <span class="string">&quot;KS&quot;</span>:<span class="string">&quot;Kansas&quot;</span>,<span class="string">&quot;KY&quot;</span>:<span class="string">&quot;Kentucky&quot;</span>,<span class="string">&quot;LA&quot;</span>:<span class="string">&quot;Louisana&quot;</span>,<span class="string">&quot;ME&quot;</span>:<span class="string">&quot;Maine&quot;</span>,<span class="string">&quot;MD&quot;</span>:<span class="string">&quot;Maryland&quot;</span>,<span class="string">&quot;MA&quot;</span>:<span class="string">&quot;Massachusetts&quot;</span>,<span class="string">&quot;MI&quot;</span>:<span class="string">&quot;Michigan&quot;</span>,</span><br><span class="line"> <span class="string">&quot;MN&quot;</span>:<span class="string">&quot;Minnesota&quot;</span>,<span class="string">&quot;MS&quot;</span>:<span class="string">&quot;Mississippi&quot;</span>,<span class="string">&quot;MO&quot;</span>:<span class="string">&quot;Missouri&quot;</span>,<span class="string">&quot;MT&quot;</span>:<span class="string">&quot;Montana&quot;</span>,<span class="string">&quot;NE&quot;</span>:<span class="string">&quot;Nebraska&quot;</span>,<span class="string">&quot;NV&quot;</span>:<span class="string">&quot;Nevada&quot;</span>,<span class="string">&quot;NH&quot;</span>:<span class="string">&quot;New Hampshire&quot;</span>, </span><br><span class="line"> <span class="string">&quot;NJ&quot;</span>:<span class="string">&quot;New Jersey&quot;</span>,<span class="string">&quot;NM&quot;</span>:<span class="string">&quot;New Mexico&quot;</span>,<span class="string">&quot;NY&quot;</span>:<span class="string">&quot;New York&quot;</span>,<span class="string">&quot;NC&quot;</span>:<span class="string">&quot;North Carolina&quot;</span>,<span class="string">&quot;ND&quot;</span>:<span class="string">&quot;North Dakota&quot;</span>,<span class="string">&quot;OH&quot;</span>:<span class="string">&quot;Ohio&quot;</span>,<span class="string">&quot;OK&quot;</span>:<span class="string">&quot;Oklahoma&quot;</span>,</span><br><span class="line"> <span class="string">&quot;OR&quot;</span>:<span class="string">&quot;Oregon&quot;</span>,<span class="string">&quot;PA&quot;</span>:<span class="string">&quot;Pennsylvania&quot;</span>,<span class="string">&quot;RI&quot;</span>:<span class="string">&quot;Rhode Island&quot;</span>,<span class="string">&quot;SC&quot;</span>:<span class="string">&quot;South Carolina&quot;</span>,<span class="string">&quot;SD&quot;</span>:<span class="string">&quot;South Dakota&quot;</span>,<span class="string">&quot;TN&quot;</span>:<span class="string">&quot;Tennessee&quot;</span>,</span><br><span class="line"> <span class="string">&quot;TX&quot;</span>:<span class="string">&quot;Texas&quot;</span>,<span class="string">&quot;UT&quot;</span>:<span class="string">&quot;Utah&quot;</span>,<span class="string">&quot;VT&quot;</span>:<span class="string">&quot;Vermont&quot;</span>,<span class="string">&quot;VA&quot;</span>:<span class="string">&quot;Virginia&quot;</span>,<span class="string">&quot;WA&quot;</span>:<span class="string">&quot;Washington&quot;</span>,<span class="string">&quot;WV&quot;</span>:<span class="string">&quot;West Virginia&quot;</span>,<span class="string">&quot;WI&quot;</span>:<span class="string">&quot;Wisconsin&quot;</span>,</span><br><span class="line"> <span class="string">&quot;WY&quot;</span>:<span class="string">&quot;Wyoming&quot;</span>,<span class="string">&quot;NOT PROVIDED&quot;</span>:<span class="string">&quot;NP&quot;</span>&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idx = [state_data[state] <span class="keyword">if</span> state <span class="keyword">in</span> state_data <span class="keyword">else</span> state <span class="keyword">for</span> state <span class="keyword">in</span> states[<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>].index]</span><br><span class="line">val = [math.log(i) <span class="keyword">for</span> i <span class="keyword">in</span> states[<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>].values]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只需要在顶部声明 CurrentConfig.ONLINE_HOST 即可</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig</span><br><span class="line">CurrentConfig.ONLINE_HOST = <span class="string">&quot;http://127.0.0.1:8000/assets/&quot;</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">c = (</span><br><span class="line">    Map(init_opts = opts.InitOpts(width=<span class="string">&quot;1200px&quot;</span>, height=<span class="string">&quot;800px&quot;</span>))</span><br><span class="line">    .add(</span><br><span class="line">        <span class="string">&quot;STATE&quot;</span>,</span><br><span class="line">        <span class="comment"># 按顺序：省份名字及其值</span></span><br><span class="line">        [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(idx, val)],</span><br><span class="line">        <span class="comment"># 放在哪个地图上</span></span><br><span class="line">        <span class="string">&quot;美国&quot;</span>,</span><br><span class="line">        <span class="comment"># 是否在每个行政区上面显示这个行政区的名字</span></span><br><span class="line">        label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">        is_map_symbol_show = <span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        <span class="comment"># 设置热力图中的最大值是多少</span></span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(max_=<span class="built_in">max</span>(val)),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 保存，以及文件名</span></span><br><span class="line">    .render_notebook()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c</span><br></pre></td></tr></table></figure>





<script>
    require.config({
        paths: {
            'echarts':'http://127.0.0.1:8000/assets/echarts.min', '美国':'http://127.0.0.1:8000/assets/maps/USA'
        }
    });
</script>

<pre><code>    &lt;div id=&quot;37f5b35d8e074d4d89d017f37d36c89c&quot; style=&quot;width:1200px; height:800px;&quot;&gt;&lt;/div&gt;
</code></pre>
<script>
        require(['echarts', '美国'], function(echarts) {
                var chart_37f5b35d8e074d4d89d017f37d36c89c = echarts.init(
                    document.getElementById('37f5b35d8e074d4d89d017f37d36c89c'), 'white', {renderer: 'canvas'});
                var option_37f5b35d8e074d4d89d017f37d36c89c = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "map",
            "name": "STATE",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "mapType": "\u7f8e\u56fd",
            "data": [
                {
                    "name": "California",
                    "value": 16.77158609532075
                },
                {
                    "name": "New York",
                    "value": 16.23533089215827
                },
                {
                    "name": "Florida",
                    "value": 15.819438505451048
                },
                {
                    "name": "Texas",
                    "value": 15.812183889494072
                },
                {
                    "name": "Massachusetts",
                    "value": 15.450397674749784
                },
                {
                    "name": "Washington",
                    "value": 15.262099368752715
                },
                {
                    "name": "Virginia",
                    "value": 15.058379888285128
                },
                {
                    "name": "Illinois",
                    "value": 15.031657258791915
                },
                {
                    "name": "Pennsylvania",
                    "value": 14.977328917952843
                },
                {
                    "name": "Maryland",
                    "value": 14.862924986287352
                },
                {
                    "name": "Colorado",
                    "value": 14.710727591073063
                },
                {
                    "name": "Georgia",
                    "value": 14.704334302226343
                },
                {
                    "name": "New Jersey",
                    "value": 14.700053004426989
                },
                {
                    "name": "North Carolina",
                    "value": 14.633345768629988
                },
                {
                    "name": "Ohio",
                    "value": 14.498619018764867
                },
                {
                    "name": "Michigan",
                    "value": 14.496354867617423
                },
                {
                    "name": "Oregon",
                    "value": 14.47528242766989
                },
                {
                    "name": "Arizona",
                    "value": 14.473934297465833
                },
                {
                    "name": "DC",
                    "value": 14.440240772600392
                },
                {
                    "name": "Minnesota",
                    "value": 14.29357845839208
                },
                {
                    "name": "Connecticut",
                    "value": 14.118282700448386
                },
                {
                    "name": "Tennessee",
                    "value": 14.108151813316038
                },
                {
                    "name": "Missouri",
                    "value": 13.968344085012252
                },
                {
                    "name": "Wisconsin",
                    "value": 13.850111964684272
                },
                {
                    "name": "South Carolina",
                    "value": 13.760329716849531
                },
                {
                    "name": "Nevada",
                    "value": 13.719748275977157
                },
                {
                    "name": "Indiana",
                    "value": 13.691956652825588
                },
                {
                    "name": "Oklahoma",
                    "value": 13.662464268073888
                },
                {
                    "name": "New Mexico",
                    "value": 13.517519530361318
                },
                {
                    "name": "New Hampshire",
                    "value": 13.513922916339954
                },
                {
                    "name": "Louisana",
                    "value": 13.356090722258184
                },
                {
                    "name": "Alabama",
                    "value": 13.350773038391038
                },
                {
                    "name": "Delaware",
                    "value": 13.243316494150976
                },
                {
                    "name": "Kentucky",
                    "value": 13.160258211968937
                },
                {
                    "name": "Utah",
                    "value": 13.153782583942455
                },
                {
                    "name": "Kansas",
                    "value": 13.102992976684783
                },
                {
                    "name": "Iowa",
                    "value": 13.003937885417065
                },
                {
                    "name": "Alaska",
                    "value": 12.951805160434446
                },
                {
                    "name": "Maine",
                    "value": 12.925162876069889
                },
                {
                    "name": "Hawaii",
                    "value": 12.908575921014144
                },
                {
                    "name": "Arkansas",
                    "value": 12.847510655764474
                },
                {
                    "name": "Wyoming",
                    "value": 12.822487258851842
                },
                {
                    "name": "Idaho",
                    "value": 12.807710165156173
                },
                {
                    "name": "Rhode Island",
                    "value": 12.680889671771439
                },
                {
                    "name": "Mississippi",
                    "value": 12.63630841196355
                },
                {
                    "name": "Montana",
                    "value": 12.551858518136736
                },
                {
                    "name": "Vermont",
                    "value": 12.457484846808923
                },
                {
                    "name": "Nebraska",
                    "value": 12.452252804869431
                },
                {
                    "name": "ZZ",
                    "value": 12.404546383994097
                },
                {
                    "name": "South Dakota",
                    "value": 12.0431712899757
                },
                {
                    "name": "West Virginia",
                    "value": 11.989327331769568
                },
                {
                    "name": "North Dakota",
                    "value": 11.732831782091454
                },
                {
                    "name": "GU",
                    "value": 11.059739620650653
                },
                {
                    "name": "NP",
                    "value": 10.318473856527929
                },
                {
                    "name": "AE",
                    "value": 10.273083657563381
                },
                {
                    "name": "PR",
                    "value": 10.027782671807735
                },
                {
                    "name": "VI",
                    "value": 9.48303570211964
                },
                {
                    "name": "AP",
                    "value": 8.896724917497897
                },
                {
                    "name": "AA",
                    "value": 8.425077902508432
                },
                {
                    "name": "MP",
                    "value": 6.411818267709897
                },
                {
                    "name": "PW",
                    "value": 6.1070228877422545
                },
                {
                    "name": "AS",
                    "value": 5.44673737166631
                },
                {
                    "name": "FM",
                    "value": 4.143134726391533
                }
            ],
            "roam": true,
            "aspectScale": 0.75,
            "nameProperty": "name",
            "selectedMode": false,
            "zoom": 1,
            "mapValueCalculation": "sum",
            "showLegendSymbol": true,
            "emphasis": {}
        }
    ],
    "legend": [
        {
            "data": [
                "STATE"
            ],
            "selected": {
                "STATE": true
            },
            "show": true,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "showContent": true,
        "alwaysShowContent": false,
        "showDelay": 0,
        "hideDelay": 100,
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0,
        "padding": 5
    },
    "title": [
        {
            "padding": 5,
            "itemGap": 10
        }
    ],
    "visualMap": {
        "show": true,
        "type": "continuous",
        "min": 0,
        "max": 16.77158609532075,
        "inRange": {
            "color": [
                "#50a3ba",
                "#eac763",
                "#d94e5d"
            ]
        },
        "calculable": true,
        "inverse": false,
        "splitNumber": 5,
        "orient": "vertical",
        "showLabel": true,
        "itemWidth": 20,
        "itemHeight": 140,
        "borderWidth": 0
    }
};
                chart_37f5b35d8e074d4d89d017f37d36c89c.setOption(option_37f5b35d8e074d4d89d017f37d36c89c);
        });
    </script>


<h4 id="收到捐赠额最多的两位候选人的总捐赠额变化趋势"><a href="#收到捐赠额最多的两位候选人的总捐赠额变化趋势" class="headerlink" title="收到捐赠额最多的两位候选人的总捐赠额变化趋势"></a>收到捐赠额最多的两位候选人的总捐赠额变化趋势</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拜登获得捐赠额随时间变化</span></span><br><span class="line">biden = c_itcont[c_itcont[<span class="string">&quot;CAND_NAME&quot;</span>]==<span class="string">&#x27;BIDEN, JOSEPH R JR&#x27;</span>]</span><br><span class="line">biden_date = biden.groupby(<span class="string">&#x27;TRANSACTION_DT&#x27;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;TRANSACTION_DT&quot;</span>, ascending=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#川普获得捐赠额随时间变化</span></span><br><span class="line">trump = c_itcont[c_itcont[<span class="string">&quot;CAND_NAME&quot;</span>]==<span class="string">&#x27;TRUMP, DONALD J.&#x27;</span>]</span><br><span class="line">trump_date = trump.groupby(<span class="string">&#x27;TRANSACTION_DT&#x27;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;TRANSACTION_DT&quot;</span>, ascending=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">list</span>(biden_date.index)</span><br><span class="line">trump_transaction=<span class="built_in">list</span>(trump_date.values)</span><br><span class="line">biden_transaction=<span class="built_in">list</span>(biden_date.values)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#设置画布大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), dpi=<span class="number">80</span>)</span><br><span class="line"><span class="comment">#画trump趋势线</span></span><br><span class="line">plt.plot(x,trump_transaction,color=<span class="string">&#x27;red&#x27;</span>,linewidth=<span class="number">2.5</span>,label=<span class="string">&#x27;trump&#x27;</span>)</span><br><span class="line"><span class="comment">#画biden趋势线</span></span><br><span class="line">plt.plot(x,biden_transaction,color=<span class="string">&#x27;blue&#x27;</span>,linewidth=<span class="number">2.5</span>,label=<span class="string">&#x27;biden&#x27;</span>)</span><br><span class="line"><span class="comment">#横轴标题</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;Date&quot;</span>)</span><br><span class="line"><span class="comment">#横轴刻度</span></span><br><span class="line">plt.xticks(x,rotation=<span class="string">&#x27;vertical&#x27;</span>)</span><br><span class="line"><span class="comment">#纵轴标题</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;Transaction($)&quot;</span>)</span><br><span class="line"><span class="comment">#纵轴上下限</span></span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">10000000</span>)</span><br><span class="line"><span class="comment">#纵轴刻度</span></span><br><span class="line">plt.yticks(np.linspace(<span class="number">0</span>,<span class="number">10000000</span>,<span class="number">21</span>,endpoint=<span class="literal">True</span>))</span><br><span class="line"><span class="comment">#显示图标</span></span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line"><span class="comment">#注释异常点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">plt.title(<span class="string">&quot;2020.7.22 - 2020.8.20 Trump Transaction VS Biden Transaction&quot;</span>)</span><br><span class="line"><span class="comment">#设置网格</span></span><br><span class="line">plt.grid(<span class="literal">True</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,alpha=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#展示图表</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<img src="/2022/11/13/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%A8Pandas%E6%8F%AD%E7%A7%98%E7%BE%8E%E5%9B%BD%E9%80%89%E6%B0%91%E7%9A%84%E6%80%BB%E7%BB%9F%E5%96%9C%E5%A5%BD/output_66_0.png" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trump = c_itcont[c_itcont[<span class="string">&quot;CAND_NAME&quot;</span>]==<span class="string">&#x27;TRUMP, DONALD J.&#x27;</span>]</span><br><span class="line">trump_state = trump.groupby(<span class="string">&quot;STATE&quot;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">biden = c_itcont[c_itcont[<span class="string">&quot;CAND_NAME&quot;</span>]==<span class="string">&#x27;BIDEN, JOSEPH R JR&#x27;</span>]</span><br><span class="line">biden_state = biden.groupby(<span class="string">&quot;STATE&quot;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;TRANSACTION_AMT&quot;</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = <span class="built_in">list</span>(trump_state[<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>].index)</span><br><span class="line">y1 = <span class="built_in">list</span>(trump_state[<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>].values)</span><br><span class="line">x2 = <span class="built_in">list</span>(biden_state[<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>].index)</span><br><span class="line">y2 = <span class="built_in">list</span>(biden_state[<span class="string">&#x27;TRANSACTION_AMT&#x27;</span>].values)</span><br></pre></td></tr></table></figure>

<h4 id="收到捐赠额最多的两位候选人的各州捐赠额对比"><a href="#收到捐赠额最多的两位候选人的各州捐赠额对比" class="headerlink" title="收到捐赠额最多的两位候选人的各州捐赠额对比"></a>收到捐赠额最多的两位候选人的各州捐赠额对比</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#设置画布大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">30</span>), dpi=<span class="number">80</span>)</span><br><span class="line"><span class="comment">#画trump趋势线</span></span><br><span class="line">ax1 = plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.barh(x1,y1,color=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;trump&#x27;</span>)</span><br><span class="line"><span class="comment"># #横轴标题</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;Transaction($)&quot;</span>)</span><br><span class="line">ax1.invert_yaxis()</span><br><span class="line"><span class="comment"># #横轴刻度</span></span><br><span class="line">plt.xticks(y1)</span><br><span class="line"><span class="comment"># 横轴上下限</span></span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">15000000</span>)</span><br><span class="line"><span class="comment"># 横轴刻度</span></span><br><span class="line">plt.xticks(np.linspace(<span class="number">0</span>,<span class="number">15000000</span>,<span class="number">11</span>,endpoint=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 横轴标题</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;State&quot;</span>)</span><br><span class="line"><span class="comment"># #显示图标</span></span><br><span class="line">plt.legend(loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,alpha=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># #设置标题</span></span><br><span class="line">plt.title(<span class="string">&quot;Trump Transaction for each state&quot;</span>)</span><br><span class="line"><span class="comment"># #设置网格</span></span><br><span class="line">ax1 = plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#画biden趋势线</span></span><br><span class="line">plt.barh(x2,y2,color=<span class="string">&#x27;blue&#x27;</span>,label=<span class="string">&#x27;biden&#x27;</span>)</span><br><span class="line"><span class="comment"># #横轴标题</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;Transaction($)&quot;</span>)</span><br><span class="line">ax1.invert_yaxis()</span><br><span class="line"><span class="comment"># #横轴刻度</span></span><br><span class="line">plt.xticks(y1)</span><br><span class="line"><span class="comment"># 横轴上下限</span></span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">15000000</span>)</span><br><span class="line"><span class="comment"># 横轴刻度</span></span><br><span class="line">plt.xticks(np.linspace(<span class="number">0</span>,<span class="number">15000000</span>,<span class="number">11</span>,endpoint=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 横轴标题</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;State&quot;</span>)</span><br><span class="line"><span class="comment"># #显示图标</span></span><br><span class="line">plt.legend(loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,alpha=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># #设置标题</span></span><br><span class="line">plt.title(<span class="string">&quot;Biden Transaction for each state&quot;</span>)</span><br><span class="line"><span class="comment">#展示图表</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<img src="/2022/11/13/%E9%98%BF%E9%87%8C%E4%BA%91AI%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%A8Pandas%E6%8F%AD%E7%A7%98%E7%BE%8E%E5%9B%BD%E9%80%89%E6%B0%91%E7%9A%84%E6%80%BB%E7%BB%9F%E5%96%9C%E5%A5%BD/output_69_0.png" class="">

]]></content>
      <categories>
        <category>编程笔记</category>
        <category>AI学习</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>AI</tag>
        <tag>阿里云</tag>
        <tag>天池</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
</search>
